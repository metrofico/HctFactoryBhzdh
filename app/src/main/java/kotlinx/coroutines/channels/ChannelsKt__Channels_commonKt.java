package kotlinx.coroutines.channels;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.concurrent.CancellationException;
import kotlin.Deprecated;
import kotlin.DeprecationLevel;
import kotlin.Metadata;
import kotlin.Pair;
import kotlin.ResultKt;
import kotlin.Unit;
import kotlin.collections.IndexedValue;
import kotlin.coroutines.Continuation;
import kotlin.coroutines.CoroutineContext;
import kotlin.coroutines.intrinsics.IntrinsicsKt;
import kotlin.coroutines.jvm.internal.Boxing;
import kotlin.coroutines.jvm.internal.ContinuationImpl;
import kotlin.jvm.functions.Function1;
import kotlin.jvm.functions.Function2;
import kotlin.jvm.functions.Function3;
import kotlin.jvm.internal.InlineMarker;
import kotlin.jvm.internal.Intrinsics;
import kotlin.jvm.internal.Ref;
import kotlinx.coroutines.CoroutineScope;
import kotlinx.coroutines.CoroutineStart;
import kotlinx.coroutines.Dispatchers;
import kotlinx.coroutines.ExceptionsKt;
import kotlinx.coroutines.GlobalScope;
import kotlinx.coroutines.selects.SelectClause1;

@Metadata(
   bv = {1, 0, 3},
   d1 = {"\u0000Ø\u0001\n\u0000\n\u0002\u0010\u000e\n\u0000\n\u0002\u0018\u0002\n\u0002\u0010\u0003\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0011\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\u000b\n\u0002\b\u0006\n\u0002\u0010$\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0010%\n\u0002\b\u0007\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\r\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010\u001f\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0017\n\u0002\u0010 \n\u0000\n\u0002\u0010!\n\u0002\b\u0011\n\u0002\u0010\u000f\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0002\b\f\n\u0002\u0010\u0006\n\u0002\b\t\n\u0002\u0010#\n\u0000\n\u0002\u0010\"\n\u0002\b\u0006\u001aJ\u0010\u0002\u001a#\u0012\u0015\u0012\u0013\u0018\u00010\u0004¢\u0006\f\b\u0005\u0012\b\b\u0006\u0012\u0004\b\b(\u0007\u0012\u0004\u0012\u00020\b0\u0003j\u0002`\t2\u001a\u0010\n\u001a\u000e\u0012\n\b\u0001\u0012\u0006\u0012\u0002\b\u00030\f0\u000b\"\u0006\u0012\u0002\b\u00030\fH\u0007¢\u0006\u0002\u0010\r\u001a5\u0010\u000e\u001a\u00020\u000f\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u00020\u000f0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010\u0012\u001a!\u0010\u0013\u001a\u00020\u000f\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\fH\u0087@ø\u0001\u0000¢\u0006\u0002\u0010\u0014\u001a5\u0010\u0013\u001a\u00020\u000f\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u00020\u000f0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010\u0012\u001aY\u0010\u0015\u001a\u000e\u0012\u0004\u0012\u0002H\u0017\u0012\u0004\u0012\u0002H\u00180\u0016\"\u0004\b\u0000\u0010\u0010\"\u0004\b\u0001\u0010\u0017\"\u0004\b\u0002\u0010\u0018*\b\u0012\u0004\u0012\u0002H\u00100\f2\u001e\u0010\u0019\u001a\u001a\u0012\u0004\u0012\u0002H\u0010\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\u0017\u0012\u0004\u0012\u0002H\u00180\u001a0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010\u0012\u001aG\u0010\u001b\u001a\u000e\u0012\u0004\u0012\u0002H\u0017\u0012\u0004\u0012\u0002H\u00100\u0016\"\u0004\b\u0000\u0010\u0010\"\u0004\b\u0001\u0010\u0017*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0012\u0010\u001c\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u0002H\u00170\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010\u0012\u001aa\u0010\u001b\u001a\u000e\u0012\u0004\u0012\u0002H\u0017\u0012\u0004\u0012\u0002H\u00180\u0016\"\u0004\b\u0000\u0010\u0010\"\u0004\b\u0001\u0010\u0017\"\u0004\b\u0002\u0010\u0018*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0012\u0010\u001c\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u0002H\u00170\u00032\u0012\u0010\u001d\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u0002H\u00180\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010\u001e\u001a]\u0010\u001f\u001a\u0002H \"\u0004\b\u0000\u0010\u0010\"\u0004\b\u0001\u0010\u0017\"\u0018\b\u0002\u0010 *\u0012\u0012\u0006\b\u0000\u0012\u0002H\u0017\u0012\u0006\b\u0000\u0012\u0002H\u00100!*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010\"\u001a\u0002H 2\u0012\u0010\u001c\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u0002H\u00170\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010#\u001aw\u0010\u001f\u001a\u0002H \"\u0004\b\u0000\u0010\u0010\"\u0004\b\u0001\u0010\u0017\"\u0004\b\u0002\u0010\u0018\"\u0018\b\u0003\u0010 *\u0012\u0012\u0006\b\u0000\u0012\u0002H\u0017\u0012\u0006\b\u0000\u0012\u0002H\u00180!*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010\"\u001a\u0002H 2\u0012\u0010\u001c\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u0002H\u00170\u00032\u0012\u0010\u001d\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u0002H\u00180\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010$\u001ao\u0010%\u001a\u0002H \"\u0004\b\u0000\u0010\u0010\"\u0004\b\u0001\u0010\u0017\"\u0004\b\u0002\u0010\u0018\"\u0018\b\u0003\u0010 *\u0012\u0012\u0006\b\u0000\u0012\u0002H\u0017\u0012\u0006\b\u0000\u0012\u0002H\u00180!*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010\"\u001a\u0002H 2\u001e\u0010\u0019\u001a\u001a\u0012\u0004\u0012\u0002H\u0010\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\u0017\u0012\u0004\u0012\u0002H\u00180\u001a0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010#\u001a\u001a\u0010&\u001a\u00020\b*\u0006\u0012\u0002\b\u00030\f2\b\u0010\u0007\u001a\u0004\u0018\u00010\u0004H\u0001\u001aC\u0010'\u001a\u0002H(\"\u0004\b\u0000\u0010\u0010\"\u0004\b\u0001\u0010(*\b\u0012\u0004\u0012\u0002H\u00100)2\u001d\u0010*\u001a\u0019\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00100\f\u0012\u0004\u0012\u0002H(0\u0003¢\u0006\u0002\b+H\u0087\b¢\u0006\u0002\u0010,\u001aC\u0010'\u001a\u0002H(\"\u0004\b\u0000\u0010\u0010\"\u0004\b\u0001\u0010(*\b\u0012\u0004\u0012\u0002H\u00100\f2\u001d\u0010*\u001a\u0019\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00100\f\u0012\u0004\u0012\u0002H(0\u0003¢\u0006\u0002\b+H\u0086\b¢\u0006\u0002\u0010-\u001a5\u0010.\u001a\u00020\b\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100)2\u0012\u0010/\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u00020\b0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u00100\u001a5\u0010.\u001a\u00020\b\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0012\u0010/\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u00020\b0\u0003H\u0086Hø\u0001\u0000¢\u0006\u0002\u0010\u0012\u001a;\u00101\u001a\u00020\b\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0018\u0010/\u001a\u0014\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u001002\u0012\u0004\u0012\u00020\b0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010\u0012\u001a1\u00103\u001a#\u0012\u0015\u0012\u0013\u0018\u00010\u0004¢\u0006\f\b\u0005\u0012\b\b\u0006\u0012\u0004\b\b(\u0007\u0012\u0004\u0012\u00020\b0\u0003j\u0002`\t*\u0006\u0012\u0002\b\u00030\fH\u0007\u001a!\u00104\u001a\u000205\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\fH\u0087@ø\u0001\u0000¢\u0006\u0002\u0010\u0014\u001a5\u00104\u001a\u000205\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u00020\u000f0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010\u0012\u001a\u001e\u00106\u001a\b\u0012\u0004\u0012\u0002H\u00100\f\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\fH\u0007\u001aZ\u00107\u001a\b\u0012\u0004\u0012\u0002H\u00100\f\"\u0004\b\u0000\u0010\u0010\"\u0004\b\u0001\u0010\u0017*\b\u0012\u0004\u0012\u0002H\u00100\f2\b\b\u0002\u00108\u001a\u0002092\"\u0010:\u001a\u001e\b\u0001\u0012\u0004\u0012\u0002H\u0010\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00170<\u0012\u0006\u0012\u0004\u0018\u00010=0;H\u0007ø\u0001\u0000¢\u0006\u0002\u0010>\u001a0\u0010?\u001a\b\u0012\u0004\u0012\u0002H\u00100\f\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010@\u001a\u0002052\b\b\u0002\u00108\u001a\u000209H\u0007\u001aT\u0010A\u001a\b\u0012\u0004\u0012\u0002H\u00100\f\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\b\b\u0002\u00108\u001a\u0002092\"\u0010\u0011\u001a\u001e\b\u0001\u0012\u0004\u0012\u0002H\u0010\u0012\n\u0012\b\u0012\u0004\u0012\u00020\u000f0<\u0012\u0006\u0012\u0004\u0018\u00010=0;H\u0007ø\u0001\u0000¢\u0006\u0002\u0010>\u001a)\u0010B\u001a\u0002H\u0010\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010C\u001a\u000205H\u0087@ø\u0001\u0000¢\u0006\u0002\u0010D\u001a=\u0010E\u001a\u0002H\u0010\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010C\u001a\u0002052\u0012\u0010F\u001a\u000e\u0012\u0004\u0012\u000205\u0012\u0004\u0012\u0002H\u00100\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010G\u001a+\u0010H\u001a\u0004\u0018\u0001H\u0010\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010C\u001a\u000205H\u0087@ø\u0001\u0000¢\u0006\u0002\u0010D\u001aT\u0010I\u001a\b\u0012\u0004\u0012\u0002H\u00100\f\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\b\b\u0002\u00108\u001a\u0002092\"\u0010\u0011\u001a\u001e\b\u0001\u0012\u0004\u0012\u0002H\u0010\u0012\n\u0012\b\u0012\u0004\u0012\u00020\u000f0<\u0012\u0006\u0012\u0004\u0018\u00010=0;H\u0007ø\u0001\u0000¢\u0006\u0002\u0010>\u001ai\u0010J\u001a\b\u0012\u0004\u0012\u0002H\u00100\f\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\b\b\u0002\u00108\u001a\u00020927\u0010\u0011\u001a3\b\u0001\u0012\u0013\u0012\u001105¢\u0006\f\b\u0005\u0012\b\b\u0006\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0010\u0012\n\u0012\b\u0012\u0004\u0012\u00020\u000f0<\u0012\u0006\u0012\u0004\u0018\u00010=0KH\u0007ø\u0001\u0000¢\u0006\u0002\u0010L\u001ad\u0010M\u001a\u0002HN\"\u0004\b\u0000\u0010\u0010\"\u0010\b\u0001\u0010N*\n\u0012\u0006\b\u0000\u0012\u0002H\u00100O*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010\"\u001a\u0002HN2'\u0010\u0011\u001a#\u0012\u0013\u0012\u001105¢\u0006\f\b\u0005\u0012\b\b\u0006\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u00020\u000f0;H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010P\u001ab\u0010M\u001a\u0002HN\"\u0004\b\u0000\u0010\u0010\"\u000e\b\u0001\u0010N*\b\u0012\u0004\u0012\u0002H\u00100Q*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010\"\u001a\u0002HN2'\u0010\u0011\u001a#\u0012\u0013\u0012\u001105¢\u0006\f\b\u0005\u0012\b\b\u0006\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u00020\u000f0;H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010R\u001aT\u0010S\u001a\b\u0012\u0004\u0012\u0002H\u00100\f\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\b\b\u0002\u00108\u001a\u0002092\"\u0010\u0011\u001a\u001e\b\u0001\u0012\u0004\u0012\u0002H\u0010\u0012\n\u0012\b\u0012\u0004\u0012\u00020\u000f0<\u0012\u0006\u0012\u0004\u0018\u00010=0;H\u0007ø\u0001\u0000¢\u0006\u0002\u0010>\u001a$\u0010T\u001a\b\u0012\u0004\u0012\u0002H\u00100\f\"\b\b\u0000\u0010\u0010*\u00020=*\n\u0012\u0006\u0012\u0004\u0018\u0001H\u00100\fH\u0007\u001aA\u0010U\u001a\u0002HN\"\b\b\u0000\u0010\u0010*\u00020=\"\u0010\b\u0001\u0010N*\n\u0012\u0006\b\u0000\u0012\u0002H\u00100O*\n\u0012\u0006\u0012\u0004\u0018\u0001H\u00100\f2\u0006\u0010\"\u001a\u0002HNH\u0087@ø\u0001\u0000¢\u0006\u0002\u0010V\u001a?\u0010U\u001a\u0002HN\"\b\b\u0000\u0010\u0010*\u00020=\"\u000e\b\u0001\u0010N*\b\u0012\u0004\u0012\u0002H\u00100Q*\n\u0012\u0006\u0012\u0004\u0018\u0001H\u00100\f2\u0006\u0010\"\u001a\u0002HNH\u0087@ø\u0001\u0000¢\u0006\u0002\u0010W\u001aO\u0010X\u001a\u0002HN\"\u0004\b\u0000\u0010\u0010\"\u0010\b\u0001\u0010N*\n\u0012\u0006\b\u0000\u0012\u0002H\u00100O*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010\"\u001a\u0002HN2\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u00020\u000f0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010Y\u001aM\u0010X\u001a\u0002HN\"\u0004\b\u0000\u0010\u0010\"\u000e\b\u0001\u0010N*\b\u0012\u0004\u0012\u0002H\u00100Q*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010\"\u001a\u0002HN2\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u00020\u000f0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010Z\u001aO\u0010[\u001a\u0002HN\"\u0004\b\u0000\u0010\u0010\"\u0010\b\u0001\u0010N*\n\u0012\u0006\b\u0000\u0012\u0002H\u00100O*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010\"\u001a\u0002HN2\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u00020\u000f0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010Y\u001aM\u0010[\u001a\u0002HN\"\u0004\b\u0000\u0010\u0010\"\u000e\b\u0001\u0010N*\b\u0012\u0004\u0012\u0002H\u00100Q*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010\"\u001a\u0002HN2\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u00020\u000f0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010Z\u001a7\u0010\\\u001a\u0004\u0018\u0001H\u0010\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u00020\u000f0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010\u0012\u001a7\u0010]\u001a\u0004\u0018\u0001H\u0010\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u00020\u000f0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010\u0012\u001a!\u0010^\u001a\u0002H\u0010\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\fH\u0087@ø\u0001\u0000¢\u0006\u0002\u0010\u0014\u001a5\u0010^\u001a\u0002H\u0010\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u00020\u000f0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010\u0012\u001a#\u0010_\u001a\u0004\u0018\u0001H\u0010\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\fH\u0087@ø\u0001\u0000¢\u0006\u0002\u0010\u0014\u001a7\u0010_\u001a\u0004\u0018\u0001H\u0010\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u00020\u000f0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010\u0012\u001a`\u0010`\u001a\b\u0012\u0004\u0012\u0002H(0\f\"\u0004\b\u0000\u0010\u0010\"\u0004\b\u0001\u0010(*\b\u0012\u0004\u0012\u0002H\u00100\f2\b\b\u0002\u00108\u001a\u0002092(\u0010\u0019\u001a$\b\u0001\u0012\u0004\u0012\u0002H\u0010\u0012\u0010\u0012\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u0002H(0\f0<\u0012\u0006\u0012\u0004\u0018\u00010=0;H\u0007ø\u0001\u0000¢\u0006\u0002\u0010>\u001aX\u0010a\u001a\u0002H(\"\u0004\b\u0000\u0010\u0010\"\u0004\b\u0001\u0010(*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010b\u001a\u0002H(2'\u0010c\u001a#\u0012\u0013\u0012\u0011H(¢\u0006\f\b\u0005\u0012\b\b\u0006\u0012\u0004\b\b(d\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u0002H(0;H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010e\u001am\u0010f\u001a\u0002H(\"\u0004\b\u0000\u0010\u0010\"\u0004\b\u0001\u0010(*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010b\u001a\u0002H(2<\u0010c\u001a8\u0012\u0013\u0012\u001105¢\u0006\f\b\u0005\u0012\b\b\u0006\u0012\u0004\b\b(C\u0012\u0013\u0012\u0011H(¢\u0006\f\b\u0005\u0012\b\b\u0006\u0012\u0004\b\b(d\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u0002H(0KH\u0087Hø\u0001\u0000¢\u0006\u0002\u0010g\u001aM\u0010h\u001a\u0014\u0012\u0004\u0012\u0002H\u0017\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00100i0\u0016\"\u0004\b\u0000\u0010\u0010\"\u0004\b\u0001\u0010\u0017*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0012\u0010\u001c\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u0002H\u00170\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010\u0012\u001ag\u0010h\u001a\u0014\u0012\u0004\u0012\u0002H\u0017\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00180i0\u0016\"\u0004\b\u0000\u0010\u0010\"\u0004\b\u0001\u0010\u0017\"\u0004\b\u0002\u0010\u0018*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0012\u0010\u001c\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u0002H\u00170\u00032\u0012\u0010\u001d\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u0002H\u00180\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010\u001e\u001aa\u0010j\u001a\u0002H \"\u0004\b\u0000\u0010\u0010\"\u0004\b\u0001\u0010\u0017\"\u001c\b\u0002\u0010 *\u0016\u0012\u0006\b\u0000\u0012\u0002H\u0017\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00100k0!*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010\"\u001a\u0002H 2\u0012\u0010\u001c\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u0002H\u00170\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010#\u001a{\u0010j\u001a\u0002H \"\u0004\b\u0000\u0010\u0010\"\u0004\b\u0001\u0010\u0017\"\u0004\b\u0002\u0010\u0018\"\u001c\b\u0003\u0010 *\u0016\u0012\u0006\b\u0000\u0012\u0002H\u0017\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00180k0!*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010\"\u001a\u0002H 2\u0012\u0010\u001c\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u0002H\u00170\u00032\u0012\u0010\u001d\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u0002H\u00180\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010$\u001a)\u0010l\u001a\u000205\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010m\u001a\u0002H\u0010H\u0087@ø\u0001\u0000¢\u0006\u0002\u0010n\u001a5\u0010o\u001a\u000205\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u00020\u000f0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010\u0012\u001a5\u0010p\u001a\u000205\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u00020\u000f0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010\u0012\u001a!\u0010q\u001a\u0002H\u0010\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\fH\u0087@ø\u0001\u0000¢\u0006\u0002\u0010\u0014\u001a5\u0010q\u001a\u0002H\u0010\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u00020\u000f0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010\u0012\u001a)\u0010r\u001a\u000205\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010m\u001a\u0002H\u0010H\u0087@ø\u0001\u0000¢\u0006\u0002\u0010n\u001a#\u0010s\u001a\u0004\u0018\u0001H\u0010\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\fH\u0087@ø\u0001\u0000¢\u0006\u0002\u0010\u0014\u001a7\u0010s\u001a\u0004\u0018\u0001H\u0010\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u00020\u000f0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010\u0012\u001aZ\u0010t\u001a\b\u0012\u0004\u0012\u0002H(0\f\"\u0004\b\u0000\u0010\u0010\"\u0004\b\u0001\u0010(*\b\u0012\u0004\u0012\u0002H\u00100\f2\b\b\u0002\u00108\u001a\u0002092\"\u0010\u0019\u001a\u001e\b\u0001\u0012\u0004\u0012\u0002H\u0010\u0012\n\u0012\b\u0012\u0004\u0012\u0002H(0<\u0012\u0006\u0012\u0004\u0018\u00010=0;H\u0007ø\u0001\u0000¢\u0006\u0002\u0010>\u001ao\u0010u\u001a\b\u0012\u0004\u0012\u0002H(0\f\"\u0004\b\u0000\u0010\u0010\"\u0004\b\u0001\u0010(*\b\u0012\u0004\u0012\u0002H\u00100\f2\b\b\u0002\u00108\u001a\u00020927\u0010\u0019\u001a3\b\u0001\u0012\u0013\u0012\u001105¢\u0006\f\b\u0005\u0012\b\b\u0006\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0010\u0012\n\u0012\b\u0012\u0004\u0012\u0002H(0<\u0012\u0006\u0012\u0004\u0018\u00010=0KH\u0007ø\u0001\u0000¢\u0006\u0002\u0010L\u001au\u0010v\u001a\b\u0012\u0004\u0012\u0002H(0\f\"\u0004\b\u0000\u0010\u0010\"\b\b\u0001\u0010(*\u00020=*\b\u0012\u0004\u0012\u0002H\u00100\f2\b\b\u0002\u00108\u001a\u00020929\u0010\u0019\u001a5\b\u0001\u0012\u0013\u0012\u001105¢\u0006\f\b\u0005\u0012\b\b\u0006\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0010\u0012\f\u0012\n\u0012\u0006\u0012\u0004\u0018\u0001H(0<\u0012\u0006\u0012\u0004\u0018\u00010=0KH\u0007ø\u0001\u0000¢\u0006\u0002\u0010L\u001ap\u0010w\u001a\u0002HN\"\u0004\b\u0000\u0010\u0010\"\b\b\u0001\u0010(*\u00020=\"\u0010\b\u0002\u0010N*\n\u0012\u0006\b\u0000\u0012\u0002H(0O*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010\"\u001a\u0002HN2)\u0010\u0019\u001a%\u0012\u0013\u0012\u001105¢\u0006\f\b\u0005\u0012\b\b\u0006\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0010\u0012\u0006\u0012\u0004\u0018\u0001H(0;H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010P\u001an\u0010w\u001a\u0002HN\"\u0004\b\u0000\u0010\u0010\"\b\b\u0001\u0010(*\u00020=\"\u000e\b\u0002\u0010N*\b\u0012\u0004\u0012\u0002H(0Q*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010\"\u001a\u0002HN2)\u0010\u0019\u001a%\u0012\u0013\u0012\u001105¢\u0006\f\b\u0005\u0012\b\b\u0006\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0010\u0012\u0006\u0012\u0004\u0018\u0001H(0;H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010R\u001aj\u0010x\u001a\u0002HN\"\u0004\b\u0000\u0010\u0010\"\u0004\b\u0001\u0010(\"\u0010\b\u0002\u0010N*\n\u0012\u0006\b\u0000\u0012\u0002H(0O*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010\"\u001a\u0002HN2'\u0010\u0019\u001a#\u0012\u0013\u0012\u001105¢\u0006\f\b\u0005\u0012\b\b\u0006\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u0002H(0;H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010P\u001ah\u0010x\u001a\u0002HN\"\u0004\b\u0000\u0010\u0010\"\u0004\b\u0001\u0010(\"\u000e\b\u0002\u0010N*\b\u0012\u0004\u0012\u0002H(0Q*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010\"\u001a\u0002HN2'\u0010\u0019\u001a#\u0012\u0013\u0012\u001105¢\u0006\f\b\u0005\u0012\b\b\u0006\u0012\u0004\b\b(C\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u0002H(0;H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010R\u001a`\u0010y\u001a\b\u0012\u0004\u0012\u0002H(0\f\"\u0004\b\u0000\u0010\u0010\"\b\b\u0001\u0010(*\u00020=*\b\u0012\u0004\u0012\u0002H\u00100\f2\b\b\u0002\u00108\u001a\u0002092$\u0010\u0019\u001a \b\u0001\u0012\u0004\u0012\u0002H\u0010\u0012\f\u0012\n\u0012\u0006\u0012\u0004\u0018\u0001H(0<\u0012\u0006\u0012\u0004\u0018\u00010=0;H\u0007ø\u0001\u0000¢\u0006\u0002\u0010>\u001a[\u0010z\u001a\u0002HN\"\u0004\b\u0000\u0010\u0010\"\b\b\u0001\u0010(*\u00020=\"\u0010\b\u0002\u0010N*\n\u0012\u0006\b\u0000\u0012\u0002H(0O*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010\"\u001a\u0002HN2\u0014\u0010\u0019\u001a\u0010\u0012\u0004\u0012\u0002H\u0010\u0012\u0006\u0012\u0004\u0018\u0001H(0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010Y\u001aY\u0010z\u001a\u0002HN\"\u0004\b\u0000\u0010\u0010\"\b\b\u0001\u0010(*\u00020=\"\u000e\b\u0002\u0010N*\b\u0012\u0004\u0012\u0002H(0Q*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010\"\u001a\u0002HN2\u0014\u0010\u0019\u001a\u0010\u0012\u0004\u0012\u0002H\u0010\u0012\u0006\u0012\u0004\u0018\u0001H(0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010Z\u001aU\u0010{\u001a\u0002HN\"\u0004\b\u0000\u0010\u0010\"\u0004\b\u0001\u0010(\"\u0010\b\u0002\u0010N*\n\u0012\u0006\b\u0000\u0012\u0002H(0O*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010\"\u001a\u0002HN2\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u0002H(0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010Y\u001aS\u0010{\u001a\u0002HN\"\u0004\b\u0000\u0010\u0010\"\u0004\b\u0001\u0010(\"\u000e\b\u0002\u0010N*\b\u0012\u0004\u0012\u0002H(0Q*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010\"\u001a\u0002HN2\u0012\u0010\u0019\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u0002H(0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010Z\u001aG\u0010|\u001a\u0004\u0018\u0001H\u0010\"\u0004\b\u0000\u0010\u0010\"\u000e\b\u0001\u0010(*\b\u0012\u0004\u0012\u0002H(0}*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0012\u0010:\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u0002H(0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010\u0012\u001aB\u0010~\u001a\u0004\u0018\u0001H\u0010\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\u001c\u0010\u007f\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H\u00100\u0080\u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H\u0010`\u0081\u0001H\u0087@ø\u0001\u0000¢\u0006\u0003\u0010\u0082\u0001\u001aH\u0010\u0083\u0001\u001a\u0004\u0018\u0001H\u0010\"\u0004\b\u0000\u0010\u0010\"\u000e\b\u0001\u0010(*\b\u0012\u0004\u0012\u0002H(0}*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0012\u0010:\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u0002H(0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010\u0012\u001aC\u0010\u0084\u0001\u001a\u0004\u0018\u0001H\u0010\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\u001c\u0010\u007f\u001a\u0018\u0012\u0006\b\u0000\u0012\u0002H\u00100\u0080\u0001j\u000b\u0012\u0006\b\u0000\u0012\u0002H\u0010`\u0081\u0001H\u0087@ø\u0001\u0000¢\u0006\u0003\u0010\u0082\u0001\u001a\"\u0010\u0085\u0001\u001a\u00020\u000f\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\fH\u0087@ø\u0001\u0000¢\u0006\u0002\u0010\u0014\u001a6\u0010\u0085\u0001\u001a\u00020\u000f\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u00020\u000f0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010\u0012\u001a&\u0010\u0086\u0001\u001a\u000b\u0012\u0006\u0012\u0004\u0018\u0001H\u00100\u0087\u0001\"\b\b\u0000\u0010\u0010*\u00020=*\b\u0012\u0004\u0012\u0002H\u00100\fH\u0007\u001aN\u0010\u0088\u0001\u001a\u001a\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00100i\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u00100i0\u001a\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u00020\u000f0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010\u0012\u001a(\u0010\u0089\u0001\u001a\u0004\u0018\u0001H\u0010\"\b\b\u0000\u0010\u0010*\u00020=*\b\u0012\u0004\u0012\u0002H\u00100\fH\u0087@ø\u0001\u0000¢\u0006\u0002\u0010\u0014\u001a[\u0010\u008a\u0001\u001a\u0003H\u008b\u0001\"\u0005\b\u0000\u0010\u008b\u0001\"\t\b\u0001\u0010\u0010*\u0003H\u008b\u0001*\b\u0012\u0004\u0012\u0002H\u00100\f2)\u0010c\u001a%\u0012\u0014\u0012\u0012H\u008b\u0001¢\u0006\f\b\u0005\u0012\b\b\u0006\u0012\u0004\b\b(d\u0012\u0004\u0012\u0002H\u0010\u0012\u0005\u0012\u0003H\u008b\u00010;H\u0087Hø\u0001\u0000¢\u0006\u0003\u0010\u008c\u0001\u001ap\u0010\u008d\u0001\u001a\u0003H\u008b\u0001\"\u0005\b\u0000\u0010\u008b\u0001\"\t\b\u0001\u0010\u0010*\u0003H\u008b\u0001*\b\u0012\u0004\u0012\u0002H\u00100\f2>\u0010c\u001a:\u0012\u0013\u0012\u001105¢\u0006\f\b\u0005\u0012\b\b\u0006\u0012\u0004\b\b(C\u0012\u0014\u0012\u0012H\u008b\u0001¢\u0006\f\b\u0005\u0012\b\b\u0006\u0012\u0004\b\b(d\u0012\u0004\u0012\u0002H\u0010\u0012\u0005\u0012\u0003H\u008b\u00010KH\u0087Hø\u0001\u0000¢\u0006\u0003\u0010\u008e\u0001\u001a%\u0010\u008f\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00100\f\"\b\b\u0000\u0010\u0010*\u00020=*\n\u0012\u0006\u0012\u0004\u0018\u0001H\u00100\fH\u0007\u001a\"\u0010\u0090\u0001\u001a\u0002H\u0010\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\fH\u0087@ø\u0001\u0000¢\u0006\u0002\u0010\u0014\u001a6\u0010\u0090\u0001\u001a\u0002H\u0010\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u00020\u000f0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010\u0012\u001a$\u0010\u0091\u0001\u001a\u0004\u0018\u0001H\u0010\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\fH\u0087@ø\u0001\u0000¢\u0006\u0002\u0010\u0014\u001a8\u0010\u0091\u0001\u001a\u0004\u0018\u0001H\u0010\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0012\u0010\u0011\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u00020\u000f0\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010\u0012\u001a6\u0010\u0092\u0001\u001a\u000205\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0012\u0010:\u001a\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u0002050\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010\u0012\u001a8\u0010\u0093\u0001\u001a\u00030\u0094\u0001\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0013\u0010:\u001a\u000f\u0012\u0004\u0012\u0002H\u0010\u0012\u0005\u0012\u00030\u0094\u00010\u0003H\u0087Hø\u0001\u0000¢\u0006\u0002\u0010\u0012\u001a1\u0010\u0095\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00100\f\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010@\u001a\u0002052\b\b\u0002\u00108\u001a\u000209H\u0007\u001aU\u0010\u0096\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00100\f\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\b\b\u0002\u00108\u001a\u0002092\"\u0010\u0011\u001a\u001e\b\u0001\u0012\u0004\u0012\u0002H\u0010\u0012\n\u0012\b\u0012\u0004\u0012\u00020\u000f0<\u0012\u0006\u0012\u0004\u0018\u00010=0;H\u0007ø\u0001\u0000¢\u0006\u0002\u0010>\u001a:\u0010\u0097\u0001\u001a\u0002HN\"\u0004\b\u0000\u0010\u0010\"\u000e\b\u0001\u0010N*\b\u0012\u0004\u0012\u0002H\u00100Q*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010\"\u001a\u0002HNH\u0087@ø\u0001\u0000¢\u0006\u0002\u0010W\u001a<\u0010\u0098\u0001\u001a\u0002HN\"\u0004\b\u0000\u0010\u0010\"\u0010\b\u0001\u0010N*\n\u0012\u0006\b\u0000\u0012\u0002H\u00100O*\b\u0012\u0004\u0012\u0002H\u00100\f2\u0006\u0010\"\u001a\u0002HNH\u0087@ø\u0001\u0000¢\u0006\u0002\u0010V\u001a(\u0010\u0099\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00100i\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\fH\u0086@ø\u0001\u0000¢\u0006\u0002\u0010\u0014\u001a@\u0010\u009a\u0001\u001a\u000e\u0012\u0004\u0012\u0002H\u0017\u0012\u0004\u0012\u0002H\u00180\u0016\"\u0004\b\u0000\u0010\u0017\"\u0004\b\u0001\u0010\u0018*\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\u0017\u0012\u0004\u0012\u0002H\u00180\u001a0\fH\u0087@ø\u0001\u0000¢\u0006\u0002\u0010\u0014\u001aW\u0010\u009a\u0001\u001a\u0002H \"\u0004\b\u0000\u0010\u0017\"\u0004\b\u0001\u0010\u0018\"\u0018\b\u0002\u0010 *\u0012\u0012\u0006\b\u0000\u0012\u0002H\u0017\u0012\u0006\b\u0000\u0012\u0002H\u00180!*\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\u0017\u0012\u0004\u0012\u0002H\u00180\u001a0\f2\u0006\u0010\"\u001a\u0002H H\u0087@ø\u0001\u0000¢\u0006\u0003\u0010\u009b\u0001\u001a(\u0010\u009c\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00100k\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\fH\u0087@ø\u0001\u0000¢\u0006\u0002\u0010\u0014\u001a)\u0010\u009d\u0001\u001a\t\u0012\u0004\u0012\u0002H\u00100\u009e\u0001\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\fH\u0087@ø\u0001\u0000¢\u0006\u0002\u0010\u0014\u001a)\u0010\u009f\u0001\u001a\t\u0012\u0004\u0012\u0002H\u00100 \u0001\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\fH\u0087@ø\u0001\u0000¢\u0006\u0002\u0010\u0014\u001a/\u0010¡\u0001\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u0002H\u0010020\f\"\u0004\b\u0000\u0010\u0010*\b\u0012\u0004\u0012\u0002H\u00100\f2\b\b\u0002\u00108\u001a\u000209H\u0007\u001aA\u0010¢\u0001\u001a\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u0002H\u0010\u0012\u0004\u0012\u0002H(0\u001a0\f\"\u0004\b\u0000\u0010\u0010\"\u0004\b\u0001\u0010(*\b\u0012\u0004\u0012\u0002H\u00100\f2\r\u0010£\u0001\u001a\b\u0012\u0004\u0012\u0002H(0\fH\u0087\u0004\u001a~\u0010¢\u0001\u001a\b\u0012\u0004\u0012\u0002H\u00180\f\"\u0004\b\u0000\u0010\u0010\"\u0004\b\u0001\u0010(\"\u0004\b\u0002\u0010\u0018*\b\u0012\u0004\u0012\u0002H\u00100\f2\r\u0010£\u0001\u001a\b\u0012\u0004\u0012\u0002H(0\f2\b\b\u0002\u00108\u001a\u00020928\u0010\u0019\u001a4\u0012\u0014\u0012\u0012H\u0010¢\u0006\r\b\u0005\u0012\t\b\u0006\u0012\u0005\b\b(¤\u0001\u0012\u0014\u0012\u0012H(¢\u0006\r\b\u0005\u0012\t\b\u0006\u0012\u0005\b\b(¥\u0001\u0012\u0004\u0012\u0002H\u00180;H\u0007\"\u000e\u0010\u0000\u001a\u00020\u0001X\u0080T¢\u0006\u0002\n\u0000\u0082\u0002\u0004\n\u0002\b\u0019¨\u0006¦\u0001"},
   d2 = {"DEFAULT_CLOSE_MESSAGE", "", "consumesAll", "Lkotlin/Function1;", "", "Lkotlin/ParameterName;", "name", "cause", "", "Lkotlinx/coroutines/CompletionHandler;", "channels", "", "Lkotlinx/coroutines/channels/ReceiveChannel;", "([Lkotlinx/coroutines/channels/ReceiveChannel;)Lkotlin/jvm/functions/Function1;", "all", "", "E", "predicate", "(Lkotlinx/coroutines/channels/ReceiveChannel;Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;", "any", "(Lkotlinx/coroutines/channels/ReceiveChannel;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;", "associate", "", "K", "V", "transform", "Lkotlin/Pair;", "associateBy", "keySelector", "valueTransform", "(Lkotlinx/coroutines/channels/ReceiveChannel;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;", "associateByTo", "M", "", "destination", "(Lkotlinx/coroutines/channels/ReceiveChannel;Ljava/util/Map;Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;", "(Lkotlinx/coroutines/channels/ReceiveChannel;Ljava/util/Map;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;", "associateTo", "cancelConsumed", "consume", "R", "Lkotlinx/coroutines/channels/BroadcastChannel;", "block", "Lkotlin/ExtensionFunctionType;", "(Lkotlinx/coroutines/channels/BroadcastChannel;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "(Lkotlinx/coroutines/channels/ReceiveChannel;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "consumeEach", "action", "(Lkotlinx/coroutines/channels/BroadcastChannel;Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;", "consumeEachIndexed", "Lkotlin/collections/IndexedValue;", "consumes", "count", "", "distinct", "distinctBy", "context", "Lkotlin/coroutines/CoroutineContext;", "selector", "Lkotlin/Function2;", "Lkotlin/coroutines/Continuation;", "", "(Lkotlinx/coroutines/channels/ReceiveChannel;Lkotlin/coroutines/CoroutineContext;Lkotlin/jvm/functions/Function2;)Lkotlinx/coroutines/channels/ReceiveChannel;", "drop", "n", "dropWhile", "elementAt", "index", "(Lkotlinx/coroutines/channels/ReceiveChannel;ILkotlin/coroutines/Continuation;)Ljava/lang/Object;", "elementAtOrElse", "defaultValue", "(Lkotlinx/coroutines/channels/ReceiveChannel;ILkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;", "elementAtOrNull", "filter", "filterIndexed", "Lkotlin/Function3;", "(Lkotlinx/coroutines/channels/ReceiveChannel;Lkotlin/coroutines/CoroutineContext;Lkotlin/jvm/functions/Function3;)Lkotlinx/coroutines/channels/ReceiveChannel;", "filterIndexedTo", "C", "", "(Lkotlinx/coroutines/channels/ReceiveChannel;Ljava/util/Collection;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;", "Lkotlinx/coroutines/channels/SendChannel;", "(Lkotlinx/coroutines/channels/ReceiveChannel;Lkotlinx/coroutines/channels/SendChannel;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;", "filterNot", "filterNotNull", "filterNotNullTo", "(Lkotlinx/coroutines/channels/ReceiveChannel;Ljava/util/Collection;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;", "(Lkotlinx/coroutines/channels/ReceiveChannel;Lkotlinx/coroutines/channels/SendChannel;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;", "filterNotTo", "(Lkotlinx/coroutines/channels/ReceiveChannel;Ljava/util/Collection;Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;", "(Lkotlinx/coroutines/channels/ReceiveChannel;Lkotlinx/coroutines/channels/SendChannel;Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;", "filterTo", "find", "findLast", "first", "firstOrNull", "flatMap", "fold", "initial", "operation", "acc", "(Lkotlinx/coroutines/channels/ReceiveChannel;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;", "foldIndexed", "(Lkotlinx/coroutines/channels/ReceiveChannel;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;", "groupBy", "", "groupByTo", "", "indexOf", "element", "(Lkotlinx/coroutines/channels/ReceiveChannel;Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;", "indexOfFirst", "indexOfLast", "last", "lastIndexOf", "lastOrNull", "map", "mapIndexed", "mapIndexedNotNull", "mapIndexedNotNullTo", "mapIndexedTo", "mapNotNull", "mapNotNullTo", "mapTo", "maxBy", "", "maxWith", "comparator", "Ljava/util/Comparator;", "Lkotlin/Comparator;", "(Lkotlinx/coroutines/channels/ReceiveChannel;Ljava/util/Comparator;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;", "minBy", "minWith", "none", "onReceiveOrNull", "Lkotlinx/coroutines/selects/SelectClause1;", "partition", "receiveOrNull", "reduce", "S", "(Lkotlinx/coroutines/channels/ReceiveChannel;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;", "reduceIndexed", "(Lkotlinx/coroutines/channels/ReceiveChannel;Lkotlin/jvm/functions/Function3;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;", "requireNoNulls", "single", "singleOrNull", "sumBy", "sumByDouble", "", "take", "takeWhile", "toChannel", "toCollection", "toList", "toMap", "(Lkotlinx/coroutines/channels/ReceiveChannel;Ljava/util/Map;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;", "toMutableList", "toMutableSet", "", "toSet", "", "withIndex", "zip", "other", "a", "b", "kotlinx-coroutines-core"},
   k = 5,
   mv = {1, 4, 0},
   xs = "kotlinx/coroutines/channels/ChannelsKt"
)
final class ChannelsKt__Channels_commonKt {
   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object all(ReceiveChannel var0, Function1 var1, Continuation var2) {
      Object var355;
      label3307: {
         if (var2 instanceof <undefinedtype>) {
            <undefinedtype> var4 = (<undefinedtype>)var2;
            if ((var4.label & Integer.MIN_VALUE) != 0) {
               var4.label += Integer.MIN_VALUE;
               var355 = var4;
               break label3307;
            }
         }

         var355 = new ContinuationImpl(var2) {
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            int label;
            Object result;

            public final Object invokeSuspend(Object var1) {
               this.result = var1;
               this.label |= Integer.MIN_VALUE;
               return ChannelsKt.all((ReceiveChannel)null, (Function1)null, this);
            }
         };
      }

      Throwable var352;
      ReceiveChannel var354;
      label3302: {
         Throwable var10000;
         label3301: {
            Object var11 = ((<undefinedtype>)var355).result;
            Object var358 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
            int var3 = ((<undefinedtype>)var355).label;
            ReceiveChannel var5;
            ReceiveChannel var6;
            Function1 var7;
            Object var8;
            ReceiveChannel var9;
            ChannelIterator var10;
            boolean var10001;
            Throwable var356;
            Object var357;
            Unit var359;
            Boolean var360;
            Throwable var362;
            if (var3 != 0) {
               if (var3 != 1) {
                  throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
               }

               var10 = (ChannelIterator)((<undefinedtype>)var355).L$6;
               var6 = (ReceiveChannel)((<undefinedtype>)var355).L$5;
               Throwable var353 = (Throwable)((<undefinedtype>)var355).L$4;
               var0 = (ReceiveChannel)((<undefinedtype>)var355).L$3;
               var5 = (ReceiveChannel)((<undefinedtype>)var355).L$2;
               var7 = (Function1)((<undefinedtype>)var355).L$1;
               var9 = (ReceiveChannel)((<undefinedtype>)var355).L$0;

               try {
                  ResultKt.throwOnFailure(var11);
               } catch (Throwable var335) {
                  var354 = var0;
                  var352 = var335;
                  break label3302;
               }

               var8 = var355;
               var356 = var353;
               var354 = var0;

               label3311: {
                  try {
                     if ((Boolean)var11) {
                        break label3311;
                     }
                  } catch (Throwable var348) {
                     var10000 = var348;
                     var10001 = false;
                     break label3301;
                  }

                  var354 = var0;

                  try {
                     var359 = Unit.INSTANCE;
                  } catch (Throwable var349) {
                     var10000 = var349;
                     var10001 = false;
                     break label3301;
                  }

                  InlineMarker.finallyStart(1);
                  ChannelsKt.cancelConsumed(var0, var356);
                  InlineMarker.finallyEnd(1);
                  return Boxing.boxBoolean(true);
               }

               var354 = var0;

               label3312: {
                  try {
                     if ((Boolean)var7.invoke(var10.next())) {
                        break label3312;
                     }
                  } catch (Throwable var350) {
                     var10000 = var350;
                     var10001 = false;
                     break label3301;
                  }

                  var354 = var0;

                  try {
                     var360 = Boxing.boxBoolean(false);
                  } catch (Throwable var351) {
                     var10000 = var351;
                     var10001 = false;
                     break label3301;
                  }

                  InlineMarker.finallyStart(2);
                  ChannelsKt.cancelConsumed(var0, var356);
                  InlineMarker.finallyEnd(2);
                  return var360;
               }

               var357 = var358;
               var362 = var356;
               var355 = var357;
            } else {
               ResultKt.throwOnFailure(var11);
               Throwable var361 = (Throwable)null;

               try {
                  var10 = var0.iterator();
               } catch (Throwable var336) {
                  var354 = var0;
                  var352 = var336;
                  break label3302;
               }

               var7 = null;
               var8 = var355;
               var355 = var358;
               var5 = var0;
               var0 = var0;
               var6 = var0;
               var9 = var0;
               var362 = var7;
               var7 = var1;
            }

            while(true) {
               var354 = var0;

               try {
                  ((<undefinedtype>)var8).L$0 = var9;
               } catch (Throwable var345) {
                  var10000 = var345;
                  var10001 = false;
                  break;
               }

               var354 = var0;

               try {
                  ((<undefinedtype>)var8).L$1 = var7;
               } catch (Throwable var344) {
                  var10000 = var344;
                  var10001 = false;
                  break;
               }

               var354 = var0;

               try {
                  ((<undefinedtype>)var8).L$2 = var5;
               } catch (Throwable var343) {
                  var10000 = var343;
                  var10001 = false;
                  break;
               }

               var354 = var0;

               try {
                  ((<undefinedtype>)var8).L$3 = var0;
               } catch (Throwable var342) {
                  var10000 = var342;
                  var10001 = false;
                  break;
               }

               var354 = var0;

               try {
                  ((<undefinedtype>)var8).L$4 = var362;
               } catch (Throwable var341) {
                  var10000 = var341;
                  var10001 = false;
                  break;
               }

               var354 = var0;

               try {
                  ((<undefinedtype>)var8).L$5 = var6;
               } catch (Throwable var340) {
                  var10000 = var340;
                  var10001 = false;
                  break;
               }

               var354 = var0;

               try {
                  ((<undefinedtype>)var8).L$6 = var10;
               } catch (Throwable var339) {
                  var10000 = var339;
                  var10001 = false;
                  break;
               }

               var354 = var0;

               try {
                  ((<undefinedtype>)var8).label = 1;
               } catch (Throwable var338) {
                  var10000 = var338;
                  var10001 = false;
                  break;
               }

               var354 = var0;

               try {
                  var11 = var10.hasNext((Continuation)var8);
               } catch (Throwable var337) {
                  var10000 = var337;
                  var10001 = false;
                  break;
               }

               if (var11 == var355) {
                  return var355;
               }

               var357 = var355;
               var356 = var362;
               var358 = var357;
               var354 = var0;

               label3315: {
                  try {
                     if ((Boolean)var11) {
                        break label3315;
                     }
                  } catch (Throwable var347) {
                     var10000 = var347;
                     var10001 = false;
                     break;
                  }

                  var354 = var0;

                  try {
                     var359 = Unit.INSTANCE;
                  } catch (Throwable var334) {
                     var10000 = var334;
                     var10001 = false;
                     break;
                  }

                  InlineMarker.finallyStart(1);
                  ChannelsKt.cancelConsumed(var0, var356);
                  InlineMarker.finallyEnd(1);
                  return Boxing.boxBoolean(true);
               }

               var354 = var0;

               label3316: {
                  try {
                     if ((Boolean)var7.invoke(var10.next())) {
                        break label3316;
                     }
                  } catch (Throwable var346) {
                     var10000 = var346;
                     var10001 = false;
                     break;
                  }

                  var354 = var0;

                  try {
                     var360 = Boxing.boxBoolean(false);
                  } catch (Throwable var333) {
                     var10000 = var333;
                     var10001 = false;
                     break;
                  }

                  InlineMarker.finallyStart(2);
                  ChannelsKt.cancelConsumed(var0, var356);
                  InlineMarker.finallyEnd(2);
                  return var360;
               }

               var357 = var358;
               var362 = var356;
               var355 = var357;
            }
         }

         var352 = var10000;
      }

      try {
         throw var352;
      } finally {
         InlineMarker.finallyStart(1);
         ChannelsKt.cancelConsumed(var354, var352);
         InlineMarker.finallyEnd(1);
      }
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   private static final Object all$$forInline(ReceiveChannel var0, Function1 var1, Continuation var2) {
      Throwable var3 = (Throwable)null;

      label91: {
         try {
            ChannelIterator var13 = var0.iterator();

            while(true) {
               InlineMarker.mark(0);
               Object var4 = var13.hasNext(var2);
               InlineMarker.mark(1);
               if (!(Boolean)var4) {
                  Unit var12 = Unit.INSTANCE;
                  break;
               }

               if (!(Boolean)var1.invoke(var13.next())) {
                  break label91;
               }
            }
         } catch (Throwable var10) {
            Throwable var11 = var10;

            try {
               throw var11;
            } finally {
               InlineMarker.finallyStart(1);
               ChannelsKt.cancelConsumed(var0, var10);
               InlineMarker.finallyEnd(1);
            }
         }

         InlineMarker.finallyStart(1);
         ChannelsKt.cancelConsumed(var0, (Throwable)null);
         InlineMarker.finallyEnd(1);
         return true;
      }

      InlineMarker.finallyStart(2);
      ChannelsKt.cancelConsumed(var0, (Throwable)null);
      InlineMarker.finallyEnd(2);
      return false;
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object any(ReceiveChannel param0, Continuation param1) {
      // $FF: Couldn't be decompiled
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object any(ReceiveChannel var0, Function1 var1, Continuation var2) {
      Object var355;
      label3307: {
         if (var2 instanceof <undefinedtype>) {
            <undefinedtype> var4 = (<undefinedtype>)var2;
            if ((var4.label & Integer.MIN_VALUE) != 0) {
               var4.label += Integer.MIN_VALUE;
               var355 = var4;
               break label3307;
            }
         }

         var355 = new ContinuationImpl(var2) {
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            int label;
            Object result;

            public final Object invokeSuspend(Object var1) {
               this.result = var1;
               this.label |= Integer.MIN_VALUE;
               return ChannelsKt.any((ReceiveChannel)null, (Function1)null, this);
            }
         };
      }

      Throwable var352;
      ReceiveChannel var354;
      label3302: {
         Throwable var10000;
         label3301: {
            Object var11 = ((<undefinedtype>)var355).result;
            Object var357 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
            int var3 = ((<undefinedtype>)var355).label;
            ReceiveChannel var5;
            ReceiveChannel var6;
            Object var7;
            Function1 var8;
            ChannelIterator var9;
            ReceiveChannel var10;
            boolean var10001;
            Throwable var353;
            Throwable var356;
            Unit var358;
            Boolean var359;
            Throwable var361;
            if (var3 != 0) {
               if (var3 != 1) {
                  throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
               }

               var9 = (ChannelIterator)((<undefinedtype>)var355).L$6;
               var6 = (ReceiveChannel)((<undefinedtype>)var355).L$5;
               var353 = (Throwable)((<undefinedtype>)var355).L$4;
               var0 = (ReceiveChannel)((<undefinedtype>)var355).L$3;
               var5 = (ReceiveChannel)((<undefinedtype>)var355).L$2;
               var8 = (Function1)((<undefinedtype>)var355).L$1;
               var10 = (ReceiveChannel)((<undefinedtype>)var355).L$0;

               try {
                  ResultKt.throwOnFailure(var11);
               } catch (Throwable var335) {
                  var354 = var0;
                  var352 = var335;
                  break label3302;
               }

               var7 = var355;
               var356 = var353;
               var354 = var0;

               label3311: {
                  try {
                     if ((Boolean)var11) {
                        break label3311;
                     }
                  } catch (Throwable var348) {
                     var10000 = var348;
                     var10001 = false;
                     break label3301;
                  }

                  var354 = var0;

                  try {
                     var358 = Unit.INSTANCE;
                  } catch (Throwable var349) {
                     var10000 = var349;
                     var10001 = false;
                     break label3301;
                  }

                  InlineMarker.finallyStart(1);
                  ChannelsKt.cancelConsumed(var0, var356);
                  InlineMarker.finallyEnd(1);
                  return Boxing.boxBoolean(false);
               }

               var354 = var0;

               label3312: {
                  try {
                     if (!(Boolean)var8.invoke(var9.next())) {
                        break label3312;
                     }
                  } catch (Throwable var350) {
                     var10000 = var350;
                     var10001 = false;
                     break label3301;
                  }

                  var354 = var0;

                  try {
                     var359 = Boxing.boxBoolean(true);
                  } catch (Throwable var351) {
                     var10000 = var351;
                     var10001 = false;
                     break label3301;
                  }

                  InlineMarker.finallyStart(2);
                  ChannelsKt.cancelConsumed(var0, var356);
                  InlineMarker.finallyEnd(2);
                  return var359;
               }

               var353 = var356;
               var355 = var357;
               var361 = var353;
            } else {
               ResultKt.throwOnFailure(var11);
               Throwable var360 = (Throwable)null;

               try {
                  var9 = var0.iterator();
               } catch (Throwable var336) {
                  var354 = var0;
                  var352 = var336;
                  break label3302;
               }

               var8 = null;
               var7 = var355;
               var355 = var357;
               var5 = var0;
               var0 = var0;
               var6 = var0;
               var10 = var0;
               var361 = var8;
               var8 = var1;
            }

            while(true) {
               var354 = var0;

               try {
                  ((<undefinedtype>)var7).L$0 = var10;
               } catch (Throwable var345) {
                  var10000 = var345;
                  var10001 = false;
                  break;
               }

               var354 = var0;

               try {
                  ((<undefinedtype>)var7).L$1 = var8;
               } catch (Throwable var344) {
                  var10000 = var344;
                  var10001 = false;
                  break;
               }

               var354 = var0;

               try {
                  ((<undefinedtype>)var7).L$2 = var5;
               } catch (Throwable var343) {
                  var10000 = var343;
                  var10001 = false;
                  break;
               }

               var354 = var0;

               try {
                  ((<undefinedtype>)var7).L$3 = var0;
               } catch (Throwable var342) {
                  var10000 = var342;
                  var10001 = false;
                  break;
               }

               var354 = var0;

               try {
                  ((<undefinedtype>)var7).L$4 = var361;
               } catch (Throwable var341) {
                  var10000 = var341;
                  var10001 = false;
                  break;
               }

               var354 = var0;

               try {
                  ((<undefinedtype>)var7).L$5 = var6;
               } catch (Throwable var340) {
                  var10000 = var340;
                  var10001 = false;
                  break;
               }

               var354 = var0;

               try {
                  ((<undefinedtype>)var7).L$6 = var9;
               } catch (Throwable var339) {
                  var10000 = var339;
                  var10001 = false;
                  break;
               }

               var354 = var0;

               try {
                  ((<undefinedtype>)var7).label = 1;
               } catch (Throwable var338) {
                  var10000 = var338;
                  var10001 = false;
                  break;
               }

               var354 = var0;

               try {
                  var11 = var9.hasNext((Continuation)var7);
               } catch (Throwable var337) {
                  var10000 = var337;
                  var10001 = false;
                  break;
               }

               if (var11 == var355) {
                  return var355;
               }

               var353 = var361;
               var357 = var355;
               var356 = var353;
               var354 = var0;

               label3315: {
                  try {
                     if ((Boolean)var11) {
                        break label3315;
                     }
                  } catch (Throwable var347) {
                     var10000 = var347;
                     var10001 = false;
                     break;
                  }

                  var354 = var0;

                  try {
                     var358 = Unit.INSTANCE;
                  } catch (Throwable var334) {
                     var10000 = var334;
                     var10001 = false;
                     break;
                  }

                  InlineMarker.finallyStart(1);
                  ChannelsKt.cancelConsumed(var0, var356);
                  InlineMarker.finallyEnd(1);
                  return Boxing.boxBoolean(false);
               }

               var354 = var0;

               label3316: {
                  try {
                     if (!(Boolean)var8.invoke(var9.next())) {
                        break label3316;
                     }
                  } catch (Throwable var346) {
                     var10000 = var346;
                     var10001 = false;
                     break;
                  }

                  var354 = var0;

                  try {
                     var359 = Boxing.boxBoolean(true);
                  } catch (Throwable var333) {
                     var10000 = var333;
                     var10001 = false;
                     break;
                  }

                  InlineMarker.finallyStart(2);
                  ChannelsKt.cancelConsumed(var0, var356);
                  InlineMarker.finallyEnd(2);
                  return var359;
               }

               var353 = var356;
               var355 = var357;
               var361 = var353;
            }
         }

         var352 = var10000;
      }

      try {
         throw var352;
      } finally {
         InlineMarker.finallyStart(1);
         ChannelsKt.cancelConsumed(var354, var352);
         InlineMarker.finallyEnd(1);
      }
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   private static final Object any$$forInline(ReceiveChannel var0, Function1 var1, Continuation var2) {
      Throwable var3 = (Throwable)null;

      label91: {
         try {
            ChannelIterator var13 = var0.iterator();

            while(true) {
               InlineMarker.mark(0);
               Object var4 = var13.hasNext(var2);
               InlineMarker.mark(1);
               if (!(Boolean)var4) {
                  Unit var11 = Unit.INSTANCE;
                  break;
               }

               if ((Boolean)var1.invoke(var13.next())) {
                  break label91;
               }
            }
         } catch (Throwable var10) {
            Throwable var12 = var10;

            try {
               throw var12;
            } finally {
               InlineMarker.finallyStart(1);
               ChannelsKt.cancelConsumed(var0, var10);
               InlineMarker.finallyEnd(1);
            }
         }

         InlineMarker.finallyStart(1);
         ChannelsKt.cancelConsumed(var0, (Throwable)null);
         InlineMarker.finallyEnd(1);
         return false;
      }

      InlineMarker.finallyStart(2);
      ChannelsKt.cancelConsumed(var0, (Throwable)null);
      InlineMarker.finallyEnd(2);
      return true;
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object associate(ReceiveChannel var0, Function1 var1, Continuation var2) {
      Object var417;
      label3466: {
         if (var2 instanceof <undefinedtype>) {
            <undefinedtype> var4 = (<undefinedtype>)var2;
            if ((var4.label & Integer.MIN_VALUE) != 0) {
               var4.label += Integer.MIN_VALUE;
               var417 = var4;
               break label3466;
            }
         }

         var417 = new ContinuationImpl(var2) {
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            Object L$8;
            int label;
            Object result;

            public final Object invokeSuspend(Object var1) {
               this.result = var1;
               this.label |= Integer.MIN_VALUE;
               return ChannelsKt.associate((ReceiveChannel)null, (Function1)null, this);
            }
         };
      }

      Throwable var414;
      ReceiveChannel var416;
      label3461: {
         Throwable var10000;
         label3469: {
            boolean var10001;
            Map var418;
            Throwable var420;
            label3459: {
               Object var14 = ((<undefinedtype>)var417).result;
               Object var8 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
               int var3 = ((<undefinedtype>)var417).label;
               ReceiveChannel var5;
               ChannelIterator var6;
               ReceiveChannel var7;
               Object var9;
               ReceiveChannel var10;
               Function1 var11;
               ReceiveChannel var12;
               Pair var13;
               Map var415;
               Throwable var419;
               Map var421;
               ReceiveChannel var423;
               ChannelIterator var426;
               if (var3 != 0) {
                  if (var3 != 1) {
                     throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                  }

                  var6 = (ChannelIterator)((<undefinedtype>)var417).L$8;
                  var10 = (ReceiveChannel)((<undefinedtype>)var417).L$7;
                  var420 = (Throwable)((<undefinedtype>)var417).L$6;
                  var0 = (ReceiveChannel)((<undefinedtype>)var417).L$5;
                  var7 = (ReceiveChannel)((<undefinedtype>)var417).L$4;
                  var415 = (Map)((<undefinedtype>)var417).L$3;
                  var5 = (ReceiveChannel)((<undefinedtype>)var417).L$2;
                  var11 = (Function1)((<undefinedtype>)var417).L$1;
                  var12 = (ReceiveChannel)((<undefinedtype>)var417).L$0;

                  try {
                     ResultKt.throwOnFailure(var14);
                  } catch (Throwable var396) {
                     var416 = var0;
                     var414 = var396;
                     break label3461;
                  }

                  var9 = var417;
                  var418 = var415;
                  var416 = var0;

                  try {
                     if (!(Boolean)var14) {
                        break label3459;
                     }
                  } catch (Throwable var411) {
                     var10000 = var411;
                     var10001 = false;
                     break label3469;
                  }

                  var416 = var0;

                  try {
                     var13 = (Pair)var11.invoke(var6.next());
                  } catch (Throwable var412) {
                     var10000 = var412;
                     var10001 = false;
                     break label3469;
                  }

                  var416 = var0;

                  try {
                     var418.put(var13.getFirst(), var13.getSecond());
                  } catch (Throwable var413) {
                     var10000 = var413;
                     var10001 = false;
                     break label3469;
                  }

                  var415 = var418;
                  var419 = var420;
                  var421 = var415;
                  var426 = var6;
                  var423 = var5;
               } else {
                  ResultKt.throwOnFailure(var14);
                  var421 = (Map)(new LinkedHashMap());
                  Throwable var422 = (Throwable)null;

                  try {
                     var426 = var0.iterator();
                  } catch (Throwable var395) {
                     var416 = var0;
                     var414 = var395;
                     break label3461;
                  }

                  var9 = var417;
                  var419 = null;
                  var423 = var0;
                  var5 = var0;
                  var0 = var0;
                  var12 = var0;
                  var11 = var1;
                  var10 = var0;
                  var7 = var5;
               }

               while(true) {
                  var416 = var0;

                  try {
                     ((<undefinedtype>)var9).L$0 = var12;
                  } catch (Throwable var407) {
                     var10000 = var407;
                     var10001 = false;
                     break label3469;
                  }

                  var416 = var0;

                  try {
                     ((<undefinedtype>)var9).L$1 = var11;
                  } catch (Throwable var406) {
                     var10000 = var406;
                     var10001 = false;
                     break label3469;
                  }

                  var416 = var0;

                  try {
                     ((<undefinedtype>)var9).L$2 = var423;
                  } catch (Throwable var405) {
                     var10000 = var405;
                     var10001 = false;
                     break label3469;
                  }

                  var416 = var0;

                  try {
                     ((<undefinedtype>)var9).L$3 = var421;
                  } catch (Throwable var404) {
                     var10000 = var404;
                     var10001 = false;
                     break label3469;
                  }

                  var416 = var0;

                  try {
                     ((<undefinedtype>)var9).L$4 = var7;
                  } catch (Throwable var403) {
                     var10000 = var403;
                     var10001 = false;
                     break label3469;
                  }

                  var416 = var0;

                  try {
                     ((<undefinedtype>)var9).L$5 = var0;
                  } catch (Throwable var402) {
                     var10000 = var402;
                     var10001 = false;
                     break label3469;
                  }

                  var416 = var0;

                  try {
                     ((<undefinedtype>)var9).L$6 = var419;
                  } catch (Throwable var401) {
                     var10000 = var401;
                     var10001 = false;
                     break label3469;
                  }

                  var416 = var0;

                  try {
                     ((<undefinedtype>)var9).L$7 = var10;
                  } catch (Throwable var400) {
                     var10000 = var400;
                     var10001 = false;
                     break label3469;
                  }

                  var416 = var0;

                  try {
                     ((<undefinedtype>)var9).L$8 = var426;
                  } catch (Throwable var399) {
                     var10000 = var399;
                     var10001 = false;
                     break label3469;
                  }

                  var416 = var0;

                  try {
                     ((<undefinedtype>)var9).label = 1;
                  } catch (Throwable var398) {
                     var10000 = var398;
                     var10001 = false;
                     break label3469;
                  }

                  var416 = var0;

                  try {
                     var14 = var426.hasNext((Continuation)var9);
                  } catch (Throwable var397) {
                     var10000 = var397;
                     var10001 = false;
                     break label3469;
                  }

                  if (var14 == var8) {
                     return var8;
                  }

                  var5 = var423;
                  Throwable var425 = var419;
                  var6 = var426;
                  var418 = var421;
                  var420 = var425;
                  var416 = var0;

                  try {
                     if (!(Boolean)var14) {
                        break;
                     }
                  } catch (Throwable var410) {
                     var10000 = var410;
                     var10001 = false;
                     break label3469;
                  }

                  var416 = var0;

                  try {
                     var13 = (Pair)var11.invoke(var6.next());
                  } catch (Throwable var409) {
                     var10000 = var409;
                     var10001 = false;
                     break label3469;
                  }

                  var416 = var0;

                  try {
                     var418.put(var13.getFirst(), var13.getSecond());
                  } catch (Throwable var408) {
                     var10000 = var408;
                     var10001 = false;
                     break label3469;
                  }

                  var415 = var418;
                  var419 = var420;
                  var421 = var415;
                  var426 = var6;
                  var423 = var5;
               }
            }

            var416 = var0;

            try {
               Unit var424 = Unit.INSTANCE;
            } catch (Throwable var394) {
               var10000 = var394;
               var10001 = false;
               break label3469;
            }

            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, var420);
            InlineMarker.finallyEnd(1);
            return var418;
         }

         var414 = var10000;
      }

      try {
         throw var414;
      } finally {
         InlineMarker.finallyStart(1);
         ChannelsKt.cancelConsumed(var416, var414);
         InlineMarker.finallyEnd(1);
      }
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   private static final Object associate$$forInline(ReceiveChannel var0, Function1 var1, Continuation var2) {
      Map var3 = (Map)(new LinkedHashMap());
      Throwable var4 = (Throwable)null;

      label194: {
         Throwable var10000;
         label195: {
            boolean var10001;
            ChannelIterator var28;
            try {
               var28 = var0.iterator();
            } catch (Throwable var24) {
               var10000 = var24;
               var10001 = false;
               break label195;
            }

            while(true) {
               try {
                  InlineMarker.mark(0);
                  Object var5 = var28.hasNext(var2);
                  InlineMarker.mark(1);
                  if (!(Boolean)var5) {
                     break;
                  }

                  Pair var29 = (Pair)var1.invoke(var28.next());
                  var3.put(var29.getFirst(), var29.getSecond());
               } catch (Throwable var25) {
                  var10000 = var25;
                  var10001 = false;
                  break label195;
               }
            }

            label178:
            try {
               Unit var26 = Unit.INSTANCE;
               break label194;
            } catch (Throwable var23) {
               var10000 = var23;
               var10001 = false;
               break label178;
            }
         }

         Throwable var27 = var10000;

         try {
            throw var27;
         } finally {
            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, var27);
            InlineMarker.finallyEnd(1);
         }
      }

      InlineMarker.finallyStart(1);
      ChannelsKt.cancelConsumed(var0, (Throwable)null);
      InlineMarker.finallyEnd(1);
      return var3;
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object associateBy(ReceiveChannel var0, Function1 var1, Continuation var2) {
      Object var417;
      label3466: {
         if (var2 instanceof <undefinedtype>) {
            <undefinedtype> var4 = (<undefinedtype>)var2;
            if ((var4.label & Integer.MIN_VALUE) != 0) {
               var4.label += Integer.MIN_VALUE;
               var417 = var4;
               break label3466;
            }
         }

         var417 = new ContinuationImpl(var2) {
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            Object L$8;
            int label;
            Object result;

            public final Object invokeSuspend(Object var1) {
               this.result = var1;
               this.label |= Integer.MIN_VALUE;
               return ChannelsKt.associateBy((ReceiveChannel)null, (Function1)null, this);
            }
         };
      }

      Throwable var414;
      ReceiveChannel var416;
      label3461: {
         Throwable var10000;
         label3469: {
            boolean var10001;
            Map var419;
            Throwable var422;
            label3459: {
               Object var14 = ((<undefinedtype>)var417).result;
               Object var421 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
               int var3 = ((<undefinedtype>)var417).label;
               ReceiveChannel var5;
               ReceiveChannel var6;
               ReceiveChannel var7;
               Object var8;
               ReceiveChannel var9;
               Function1 var10;
               Object var11;
               Map var415;
               Throwable var418;
               Throwable var420;
               Map var423;
               ChannelIterator var427;
               Object var428;
               ReceiveChannel var429;
               if (var3 != 0) {
                  if (var3 != 1) {
                     throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                  }

                  ChannelIterator var13 = (ChannelIterator)((<undefinedtype>)var417).L$8;
                  var9 = (ReceiveChannel)((<undefinedtype>)var417).L$7;
                  Throwable var12 = (Throwable)((<undefinedtype>)var417).L$6;
                  var0 = (ReceiveChannel)((<undefinedtype>)var417).L$5;
                  var7 = (ReceiveChannel)((<undefinedtype>)var417).L$4;
                  var415 = (Map)((<undefinedtype>)var417).L$3;
                  var5 = (ReceiveChannel)((<undefinedtype>)var417).L$2;
                  var10 = (Function1)((<undefinedtype>)var417).L$1;
                  var6 = (ReceiveChannel)((<undefinedtype>)var417).L$0;

                  try {
                     ResultKt.throwOnFailure(var14);
                  } catch (Throwable var395) {
                     var416 = var0;
                     var414 = var395;
                     break label3461;
                  }

                  var11 = var417;
                  var8 = var421;
                  var422 = var12;
                  var419 = var415;
                  var427 = var13;
                  var416 = var0;

                  try {
                     if (!(Boolean)var14) {
                        break label3459;
                     }
                  } catch (Throwable var411) {
                     var10000 = var411;
                     var10001 = false;
                     break label3469;
                  }

                  var416 = var0;

                  try {
                     var428 = var427.next();
                  } catch (Throwable var412) {
                     var10000 = var412;
                     var10001 = false;
                     break label3469;
                  }

                  var416 = var0;

                  try {
                     var419.put(var10.invoke(var428), var428);
                  } catch (Throwable var413) {
                     var10000 = var413;
                     var10001 = false;
                     break label3469;
                  }

                  var418 = var422;
                  var423 = var419;
                  var420 = var418;
                  var429 = var6;
                  var6 = var5;
               } else {
                  ResultKt.throwOnFailure(var14);
                  Map var426 = (Map)(new LinkedHashMap());
                  Throwable var424 = (Throwable)null;

                  try {
                     var427 = var0.iterator();
                  } catch (Throwable var396) {
                     var416 = var0;
                     var414 = var396;
                     break label3461;
                  }

                  var11 = var417;
                  var8 = var421;
                  var420 = null;
                  var6 = var0;
                  var5 = var0;
                  var0 = var0;
                  var429 = var0;
                  var423 = var426;
                  var10 = var1;
                  var9 = var0;
                  var7 = var5;
               }

               while(true) {
                  var416 = var0;

                  try {
                     ((<undefinedtype>)var11).L$0 = var429;
                  } catch (Throwable var407) {
                     var10000 = var407;
                     var10001 = false;
                     break label3469;
                  }

                  var416 = var0;

                  try {
                     ((<undefinedtype>)var11).L$1 = var10;
                  } catch (Throwable var406) {
                     var10000 = var406;
                     var10001 = false;
                     break label3469;
                  }

                  var416 = var0;

                  try {
                     ((<undefinedtype>)var11).L$2 = var6;
                  } catch (Throwable var405) {
                     var10000 = var405;
                     var10001 = false;
                     break label3469;
                  }

                  var416 = var0;

                  try {
                     ((<undefinedtype>)var11).L$3 = var423;
                  } catch (Throwable var404) {
                     var10000 = var404;
                     var10001 = false;
                     break label3469;
                  }

                  var416 = var0;

                  try {
                     ((<undefinedtype>)var11).L$4 = var7;
                  } catch (Throwable var403) {
                     var10000 = var403;
                     var10001 = false;
                     break label3469;
                  }

                  var416 = var0;

                  try {
                     ((<undefinedtype>)var11).L$5 = var0;
                  } catch (Throwable var402) {
                     var10000 = var402;
                     var10001 = false;
                     break label3469;
                  }

                  var416 = var0;

                  try {
                     ((<undefinedtype>)var11).L$6 = var420;
                  } catch (Throwable var401) {
                     var10000 = var401;
                     var10001 = false;
                     break label3469;
                  }

                  var416 = var0;

                  try {
                     ((<undefinedtype>)var11).L$7 = var9;
                  } catch (Throwable var400) {
                     var10000 = var400;
                     var10001 = false;
                     break label3469;
                  }

                  var416 = var0;

                  try {
                     ((<undefinedtype>)var11).L$8 = var427;
                  } catch (Throwable var399) {
                     var10000 = var399;
                     var10001 = false;
                     break label3469;
                  }

                  var416 = var0;

                  try {
                     ((<undefinedtype>)var11).label = 1;
                  } catch (Throwable var398) {
                     var10000 = var398;
                     var10001 = false;
                     break label3469;
                  }

                  var416 = var0;

                  try {
                     var14 = var427.hasNext((Continuation)var11);
                  } catch (Throwable var397) {
                     var10000 = var397;
                     var10001 = false;
                     break label3469;
                  }

                  if (var14 == var8) {
                     return var8;
                  }

                  var5 = var6;
                  var415 = var423;
                  var422 = var420;
                  var6 = var429;
                  var419 = var415;
                  var416 = var0;

                  try {
                     if (!(Boolean)var14) {
                        break;
                     }
                  } catch (Throwable var410) {
                     var10000 = var410;
                     var10001 = false;
                     break label3469;
                  }

                  var416 = var0;

                  try {
                     var428 = var427.next();
                  } catch (Throwable var409) {
                     var10000 = var409;
                     var10001 = false;
                     break label3469;
                  }

                  var416 = var0;

                  try {
                     var419.put(var10.invoke(var428), var428);
                  } catch (Throwable var408) {
                     var10000 = var408;
                     var10001 = false;
                     break label3469;
                  }

                  var418 = var422;
                  var423 = var419;
                  var420 = var418;
                  var429 = var6;
                  var6 = var5;
               }
            }

            var416 = var0;

            try {
               Unit var425 = Unit.INSTANCE;
            } catch (Throwable var394) {
               var10000 = var394;
               var10001 = false;
               break label3469;
            }

            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, var422);
            InlineMarker.finallyEnd(1);
            return var419;
         }

         var414 = var10000;
      }

      try {
         throw var414;
      } finally {
         InlineMarker.finallyStart(1);
         ChannelsKt.cancelConsumed(var416, var414);
         InlineMarker.finallyEnd(1);
      }
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object associateBy(ReceiveChannel var0, Function1 var1, Function1 var2, Continuation var3) {
      Object var460;
      label3774: {
         if (var3 instanceof <undefinedtype>) {
            <undefinedtype> var5 = (<undefinedtype>)var3;
            if ((var5.label & Integer.MIN_VALUE) != 0) {
               var5.label += Integer.MIN_VALUE;
               var460 = var5;
               break label3774;
            }
         }

         var460 = new ContinuationImpl(var3) {
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            Object L$8;
            Object L$9;
            int label;
            Object result;

            public final Object invokeSuspend(Object var1) {
               this.result = var1;
               this.label |= Integer.MIN_VALUE;
               return ChannelsKt.associateBy((ReceiveChannel)null, (Function1)null, (Function1)null, this);
            }
         };
      }

      Throwable var456;
      ReceiveChannel var458;
      label3769: {
         Throwable var10000;
         label3777: {
            Throwable var11;
            boolean var10001;
            Map var457;
            label3767: {
               Object var15 = ((<undefinedtype>)var460).result;
               Object var461 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
               int var4 = ((<undefinedtype>)var460).label;
               ReceiveChannel var6;
               ReceiveChannel var7;
               Function1 var8;
               ReceiveChannel var9;
               Object var10;
               ReceiveChannel var12;
               ChannelIterator var13;
               Function1 var463;
               Map var464;
               ReceiveChannel var468;
               Object var469;
               ChannelIterator var470;
               if (var4 != 0) {
                  if (var4 != 1) {
                     throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                  }

                  var13 = (ChannelIterator)((<undefinedtype>)var460).L$9;
                  var9 = (ReceiveChannel)((<undefinedtype>)var460).L$8;
                  var11 = (Throwable)((<undefinedtype>)var460).L$7;
                  var0 = (ReceiveChannel)((<undefinedtype>)var460).L$6;
                  var6 = (ReceiveChannel)((<undefinedtype>)var460).L$5;
                  var457 = (Map)((<undefinedtype>)var460).L$4;
                  var7 = (ReceiveChannel)((<undefinedtype>)var460).L$3;
                  Function1 var14 = (Function1)((<undefinedtype>)var460).L$2;
                  var8 = (Function1)((<undefinedtype>)var460).L$1;
                  var12 = (ReceiveChannel)((<undefinedtype>)var460).L$0;

                  try {
                     ResultKt.throwOnFailure(var15);
                  } catch (Throwable var436) {
                     var458 = var0;
                     var456 = var436;
                     break label3769;
                  }

                  Object var459 = var461;
                  var10 = var460;
                  var463 = var14;
                  var460 = var459;
                  var458 = var0;

                  try {
                     if (!(Boolean)var15) {
                        break label3767;
                     }
                  } catch (Throwable var453) {
                     var10000 = var453;
                     var10001 = false;
                     break label3777;
                  }

                  var458 = var0;

                  try {
                     var469 = var13.next();
                  } catch (Throwable var454) {
                     var10000 = var454;
                     var10001 = false;
                     break label3777;
                  }

                  var458 = var0;

                  try {
                     var457.put(var8.invoke(var469), var463.invoke(var469));
                  } catch (Throwable var455) {
                     var10000 = var455;
                     var10001 = false;
                     break label3777;
                  }

                  var2 = var463;
                  var464 = var457;
                  var1 = var2;
                  var470 = var13;
                  var468 = var7;
                  var7 = var6;
               } else {
                  ResultKt.throwOnFailure(var15);
                  Map var467 = (Map)(new LinkedHashMap());
                  Throwable var465 = (Throwable)null;

                  try {
                     var470 = var0.iterator();
                  } catch (Throwable var437) {
                     var458 = var0;
                     var456 = var437;
                     break label3769;
                  }

                  var10 = var460;
                  var460 = var461;
                  var11 = null;
                  var7 = var0;
                  var0 = var0;
                  var8 = var1;
                  var468 = var0;
                  var12 = var0;
                  var464 = var467;
                  var1 = var2;
                  var9 = var0;
               }

               while(true) {
                  var458 = var0;

                  try {
                     ((<undefinedtype>)var10).L$0 = var12;
                  } catch (Throwable var449) {
                     var10000 = var449;
                     var10001 = false;
                     break label3777;
                  }

                  var458 = var0;

                  try {
                     ((<undefinedtype>)var10).L$1 = var8;
                  } catch (Throwable var448) {
                     var10000 = var448;
                     var10001 = false;
                     break label3777;
                  }

                  var458 = var0;

                  try {
                     ((<undefinedtype>)var10).L$2 = var1;
                  } catch (Throwable var447) {
                     var10000 = var447;
                     var10001 = false;
                     break label3777;
                  }

                  var458 = var0;

                  try {
                     ((<undefinedtype>)var10).L$3 = var468;
                  } catch (Throwable var446) {
                     var10000 = var446;
                     var10001 = false;
                     break label3777;
                  }

                  var458 = var0;

                  try {
                     ((<undefinedtype>)var10).L$4 = var464;
                  } catch (Throwable var445) {
                     var10000 = var445;
                     var10001 = false;
                     break label3777;
                  }

                  var458 = var0;

                  try {
                     ((<undefinedtype>)var10).L$5 = var7;
                  } catch (Throwable var444) {
                     var10000 = var444;
                     var10001 = false;
                     break label3777;
                  }

                  var458 = var0;

                  try {
                     ((<undefinedtype>)var10).L$6 = var0;
                  } catch (Throwable var443) {
                     var10000 = var443;
                     var10001 = false;
                     break label3777;
                  }

                  var458 = var0;

                  try {
                     ((<undefinedtype>)var10).L$7 = var11;
                  } catch (Throwable var442) {
                     var10000 = var442;
                     var10001 = false;
                     break label3777;
                  }

                  var458 = var0;

                  try {
                     ((<undefinedtype>)var10).L$8 = var9;
                  } catch (Throwable var441) {
                     var10000 = var441;
                     var10001 = false;
                     break label3777;
                  }

                  var458 = var0;

                  try {
                     ((<undefinedtype>)var10).L$9 = var470;
                  } catch (Throwable var440) {
                     var10000 = var440;
                     var10001 = false;
                     break label3777;
                  }

                  var458 = var0;

                  try {
                     ((<undefinedtype>)var10).label = 1;
                  } catch (Throwable var439) {
                     var10000 = var439;
                     var10001 = false;
                     break label3777;
                  }

                  var458 = var0;

                  try {
                     var15 = var470.hasNext((Continuation)var10);
                  } catch (Throwable var438) {
                     var10000 = var438;
                     var10001 = false;
                     break label3777;
                  }

                  if (var15 == var460) {
                     return var460;
                  }

                  var6 = var7;
                  Map var466 = var464;
                  var463 = var1;
                  var7 = var468;
                  var13 = var470;
                  var457 = var466;
                  var458 = var0;

                  try {
                     if (!(Boolean)var15) {
                        break;
                     }
                  } catch (Throwable var452) {
                     var10000 = var452;
                     var10001 = false;
                     break label3777;
                  }

                  var458 = var0;

                  try {
                     var469 = var13.next();
                  } catch (Throwable var451) {
                     var10000 = var451;
                     var10001 = false;
                     break label3777;
                  }

                  var458 = var0;

                  try {
                     var457.put(var8.invoke(var469), var463.invoke(var469));
                  } catch (Throwable var450) {
                     var10000 = var450;
                     var10001 = false;
                     break label3777;
                  }

                  var2 = var463;
                  var464 = var457;
                  var1 = var2;
                  var470 = var13;
                  var468 = var7;
                  var7 = var6;
               }
            }

            var458 = var0;

            try {
               Unit var462 = Unit.INSTANCE;
            } catch (Throwable var435) {
               var10000 = var435;
               var10001 = false;
               break label3777;
            }

            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, var11);
            InlineMarker.finallyEnd(1);
            return var457;
         }

         var456 = var10000;
      }

      try {
         throw var456;
      } finally {
         InlineMarker.finallyStart(1);
         ChannelsKt.cancelConsumed(var458, var456);
         InlineMarker.finallyEnd(1);
      }
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   private static final Object associateBy$$forInline(ReceiveChannel var0, Function1 var1, Continuation var2) {
      Map var3 = (Map)(new LinkedHashMap());
      Throwable var4 = (Throwable)null;

      label194: {
         Throwable var10000;
         label195: {
            boolean var10001;
            ChannelIterator var28;
            try {
               var28 = var0.iterator();
            } catch (Throwable var24) {
               var10000 = var24;
               var10001 = false;
               break label195;
            }

            while(true) {
               try {
                  InlineMarker.mark(0);
                  Object var5 = var28.hasNext(var2);
                  InlineMarker.mark(1);
                  if (!(Boolean)var5) {
                     break;
                  }

                  var5 = var28.next();
                  var3.put(var1.invoke(var5), var5);
               } catch (Throwable var25) {
                  var10000 = var25;
                  var10001 = false;
                  break label195;
               }
            }

            label178:
            try {
               Unit var26 = Unit.INSTANCE;
               break label194;
            } catch (Throwable var23) {
               var10000 = var23;
               var10001 = false;
               break label178;
            }
         }

         Throwable var27 = var10000;

         try {
            throw var27;
         } finally {
            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, var27);
            InlineMarker.finallyEnd(1);
         }
      }

      InlineMarker.finallyStart(1);
      ChannelsKt.cancelConsumed(var0, (Throwable)null);
      InlineMarker.finallyEnd(1);
      return var3;
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   private static final Object associateBy$$forInline(ReceiveChannel var0, Function1 var1, Function1 var2, Continuation var3) {
      Map var4 = (Map)(new LinkedHashMap());
      Throwable var5 = (Throwable)null;

      label194: {
         Throwable var10000;
         label195: {
            boolean var10001;
            ChannelIterator var29;
            try {
               var29 = var0.iterator();
            } catch (Throwable var25) {
               var10000 = var25;
               var10001 = false;
               break label195;
            }

            while(true) {
               try {
                  InlineMarker.mark(0);
                  Object var6 = var29.hasNext(var3);
                  InlineMarker.mark(1);
                  if (!(Boolean)var6) {
                     break;
                  }

                  var6 = var29.next();
                  var4.put(var1.invoke(var6), var2.invoke(var6));
               } catch (Throwable var26) {
                  var10000 = var26;
                  var10001 = false;
                  break label195;
               }
            }

            label178:
            try {
               Unit var27 = Unit.INSTANCE;
               break label194;
            } catch (Throwable var24) {
               var10000 = var24;
               var10001 = false;
               break label178;
            }
         }

         Throwable var28 = var10000;

         try {
            throw var28;
         } finally {
            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, var28);
            InlineMarker.finallyEnd(1);
         }
      }

      InlineMarker.finallyStart(1);
      ChannelsKt.cancelConsumed(var0, (Throwable)null);
      InlineMarker.finallyEnd(1);
      return var4;
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object associateByTo(ReceiveChannel param0, Map param1, Function1 param2, Continuation param3) {
      // $FF: Couldn't be decompiled
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object associateByTo(ReceiveChannel var0, Map var1, Function1 var2, Function1 var3, Continuation var4) {
      Object var422;
      label3466: {
         if (var4 instanceof <undefinedtype>) {
            <undefinedtype> var6 = (<undefinedtype>)var4;
            if ((var6.label & Integer.MIN_VALUE) != 0) {
               var6.label += Integer.MIN_VALUE;
               var422 = var6;
               break label3466;
            }
         }

         var422 = new ContinuationImpl(var4) {
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            Object L$8;
            int label;
            Object result;

            public final Object invokeSuspend(Object var1) {
               this.result = var1;
               this.label |= Integer.MIN_VALUE;
               return ChannelsKt.associateByTo((ReceiveChannel)null, (Map)null, (Function1)null, (Function1)null, this);
            }
         };
      }

      label3461: {
         Throwable var10000;
         label3469: {
            Throwable var11;
            boolean var10001;
            ReceiveChannel var414;
            Map var419;
            label3459: {
               Object var13 = ((<undefinedtype>)var422).result;
               Object var7 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
               int var5 = ((<undefinedtype>)var422).label;
               ReceiveChannel var8;
               ReceiveChannel var9;
               Function1 var10;
               ChannelIterator var12;
               Map var415;
               Object var417;
               Map var418;
               Object var420;
               ReceiveChannel var423;
               Function1 var424;
               if (var5 != 0) {
                  if (var5 != 1) {
                     throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                  }

                  var12 = (ChannelIterator)((<undefinedtype>)var422).L$8;
                  ReceiveChannel var416 = (ReceiveChannel)((<undefinedtype>)var422).L$7;
                  var11 = (Throwable)((<undefinedtype>)var422).L$6;
                  var414 = (ReceiveChannel)((<undefinedtype>)var422).L$5;
                  var9 = (ReceiveChannel)((<undefinedtype>)var422).L$4;
                  var424 = (Function1)((<undefinedtype>)var422).L$3;
                  var10 = (Function1)((<undefinedtype>)var422).L$2;
                  var419 = (Map)((<undefinedtype>)var422).L$1;
                  var8 = (ReceiveChannel)((<undefinedtype>)var422).L$0;
                  var0 = var414;

                  try {
                     ResultKt.throwOnFailure(var13);
                  } catch (Throwable var409) {
                     var10000 = var409;
                     var10001 = false;
                     break label3469;
                  }

                  var0 = var416;
                  var417 = var7;
                  var7 = var422;
                  var423 = var0;
                  var0 = var414;

                  try {
                     if (!(Boolean)var13) {
                        break label3459;
                     }
                  } catch (Throwable var410) {
                     var10000 = var410;
                     var10001 = false;
                     break label3469;
                  }

                  var0 = var414;

                  try {
                     var13 = var12.next();
                  } catch (Throwable var408) {
                     var10000 = var408;
                     var10001 = false;
                     break label3469;
                  }

                  var0 = var414;

                  try {
                     var419.put(var10.invoke(var13), var424.invoke(var13));
                  } catch (Throwable var407) {
                     var10000 = var407;
                     var10001 = false;
                     break label3469;
                  }

                  var415 = var419;
                  var420 = var417;
                  var418 = var415;
               } else {
                  ResultKt.throwOnFailure(var13);
                  Throwable var425 = (Throwable)null;

                  try {
                     var12 = var0.iterator();
                  } finally {
                     break label3461;
                  }

               }

               while(true) {
                  var0 = var414;

                  try {
                     ((<undefinedtype>)var7).L$0 = var8;
                  } catch (Throwable var406) {
                     var10000 = var406;
                     var10001 = false;
                     break label3469;
                  }

                  var0 = var414;

                  try {
                     ((<undefinedtype>)var7).L$1 = var418;
                  } catch (Throwable var405) {
                     var10000 = var405;
                     var10001 = false;
                     break label3469;
                  }

                  var0 = var414;

                  try {
                     ((<undefinedtype>)var7).L$2 = var10;
                  } catch (Throwable var404) {
                     var10000 = var404;
                     var10001 = false;
                     break label3469;
                  }

                  var0 = var414;

                  try {
                     ((<undefinedtype>)var7).L$3 = var424;
                  } catch (Throwable var403) {
                     var10000 = var403;
                     var10001 = false;
                     break label3469;
                  }

                  var0 = var414;

                  try {
                     ((<undefinedtype>)var7).L$4 = var9;
                  } catch (Throwable var402) {
                     var10000 = var402;
                     var10001 = false;
                     break label3469;
                  }

                  var0 = var414;

                  try {
                     ((<undefinedtype>)var7).L$5 = var414;
                  } catch (Throwable var401) {
                     var10000 = var401;
                     var10001 = false;
                     break label3469;
                  }

                  var0 = var414;

                  try {
                     ((<undefinedtype>)var7).L$6 = var11;
                  } catch (Throwable var400) {
                     var10000 = var400;
                     var10001 = false;
                     break label3469;
                  }

                  var0 = var414;

                  try {
                     ((<undefinedtype>)var7).L$7 = var423;
                  } catch (Throwable var399) {
                     var10000 = var399;
                     var10001 = false;
                     break label3469;
                  }

                  var0 = var414;

                  try {
                     ((<undefinedtype>)var7).L$8 = var12;
                  } catch (Throwable var398) {
                     var10000 = var398;
                     var10001 = false;
                     break label3469;
                  }

                  var0 = var414;

                  try {
                     ((<undefinedtype>)var7).label = 1;
                  } catch (Throwable var397) {
                     var10000 = var397;
                     var10001 = false;
                     break label3469;
                  }

                  var0 = var414;

                  try {
                     var13 = var12.hasNext((Continuation)var7);
                  } catch (Throwable var396) {
                     var10000 = var396;
                     var10001 = false;
                     break label3469;
                  }

                  if (var13 == var420) {
                     return var420;
                  }

                  var415 = var418;
                  var417 = var420;
                  var419 = var415;
                  var0 = var414;

                  try {
                     if (!(Boolean)var13) {
                        break;
                     }
                  } catch (Throwable var411) {
                     var10000 = var411;
                     var10001 = false;
                     break label3469;
                  }

                  var0 = var414;

                  try {
                     var13 = var12.next();
                  } catch (Throwable var412) {
                     var10000 = var412;
                     var10001 = false;
                     break label3469;
                  }

                  var0 = var414;

                  try {
                     var419.put(var10.invoke(var13), var424.invoke(var13));
                  } catch (Throwable var413) {
                     var10000 = var413;
                     var10001 = false;
                     break label3469;
                  }

                  var415 = var419;
                  var420 = var417;
                  var418 = var415;
               }
            }

            var0 = var414;

            try {
               Unit var421 = Unit.INSTANCE;
            } catch (Throwable var394) {
               var10000 = var394;
               var10001 = false;
               break label3469;
            }

            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var414, var11);
            InlineMarker.finallyEnd(1);
            return var419;
         }

         var1 = var10000;
      }

      try {
         throw var1;
      } finally {
         InlineMarker.finallyStart(1);
         ChannelsKt.cancelConsumed(var0, (Throwable)var1);
         InlineMarker.finallyEnd(1);
      }
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   private static final Object associateByTo$$forInline(ReceiveChannel var0, Map var1, Function1 var2, Continuation var3) {
      Throwable var4 = (Throwable)null;

      label194: {
         Throwable var10000;
         label195: {
            boolean var10001;
            ChannelIterator var28;
            try {
               var28 = var0.iterator();
            } catch (Throwable var24) {
               var10000 = var24;
               var10001 = false;
               break label195;
            }

            while(true) {
               try {
                  InlineMarker.mark(0);
                  Object var5 = var28.hasNext(var3);
                  InlineMarker.mark(1);
                  if (!(Boolean)var5) {
                     break;
                  }

                  var5 = var28.next();
                  var1.put(var2.invoke(var5), var5);
               } catch (Throwable var25) {
                  var10000 = var25;
                  var10001 = false;
                  break label195;
               }
            }

            label178:
            try {
               Unit var27 = Unit.INSTANCE;
               break label194;
            } catch (Throwable var23) {
               var10000 = var23;
               var10001 = false;
               break label178;
            }
         }

         Throwable var26 = var10000;

         try {
            throw var26;
         } finally {
            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, var26);
            InlineMarker.finallyEnd(1);
         }
      }

      InlineMarker.finallyStart(1);
      ChannelsKt.cancelConsumed(var0, (Throwable)null);
      InlineMarker.finallyEnd(1);
      return var1;
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   private static final Object associateByTo$$forInline(ReceiveChannel var0, Map var1, Function1 var2, Function1 var3, Continuation var4) {
      Throwable var5 = (Throwable)null;

      label194: {
         Throwable var10000;
         label195: {
            boolean var10001;
            ChannelIterator var29;
            try {
               var29 = var0.iterator();
            } catch (Throwable var25) {
               var10000 = var25;
               var10001 = false;
               break label195;
            }

            while(true) {
               try {
                  InlineMarker.mark(0);
                  Object var6 = var29.hasNext(var4);
                  InlineMarker.mark(1);
                  if (!(Boolean)var6) {
                     break;
                  }

                  var6 = var29.next();
                  var1.put(var2.invoke(var6), var3.invoke(var6));
               } catch (Throwable var26) {
                  var10000 = var26;
                  var10001 = false;
                  break label195;
               }
            }

            label178:
            try {
               Unit var28 = Unit.INSTANCE;
               break label194;
            } catch (Throwable var24) {
               var10000 = var24;
               var10001 = false;
               break label178;
            }
         }

         Throwable var27 = var10000;

         try {
            throw var27;
         } finally {
            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, var27);
            InlineMarker.finallyEnd(1);
         }
      }

      InlineMarker.finallyStart(1);
      ChannelsKt.cancelConsumed(var0, (Throwable)null);
      InlineMarker.finallyEnd(1);
      return var1;
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object associateTo(ReceiveChannel param0, Map param1, Function1 param2, Continuation param3) {
      // $FF: Couldn't be decompiled
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   private static final Object associateTo$$forInline(ReceiveChannel var0, Map var1, Function1 var2, Continuation var3) {
      Throwable var4 = (Throwable)null;

      label194: {
         Throwable var10000;
         label195: {
            boolean var10001;
            ChannelIterator var28;
            try {
               var28 = var0.iterator();
            } catch (Throwable var24) {
               var10000 = var24;
               var10001 = false;
               break label195;
            }

            while(true) {
               try {
                  InlineMarker.mark(0);
                  Object var5 = var28.hasNext(var3);
                  InlineMarker.mark(1);
                  if (!(Boolean)var5) {
                     break;
                  }

                  Pair var29 = (Pair)var2.invoke(var28.next());
                  var1.put(var29.getFirst(), var29.getSecond());
               } catch (Throwable var25) {
                  var10000 = var25;
                  var10001 = false;
                  break label195;
               }
            }

            label178:
            try {
               Unit var27 = Unit.INSTANCE;
               break label194;
            } catch (Throwable var23) {
               var10000 = var23;
               var10001 = false;
               break label178;
            }
         }

         Throwable var26 = var10000;

         try {
            throw var26;
         } finally {
            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, var26);
            InlineMarker.finallyEnd(1);
         }
      }

      InlineMarker.finallyStart(1);
      ChannelsKt.cancelConsumed(var0, (Throwable)null);
      InlineMarker.finallyEnd(1);
      return var1;
   }

   public static final void cancelConsumed(ReceiveChannel var0, Throwable var1) {
      CancellationException var2 = null;
      Object var3 = null;
      if (var1 != null) {
         Throwable var4;
         if (!(var1 instanceof CancellationException)) {
            var4 = (Throwable)var3;
         } else {
            var4 = var1;
         }

         var2 = (CancellationException)var4;
         if (var2 == null) {
            var2 = ExceptionsKt.CancellationException("Channel was consumed, consumer had failed", var1);
         }
      }

      var0.cancel(var2);
   }

   public static final Object consume(BroadcastChannel var0, Function1 var1) {
      ReceiveChannel var4 = var0.openSubscription();

      Object var5;
      try {
         var5 = var1.invoke(var4);
      } finally {
         InlineMarker.finallyStart(1);
         ReceiveChannel.DefaultImpls.cancel$default(var4, (CancellationException)null, 1, (Object)null);
         InlineMarker.finallyEnd(1);
      }

      return var5;
   }

   public static final Object consume(ReceiveChannel var0, Function1 var1) {
      Throwable var2 = (Throwable)null;

      Object var10;
      try {
         var10 = var1.invoke(var0);
      } catch (Throwable var8) {
         Throwable var9 = var8;

         try {
            throw var9;
         } finally {
            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, var8);
            InlineMarker.finallyEnd(1);
         }
      }

      InlineMarker.finallyStart(1);
      ChannelsKt.cancelConsumed(var0, (Throwable)null);
      InlineMarker.finallyEnd(1);
      return var10;
   }

   public static final Object consumeEach(BroadcastChannel var0, Function1 var1, Continuation var2) {
      Object var59;
      label582: {
         if (var2 instanceof <undefinedtype>) {
            <undefinedtype> var4 = (<undefinedtype>)var2;
            if ((var4.label & Integer.MIN_VALUE) != 0) {
               var4.label += Integer.MIN_VALUE;
               var59 = var4;
               break label582;
            }
         }

         var59 = new ContinuationImpl(var2) {
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            int label;
            Object result;

            public final Object invokeSuspend(Object var1) {
               this.result = var1;
               this.label |= Integer.MIN_VALUE;
               return ChannelsKt.consumeEach((BroadcastChannel)null, (Function1)null, this);
            }
         };
      }

      ReceiveChannel var5;
      Throwable var55;
      label576: {
         Throwable var10000;
         label575: {
            Object var9 = ((<undefinedtype>)var59).result;
            Object var6 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
            int var3 = ((<undefinedtype>)var59).label;
            Object var64;
            ReceiveChannel var65;
            ChannelIterator var66;
            BroadcastChannel var7;
            boolean var10001;
            ReceiveChannel var54;
            Object var57;
            Throwable var58;
            Unit var60;
            BroadcastChannel var61;
            Function1 var62;
            if (var3 != 0) {
               label585: {
                  if (var3 != 1) {
                     throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                  }

                  ChannelIterator var10 = (ChannelIterator)((<undefinedtype>)var59).L$5;
                  ReceiveChannel var56 = (ReceiveChannel)((<undefinedtype>)var59).L$4;
                  var54 = (ReceiveChannel)((<undefinedtype>)var59).L$3;
                  BroadcastChannel var11 = (BroadcastChannel)((<undefinedtype>)var59).L$2;
                  var62 = (Function1)((<undefinedtype>)var59).L$1;
                  var7 = (BroadcastChannel)((<undefinedtype>)var59).L$0;
                  var5 = var54;

                  try {
                     ResultKt.throwOnFailure(var9);
                  } catch (Throwable var51) {
                     var10000 = var51;
                     var10001 = false;
                     break label575;
                  }

                  Object var8 = var6;
                  var64 = var59;
                  var65 = var56;
                  var61 = var11;
                  var57 = var8;
                  var66 = var10;

                  label586: {
                     try {
                        if ((Boolean)var9) {
                           var62.invoke(var66.next());
                           break label585;
                        }
                     } catch (Throwable var49) {
                        var10000 = var49;
                        var10001 = false;
                        break label586;
                     }

                     try {
                        var60 = Unit.INSTANCE;
                     } catch (Throwable var47) {
                        var10000 = var47;
                        var10001 = false;
                        break label586;
                     }

                     InlineMarker.finallyStart(1);
                     ReceiveChannel.DefaultImpls.cancel$default(var54, (CancellationException)null, 1, (Object)null);
                     InlineMarker.finallyEnd(1);
                     return var60;
                  }

                  var58 = var10000;
                  var5 = var54;
                  var55 = var58;
                  break label576;
               }
            } else {
               ResultKt.throwOnFailure(var9);
               ReceiveChannel var63 = var0.openSubscription();
               var5 = var63;

               try {
                  var66 = var63.iterator();
               } catch (Throwable var50) {
                  var10000 = var50;
                  var10001 = false;
                  break label575;
               }

               var64 = var59;
               Function1 var67 = var1;
               var61 = var0;
               var7 = var0;
               var54 = var63;
               var57 = var6;
               var65 = var63;
               var62 = var67;
            }

            while(true) {
               try {
                  ((<undefinedtype>)var64).L$0 = var7;
                  ((<undefinedtype>)var64).L$1 = var62;
                  ((<undefinedtype>)var64).L$2 = var61;
                  ((<undefinedtype>)var64).L$3 = var54;
                  ((<undefinedtype>)var64).L$4 = var65;
                  ((<undefinedtype>)var64).L$5 = var66;
                  ((<undefinedtype>)var64).label = 1;
                  var9 = var66.hasNext((Continuation)var64);
               } catch (Throwable var48) {
                  var5 = var54;
                  var55 = var48;
                  break label576;
               }

               if (var9 == var57) {
                  return var57;
               }

               label589: {
                  try {
                     if ((Boolean)var9) {
                        var62.invoke(var66.next());
                        continue;
                     }
                  } catch (Throwable var52) {
                     var10000 = var52;
                     var10001 = false;
                     break label589;
                  }

                  try {
                     var60 = Unit.INSTANCE;
                  } catch (Throwable var53) {
                     var10000 = var53;
                     var10001 = false;
                     break label589;
                  }

                  InlineMarker.finallyStart(1);
                  ReceiveChannel.DefaultImpls.cancel$default(var54, (CancellationException)null, 1, (Object)null);
                  InlineMarker.finallyEnd(1);
                  return var60;
               }

               var58 = var10000;
               var5 = var54;
               var55 = var58;
               break label576;
            }
         }

         var55 = var10000;
      }

      InlineMarker.finallyStart(1);
      ReceiveChannel.DefaultImpls.cancel$default(var5, (CancellationException)null, 1, (Object)null);
      InlineMarker.finallyEnd(1);
      throw var55;
   }

   public static final Object consumeEach(ReceiveChannel param0, Function1 param1, Continuation param2) {
      // $FF: Couldn't be decompiled
   }

   private static final Object consumeEach$$forInline(BroadcastChannel var0, Function1 var1, Continuation var2) {
      ReceiveChannel var17 = var0.openSubscription();

      Unit var19;
      label133: {
         Throwable var10000;
         label132: {
            ChannelIterator var4;
            boolean var10001;
            try {
               var4 = var17.iterator();
            } catch (Throwable var15) {
               var10000 = var15;
               var10001 = false;
               break label132;
            }

            while(true) {
               try {
                  InlineMarker.mark(0);
                  Object var3 = var4.hasNext(var2);
                  InlineMarker.mark(1);
                  if ((Boolean)var3) {
                     var1.invoke(var4.next());
                     continue;
                  }
               } catch (Throwable var16) {
                  var10000 = var16;
                  var10001 = false;
                  break;
               }

               try {
                  var19 = Unit.INSTANCE;
                  break label133;
               } catch (Throwable var14) {
                  var10000 = var14;
                  var10001 = false;
                  break;
               }
            }
         }

         Throwable var18 = var10000;
         InlineMarker.finallyStart(1);
         ReceiveChannel.DefaultImpls.cancel$default(var17, (CancellationException)null, 1, (Object)null);
         InlineMarker.finallyEnd(1);
         throw var18;
      }

      InlineMarker.finallyStart(1);
      ReceiveChannel.DefaultImpls.cancel$default(var17, (CancellationException)null, 1, (Object)null);
      InlineMarker.finallyEnd(1);
      return var19;
   }

   private static final Object consumeEach$$forInline(ReceiveChannel var0, Function1 var1, Continuation var2) {
      Throwable var3 = (Throwable)null;

      Unit var25;
      label194: {
         Throwable var10000;
         label195: {
            boolean var10001;
            ChannelIterator var27;
            try {
               var27 = var0.iterator();
            } catch (Throwable var23) {
               var10000 = var23;
               var10001 = false;
               break label195;
            }

            while(true) {
               try {
                  InlineMarker.mark(0);
                  Object var4 = var27.hasNext(var2);
                  InlineMarker.mark(1);
                  if (!(Boolean)var4) {
                     break;
                  }

                  var1.invoke(var27.next());
               } catch (Throwable var24) {
                  var10000 = var24;
                  var10001 = false;
                  break label195;
               }
            }

            label178:
            try {
               var25 = Unit.INSTANCE;
               break label194;
            } catch (Throwable var22) {
               var10000 = var22;
               var10001 = false;
               break label178;
            }
         }

         Throwable var26 = var10000;

         try {
            throw var26;
         } finally {
            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, var26);
            InlineMarker.finallyEnd(1);
         }
      }

      InlineMarker.finallyStart(1);
      ChannelsKt.cancelConsumed(var0, (Throwable)null);
      InlineMarker.finallyEnd(1);
      return var25;
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object consumeEachIndexed(ReceiveChannel var0, Function1 var1, Continuation var2) {
      Object var632;
      label5204: {
         if (var2 instanceof <undefinedtype>) {
            <undefinedtype> var4 = (<undefinedtype>)var2;
            if ((var4.label & Integer.MIN_VALUE) != 0) {
               var4.label += Integer.MIN_VALUE;
               var632 = var4;
               break label5204;
            }
         }

         var632 = new ContinuationImpl(var2) {
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            int label;
            Object result;

            public final Object invokeSuspend(Object var1) {
               this.result = var1;
               this.label |= Integer.MIN_VALUE;
               return ChannelsKt.consumeEachIndexed((ReceiveChannel)null, (Function1)null, this);
            }
         };
      }

      label5198: {
         Throwable var10000;
         label5207: {
            boolean var10001;
            ReceiveChannel var631;
            Throwable var636;
            label5196: {
               Object var12 = ((<undefinedtype>)var632).result;
               Object var635 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
               int var3 = ((<undefinedtype>)var632).label;
               IndexedValue var640;
               ReceiveChannel var5;
               Function1 var6;
               Object var7;
               Ref.IntRef var8;
               Object var9;
               ChannelIterator var10;
               ReceiveChannel var11;
               ReceiveChannel var633;
               Throwable var637;
               ReceiveChannel var639;
               if (var3 != 0) {
                  if (var3 != 1) {
                     throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                  }

                  var10 = (ChannelIterator)((<undefinedtype>)var632).L$7;
                  var5 = (ReceiveChannel)((<undefinedtype>)var632).L$6;
                  Throwable var630 = (Throwable)((<undefinedtype>)var632).L$5;
                  var631 = (ReceiveChannel)((<undefinedtype>)var632).L$4;
                  var11 = (ReceiveChannel)((<undefinedtype>)var632).L$3;
                  var8 = (Ref.IntRef)((<undefinedtype>)var632).L$2;
                  var6 = (Function1)((<undefinedtype>)var632).L$1;
                  ReceiveChannel var13 = (ReceiveChannel)((<undefinedtype>)var632).L$0;

                  try {
                     ResultKt.throwOnFailure(var12);
                  } catch (Throwable var605) {
                     var633 = var631;
                     var1 = var605;
                     var0 = var633;
                     break label5198;
                  }

                  var7 = var632;
                  var9 = var635;
                  var636 = var630;
                  var633 = var13;
                  var0 = var631;

                  try {
                     if (!(Boolean)var12) {
                        break label5196;
                     }
                  } catch (Throwable var623) {
                     var10000 = var623;
                     var10001 = false;
                     break label5207;
                  }

                  var0 = var631;

                  try {
                     var12 = var10.next();
                  } catch (Throwable var624) {
                     var10000 = var624;
                     var10001 = false;
                     break label5207;
                  }

                  var0 = var631;

                  try {
                     var640 = new IndexedValue;
                  } catch (Throwable var625) {
                     var10000 = var625;
                     var10001 = false;
                     break label5207;
                  }

                  var0 = var631;

                  try {
                     var3 = var8.element;
                  } catch (Throwable var626) {
                     var10000 = var626;
                     var10001 = false;
                     break label5207;
                  }

                  var0 = var631;

                  try {
                     var8.element = var3 + 1;
                  } catch (Throwable var627) {
                     var10000 = var627;
                     var10001 = false;
                     break label5207;
                  }

                  var0 = var631;

                  try {
                     var640.<init>(var3, var12);
                  } catch (Throwable var628) {
                     var10000 = var628;
                     var10001 = false;
                     break label5207;
                  }

                  var0 = var631;

                  try {
                     var6.invoke(var640);
                  } catch (Throwable var629) {
                     var10000 = var629;
                     var10001 = false;
                     break label5207;
                  }

                  var639 = var5;
                  var637 = var636;
               } else {
                  ResultKt.throwOnFailure(var12);
                  var8 = new Ref.IntRef();
                  var8.element = 0;
                  var637 = (Throwable)null;

                  try {
                     var10 = var0.iterator();
                  } finally {
                     break label5198;
                  }

               }

               while(true) {
                  var0 = var631;

                  try {
                     ((<undefinedtype>)var7).L$0 = var633;
                  } catch (Throwable var615) {
                     var10000 = var615;
                     var10001 = false;
                     break label5207;
                  }

                  var0 = var631;

                  try {
                     ((<undefinedtype>)var7).L$1 = var6;
                  } catch (Throwable var614) {
                     var10000 = var614;
                     var10001 = false;
                     break label5207;
                  }

                  var0 = var631;

                  try {
                     ((<undefinedtype>)var7).L$2 = var8;
                  } catch (Throwable var613) {
                     var10000 = var613;
                     var10001 = false;
                     break label5207;
                  }

                  var0 = var631;

                  try {
                     ((<undefinedtype>)var7).L$3 = var11;
                  } catch (Throwable var612) {
                     var10000 = var612;
                     var10001 = false;
                     break label5207;
                  }

                  var0 = var631;

                  try {
                     ((<undefinedtype>)var7).L$4 = var631;
                  } catch (Throwable var611) {
                     var10000 = var611;
                     var10001 = false;
                     break label5207;
                  }

                  var0 = var631;

                  try {
                     ((<undefinedtype>)var7).L$5 = var637;
                  } catch (Throwable var610) {
                     var10000 = var610;
                     var10001 = false;
                     break label5207;
                  }

                  var0 = var631;

                  try {
                     ((<undefinedtype>)var7).L$6 = var639;
                  } catch (Throwable var609) {
                     var10000 = var609;
                     var10001 = false;
                     break label5207;
                  }

                  var0 = var631;

                  try {
                     ((<undefinedtype>)var7).L$7 = var10;
                  } catch (Throwable var608) {
                     var10000 = var608;
                     var10001 = false;
                     break label5207;
                  }

                  var0 = var631;

                  try {
                     ((<undefinedtype>)var7).label = 1;
                  } catch (Throwable var607) {
                     var10000 = var607;
                     var10001 = false;
                     break label5207;
                  }

                  var0 = var631;

                  try {
                     var635 = var10.hasNext((Continuation)var7);
                  } catch (Throwable var606) {
                     var10000 = var606;
                     var10001 = false;
                     break label5207;
                  }

                  if (var635 == var9) {
                     return var9;
                  }

                  Object var638 = var635;
                  var636 = var637;
                  var5 = var639;
                  var12 = var638;
                  var0 = var631;

                  try {
                     if (!(Boolean)var12) {
                        break;
                     }
                  } catch (Throwable var622) {
                     var10000 = var622;
                     var10001 = false;
                     break label5207;
                  }

                  var0 = var631;

                  try {
                     var12 = var10.next();
                  } catch (Throwable var621) {
                     var10000 = var621;
                     var10001 = false;
                     break label5207;
                  }

                  var0 = var631;

                  try {
                     var640 = new IndexedValue;
                  } catch (Throwable var620) {
                     var10000 = var620;
                     var10001 = false;
                     break label5207;
                  }

                  var0 = var631;

                  try {
                     var3 = var8.element;
                  } catch (Throwable var619) {
                     var10000 = var619;
                     var10001 = false;
                     break label5207;
                  }

                  var0 = var631;

                  try {
                     var8.element = var3 + 1;
                  } catch (Throwable var618) {
                     var10000 = var618;
                     var10001 = false;
                     break label5207;
                  }

                  var0 = var631;

                  try {
                     var640.<init>(var3, var12);
                  } catch (Throwable var617) {
                     var10000 = var617;
                     var10001 = false;
                     break label5207;
                  }

                  var0 = var631;

                  try {
                     var6.invoke(var640);
                  } catch (Throwable var616) {
                     var10000 = var616;
                     var10001 = false;
                     break label5207;
                  }

                  var639 = var5;
                  var637 = var636;
               }
            }

            var0 = var631;

            try {
               Unit var634 = Unit.INSTANCE;
            } catch (Throwable var603) {
               var10000 = var603;
               var10001 = false;
               break label5207;
            }

            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var631, var636);
            InlineMarker.finallyEnd(1);
            return Unit.INSTANCE;
         }

         var1 = var10000;
      }

      try {
         throw var1;
      } finally {
         InlineMarker.finallyStart(1);
         ChannelsKt.cancelConsumed(var0, (Throwable)var1);
         InlineMarker.finallyEnd(1);
      }
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   private static final Object consumeEachIndexed$$forInline(ReceiveChannel var0, Function1 var1, Continuation var2) {
      Throwable var4 = (Throwable)null;

      label204: {
         Throwable var10000;
         label205: {
            boolean var10001;
            ChannelIterator var29;
            try {
               var29 = var0.iterator();
            } catch (Throwable var26) {
               var10000 = var26;
               var10001 = false;
               break label205;
            }

            int var3 = 0;

            while(true) {
               try {
                  InlineMarker.mark(0);
                  Object var5 = var29.hasNext(var2);
                  InlineMarker.mark(1);
                  if (!(Boolean)var5) {
                     break;
                  }

                  var5 = var29.next();
                  IndexedValue var6 = new IndexedValue(var3, var5);
                  var1.invoke(var6);
               } catch (Throwable var25) {
                  var10000 = var25;
                  var10001 = false;
                  break label205;
               }

               ++var3;
            }

            label187:
            try {
               Unit var28 = Unit.INSTANCE;
               break label204;
            } catch (Throwable var24) {
               var10000 = var24;
               var10001 = false;
               break label187;
            }
         }

         Throwable var27 = var10000;

         try {
            throw var27;
         } finally {
            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, var27);
            InlineMarker.finallyEnd(1);
         }
      }

      InlineMarker.finallyStart(1);
      ChannelsKt.cancelConsumed(var0, (Throwable)null);
      InlineMarker.finallyEnd(1);
      return Unit.INSTANCE;
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Function1 consumes(ReceiveChannel var0) {
      return (Function1)(new Function1(var0) {
         final ReceiveChannel $this_consumes;

         {
            this.$this_consumes = var1;
         }

         public final void invoke(Throwable var1) {
            ChannelsKt.cancelConsumed(this.$this_consumes, var1);
         }
      });
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Function1 consumesAll(ReceiveChannel... var0) {
      return (Function1)(new Function1(var0) {
         final ReceiveChannel[] $channels;

         {
            this.$channels = var1;
         }

         public final void invoke(Throwable var1) {
            Throwable var4 = null;
            Throwable var5 = (Throwable)null;
            ReceiveChannel[] var6 = this.$channels;
            int var3 = var6.length;

            for(int var2 = 0; var2 < var3; ++var2) {
               ReceiveChannel var9 = var6[var2];

               try {
                  ChannelsKt.cancelConsumed(var9, var1);
               } catch (Throwable var8) {
                  if (var4 == null) {
                     var4 = var8;
                  } else {
                     kotlin.ExceptionsKt.addSuppressed(var4, var8);
                  }
                  continue;
               }
            }

            if (var4 != null) {
               throw var4;
            }
         }
      });
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object count(ReceiveChannel param0, Continuation param1) {
      // $FF: Couldn't be decompiled
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object count(ReceiveChannel var0, Function1 var1, Continuation var2) {
      Object var376;
      label3280: {
         if (var2 instanceof <undefinedtype>) {
            <undefinedtype> var4 = (<undefinedtype>)var2;
            if ((var4.label & Integer.MIN_VALUE) != 0) {
               var4.label += Integer.MIN_VALUE;
               var376 = var4;
               break label3280;
            }
         }

         var376 = new ContinuationImpl(var2) {
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            int label;
            Object result;

            public final Object invokeSuspend(Object var1) {
               this.result = var1;
               this.label |= Integer.MIN_VALUE;
               return ChannelsKt.count((ReceiveChannel)null, (Function1)null, this);
            }
         };
      }

      Throwable var373;
      ReceiveChannel var377;
      label3275: {
         Throwable var10000;
         label3283: {
            boolean var10001;
            Ref.IntRef var374;
            Throwable var378;
            label3273: {
               Object var12 = ((<undefinedtype>)var376).result;
               Object var5 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
               int var3 = ((<undefinedtype>)var376).label;
               ReceiveChannel var6;
               Function1 var7;
               ReceiveChannel var8;
               Object var9;
               ChannelIterator var10;
               ReceiveChannel var11;
               Object var375;
               Ref.IntRef var381;
               if (var3 != 0) {
                  if (var3 != 1) {
                     throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                  }

                  var10 = (ChannelIterator)((<undefinedtype>)var376).L$7;
                  var8 = (ReceiveChannel)((<undefinedtype>)var376).L$6;
                  var378 = (Throwable)((<undefinedtype>)var376).L$5;
                  var0 = (ReceiveChannel)((<undefinedtype>)var376).L$4;
                  var6 = (ReceiveChannel)((<undefinedtype>)var376).L$3;
                  var374 = (Ref.IntRef)((<undefinedtype>)var376).L$2;
                  var7 = (Function1)((<undefinedtype>)var376).L$1;
                  var11 = (ReceiveChannel)((<undefinedtype>)var376).L$0;

                  try {
                     ResultKt.throwOnFailure(var12);
                  } catch (Throwable var355) {
                     var377 = var0;
                     var373 = var355;
                     break label3275;
                  }

                  var9 = var376;
                  var377 = var0;

                  try {
                     if (!(Boolean)var12) {
                        break label3273;
                     }
                  } catch (Throwable var370) {
                     var10000 = var370;
                     var10001 = false;
                     break label3283;
                  }

                  var377 = var0;

                  label3285: {
                     try {
                        if (!(Boolean)var7.invoke(var10.next())) {
                           break label3285;
                        }
                     } catch (Throwable var371) {
                        var10000 = var371;
                        var10001 = false;
                        break label3283;
                     }

                     var377 = var0;

                     try {
                        ++var374.element;
                     } catch (Throwable var372) {
                        var10000 = var372;
                        var10001 = false;
                        break label3283;
                     }
                  }

                  var375 = var5;
                  var381 = var374;
               } else {
                  ResultKt.throwOnFailure(var12);
                  Ref.IntRef var379 = new Ref.IntRef();
                  var379.element = 0;
                  Throwable var382 = (Throwable)null;

                  try {
                     var10 = var0.iterator();
                  } catch (Throwable var356) {
                     var377 = var0;
                     var373 = var356;
                     break label3275;
                  }

                  var12 = null;
                  var6 = var0;
                  var9 = var376;
                  var11 = var0;
                  var381 = var379;
                  var378 = (Throwable)var12;
                  var375 = var5;
                  var7 = var1;
                  var8 = var0;
                  var0 = var0;
               }

               while(true) {
                  var377 = var0;

                  try {
                     ((<undefinedtype>)var9).L$0 = var11;
                  } catch (Throwable var366) {
                     var10000 = var366;
                     var10001 = false;
                     break label3283;
                  }

                  var377 = var0;

                  try {
                     ((<undefinedtype>)var9).L$1 = var7;
                  } catch (Throwable var365) {
                     var10000 = var365;
                     var10001 = false;
                     break label3283;
                  }

                  var377 = var0;

                  try {
                     ((<undefinedtype>)var9).L$2 = var381;
                  } catch (Throwable var364) {
                     var10000 = var364;
                     var10001 = false;
                     break label3283;
                  }

                  var377 = var0;

                  try {
                     ((<undefinedtype>)var9).L$3 = var6;
                  } catch (Throwable var363) {
                     var10000 = var363;
                     var10001 = false;
                     break label3283;
                  }

                  var377 = var0;

                  try {
                     ((<undefinedtype>)var9).L$4 = var0;
                  } catch (Throwable var362) {
                     var10000 = var362;
                     var10001 = false;
                     break label3283;
                  }

                  var377 = var0;

                  try {
                     ((<undefinedtype>)var9).L$5 = var378;
                  } catch (Throwable var361) {
                     var10000 = var361;
                     var10001 = false;
                     break label3283;
                  }

                  var377 = var0;

                  try {
                     ((<undefinedtype>)var9).L$6 = var8;
                  } catch (Throwable var360) {
                     var10000 = var360;
                     var10001 = false;
                     break label3283;
                  }

                  var377 = var0;

                  try {
                     ((<undefinedtype>)var9).L$7 = var10;
                  } catch (Throwable var359) {
                     var10000 = var359;
                     var10001 = false;
                     break label3283;
                  }

                  var377 = var0;

                  try {
                     ((<undefinedtype>)var9).label = 1;
                  } catch (Throwable var358) {
                     var10000 = var358;
                     var10001 = false;
                     break label3283;
                  }

                  var377 = var0;

                  try {
                     var12 = var10.hasNext((Continuation)var9);
                  } catch (Throwable var357) {
                     var10000 = var357;
                     var10001 = false;
                     break label3283;
                  }

                  if (var12 == var375) {
                     return var375;
                  }

                  var374 = var381;
                  var377 = var0;

                  try {
                     if (!(Boolean)var12) {
                        break;
                     }
                  } catch (Throwable var369) {
                     var10000 = var369;
                     var10001 = false;
                     break label3283;
                  }

                  var377 = var0;

                  label3288: {
                     try {
                        if (!(Boolean)var7.invoke(var10.next())) {
                           break label3288;
                        }
                     } catch (Throwable var368) {
                        var10000 = var368;
                        var10001 = false;
                        break label3283;
                     }

                     var377 = var0;

                     try {
                        ++var374.element;
                     } catch (Throwable var367) {
                        var10000 = var367;
                        var10001 = false;
                        break label3283;
                     }
                  }

                  var375 = var375;
                  var381 = var381;
               }
            }

            var377 = var0;

            try {
               Unit var383 = Unit.INSTANCE;
            } catch (Throwable var354) {
               var10000 = var354;
               var10001 = false;
               break label3283;
            }

            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, var378);
            InlineMarker.finallyEnd(1);
            return Boxing.boxInt(var374.element);
         }

         var373 = var10000;
      }

      try {
         throw var373;
      } finally {
         InlineMarker.finallyStart(1);
         ChannelsKt.cancelConsumed(var377, var373);
         InlineMarker.finallyEnd(1);
      }
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   private static final Object count$$forInline(ReceiveChannel var0, Function1 var1, Continuation var2) {
      Throwable var4 = (Throwable)null;

      int var3;
      label209: {
         Throwable var10000;
         label210: {
            ChannelIterator var5;
            boolean var10001;
            try {
               var5 = var0.iterator();
            } catch (Throwable var25) {
               var10000 = var25;
               var10001 = false;
               break label210;
            }

            var3 = 0;

            while(true) {
               try {
                  InlineMarker.mark(0);
                  Object var28 = var5.hasNext(var2);
                  InlineMarker.mark(1);
                  if (!(Boolean)var28) {
                     break;
                  }

                  if (!(Boolean)var1.invoke(var5.next())) {
                     continue;
                  }
               } catch (Throwable var24) {
                  var10000 = var24;
                  var10001 = false;
                  break label210;
               }

               ++var3;
            }

            label191:
            try {
               Unit var26 = Unit.INSTANCE;
               break label209;
            } catch (Throwable var23) {
               var10000 = var23;
               var10001 = false;
               break label191;
            }
         }

         Throwable var27 = var10000;

         try {
            throw var27;
         } finally {
            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, var27);
            InlineMarker.finallyEnd(1);
         }
      }

      InlineMarker.finallyStart(1);
      ChannelsKt.cancelConsumed(var0, (Throwable)null);
      InlineMarker.finallyEnd(1);
      return var3;
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final ReceiveChannel distinct(ReceiveChannel var0) {
      return ChannelsKt.distinctBy$default(var0, (CoroutineContext)null, (Function2)(new Function2((Continuation)null) {
         int label;
         private Object p$0;

         public final Continuation create(Object var1, Continuation var2) {
            Function2 var3 = new <anonymous constructor>(var2);
            var3.p$0 = var1;
            return var3;
         }

         public final Object invoke(Object var1, Object var2) {
            return ((<undefinedtype>)this.create(var1, (Continuation)var2)).invokeSuspend(Unit.INSTANCE);
         }

         public final Object invokeSuspend(Object var1) {
            IntrinsicsKt.getCOROUTINE_SUSPENDED();
            if (this.label == 0) {
               ResultKt.throwOnFailure(var1);
               return this.p$0;
            } else {
               throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
            }
         }
      }), 1, (Object)null);
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final ReceiveChannel distinctBy(ReceiveChannel var0, CoroutineContext var1, Function2 var2) {
      return ProduceKt.produce$default((CoroutineScope)GlobalScope.INSTANCE, var1, 0, (CoroutineStart)null, ChannelsKt.consumes(var0), (Function2)(new Function2(var0, var2, (Continuation)null) {
         final Function2 $selector;
         final ReceiveChannel $this_distinctBy;
         Object L$0;
         Object L$1;
         Object L$2;
         Object L$3;
         Object L$4;
         int label;
         private ProducerScope p$;

         {
            this.$this_distinctBy = var1;
            this.$selector = var2;
         }

         public final Continuation create(Object var1, Continuation var2) {
            Function2 var3 = new <anonymous constructor>(this.$this_distinctBy, this.$selector, var2);
            var3.p$ = (ProducerScope)var1;
            return var3;
         }

         public final Object invoke(Object var1, Object var2) {
            return ((<undefinedtype>)this.create(var1, (Continuation)var2)).invokeSuspend(Unit.INSTANCE);
         }

         public final Object invokeSuspend(Object var1) {
            Object var3 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
            int var2 = this.label;
            ChannelIterator var4;
            ProducerScope var5;
            HashSet var6;
            Object var7;
            ChannelIterator var10;
            Function2 var11;
            HashSet var12;
            <undefinedtype> var13;
            ProducerScope var14;
            ProducerScope var17;
            Object var18;
            if (var2 != 0) {
               if (var2 != 1) {
                  if (var2 != 2) {
                     if (var2 != 3) {
                        throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                     }

                     var7 = this.L$4;
                     var4 = (ChannelIterator)this.L$3;
                     var6 = (HashSet)this.L$1;
                     ProducerScope var8 = (ProducerScope)this.L$0;
                     ResultKt.throwOnFailure(var1);
                     ((Collection)var6).add(var7);
                     var5 = var8;
                     var10 = var4;
                     var12 = var6;
                     var13 = this;
                  } else {
                     var4 = (ChannelIterator)this.L$3;
                     var18 = this.L$2;
                     HashSet var16 = (HashSet)this.L$1;
                     var14 = (ProducerScope)this.L$0;
                     ResultKt.throwOnFailure(var1);
                     if (!var16.contains(var1)) {
                        this.L$0 = var14;
                        this.L$1 = var16;
                        this.L$2 = var18;
                        this.L$3 = var4;
                        this.L$4 = var1;
                        this.label = 3;
                        if (var14.send(var18, this) == var3) {
                           return var3;
                        }

                        ((Collection)var16).add(var1);
                        var5 = var14;
                        var10 = var4;
                        var12 = var16;
                        var13 = this;
                     } else {
                        var10 = var4;
                        var12 = var16;
                        var5 = var14;
                        var13 = this;
                     }
                  }
               } else {
                  var4 = (ChannelIterator)this.L$2;
                  var6 = (HashSet)this.L$1;
                  var17 = (ProducerScope)this.L$0;
                  ResultKt.throwOnFailure(var1);
                  if (!(Boolean)var1) {
                     return Unit.INSTANCE;
                  }

                  var18 = var4.next();
                  var11 = this.$selector;
                  this.L$0 = var17;
                  this.L$1 = var6;
                  this.L$2 = var18;
                  this.L$3 = var4;
                  this.label = 2;
                  var1 = var11.invoke(var18, this);
                  if (var1 == var3) {
                     return var3;
                  }

                  if (!var6.contains(var1)) {
                     this.L$0 = var17;
                     this.L$1 = var6;
                     this.L$2 = var18;
                     this.L$3 = var4;
                     this.L$4 = var1;
                     this.label = 3;
                     if (var17.send(var18, this) == var3) {
                        return var3;
                     }

                     ((Collection)var6).add(var1);
                     var5 = var17;
                     var10 = var4;
                     var12 = var6;
                     var13 = this;
                  } else {
                     var10 = var4;
                     var12 = var6;
                     var5 = var17;
                     var13 = this;
                  }
               }
            } else {
               ResultKt.throwOnFailure(var1);
               var5 = this.p$;
               var12 = new HashSet();
               var10 = this.$this_distinctBy.iterator();
               var13 = this;
            }

            while(true) {
               var13.L$0 = var5;
               var13.L$1 = var12;
               var13.L$2 = var10;
               var13.label = 1;
               var7 = var10.hasNext(var13);
               if (var7 == var3) {
                  return var3;
               }

               <undefinedtype> var20 = var13;
               ChannelIterator var9 = var10;
               var1 = var7;
               var17 = var5;
               var6 = var12;
               var4 = var9;
               <undefinedtype> var15 = var20;
               if (!(Boolean)var1) {
                  return Unit.INSTANCE;
               }

               var18 = var9.next();
               var11 = var15.$selector;
               var15.L$0 = var17;
               var15.L$1 = var6;
               var15.L$2 = var18;
               var15.L$3 = var9;
               var15.label = 2;
               var1 = var11.invoke(var18, var15);
               if (var1 == var3) {
                  return var3;
               }

               HashSet var21 = var6;
               var14 = var17;
               if (!var21.contains(var1)) {
                  var15.L$0 = var17;
                  var15.L$1 = var21;
                  var15.L$2 = var18;
                  var15.L$3 = var4;
                  var15.L$4 = var1;
                  var15.label = 3;
                  if (var17.send(var18, var15) == var3) {
                     return var3;
                  }

                  ((Collection)var21).add(var1);
                  <undefinedtype> var19 = var15;
                  var5 = var14;
                  var10 = var4;
                  var12 = var21;
                  var13 = var19;
               } else {
                  var20 = var15;
                  var10 = var4;
                  var12 = var21;
                  var5 = var17;
                  var13 = var20;
               }
            }
         }
      }), 6, (Object)null);
   }

   // $FF: synthetic method
   public static ReceiveChannel distinctBy$default(ReceiveChannel var0, CoroutineContext var1, Function2 var2, int var3, Object var4) {
      if ((var3 & 1) != 0) {
         var1 = (CoroutineContext)Dispatchers.getUnconfined();
      }

      return ChannelsKt.distinctBy(var0, var1, var2);
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final ReceiveChannel drop(ReceiveChannel var0, int var1, CoroutineContext var2) {
      return ProduceKt.produce$default((CoroutineScope)GlobalScope.INSTANCE, var2, 0, (CoroutineStart)null, ChannelsKt.consumes(var0), (Function2)(new Function2(var0, var1, (Continuation)null) {
         final int $n;
         final ReceiveChannel $this_drop;
         int I$0;
         Object L$0;
         Object L$1;
         Object L$2;
         int label;
         private ProducerScope p$;

         {
            this.$this_drop = var1;
            this.$n = var2;
         }

         public final Continuation create(Object var1, Continuation var2) {
            Function2 var3 = new <anonymous constructor>(this.$this_drop, this.$n, var2);
            var3.p$ = (ProducerScope)var1;
            return var3;
         }

         public final Object invoke(Object var1, Object var2) {
            return ((<undefinedtype>)this.create(var1, (Continuation)var2)).invokeSuspend(Unit.INSTANCE);
         }

         public final Object invokeSuspend(Object var1) {
            int var3;
            ProducerScope var9;
            <undefinedtype> var12;
            Object var14;
            ChannelIterator var15;
            label101: {
               Object var4 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
               int var2 = this.label;
               <undefinedtype> var5;
               ProducerScope var6;
               ChannelIterator var7;
               Object var18;
               if (var2 != 0) {
                  if (var2 != 1) {
                     if (var2 != 2) {
                        if (var2 != 3) {
                           throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }

                        var15 = (ChannelIterator)this.L$2;
                        var3 = this.I$0;
                        ProducerScope var13 = (ProducerScope)this.L$0;
                        ResultKt.throwOnFailure(var1);
                        var9 = var13;
                        var14 = var4;
                        var12 = this;
                     } else {
                        var15 = (ChannelIterator)this.L$1;
                        var2 = this.I$0;
                        ProducerScope var17 = (ProducerScope)this.L$0;
                        ResultKt.throwOnFailure(var1);
                        var14 = var4;
                        var12 = this;
                        if (!(Boolean)var1) {
                           return Unit.INSTANCE;
                        }

                        var1 = var15.next();
                        this.L$0 = var17;
                        this.I$0 = var2;
                        this.L$1 = var1;
                        this.L$2 = var15;
                        this.label = 3;
                        if (var17.send(var1, this) == var4) {
                           return var4;
                        }

                        var9 = var17;
                        var3 = var2;
                     }
                     break label101;
                  }

                  var7 = (ChannelIterator)this.L$1;
                  var2 = this.I$0;
                  var6 = (ProducerScope)this.L$0;
                  ResultKt.throwOnFailure(var1);
                  var5 = this;
               } else {
                  ResultKt.throwOnFailure(var1);
                  var9 = this.p$;
                  var2 = this.$n;
                  boolean var11;
                  if (var2 >= 0) {
                     var11 = true;
                  } else {
                     var11 = false;
                  }

                  if (!var11) {
                     throw (Throwable)(new IllegalArgumentException(("Requested element count " + this.$n + " is less than zero.").toString()));
                  }

                  if (var2 <= 0) {
                     var3 = var2;
                     var15 = this.$this_drop.iterator();
                     var14 = var4;
                     var12 = this;
                     break label101;
                  }

                  var7 = this.$this_drop.iterator();
                  this.L$0 = var9;
                  this.I$0 = var2;
                  this.L$1 = var7;
                  this.label = 1;
                  var18 = var7.hasNext(this);
                  if (var18 == var4) {
                     return var4;
                  }

                  var7 = var7;
                  var1 = var18;
                  var6 = var9;
                  var5 = this;
               }

               while(true) {
                  var3 = var2;
                  if (!(Boolean)var1) {
                     var9 = var6;
                     var15 = var5.$this_drop.iterator();
                     var14 = var4;
                     var12 = var5;
                     break;
                  }

                  var7.next();
                  --var2;
                  if (var2 == 0) {
                     var3 = var2;
                     var9 = var6;
                     var15 = var5.$this_drop.iterator();
                     var14 = var4;
                     var12 = var5;
                     break;
                  }

                  var5.L$0 = var6;
                  var5.I$0 = var2;
                  var5.L$1 = var7;
                  var5.label = 1;
                  var18 = var7.hasNext(var5);
                  if (var18 == var4) {
                     return var4;
                  }

                  var7 = var7;
                  var1 = var18;
                  var6 = var6;
                  var5 = var5;
               }
            }

            while(true) {
               var12.L$0 = var9;
               var12.I$0 = var3;
               var12.L$1 = var15;
               var12.label = 2;
               Object var21 = var15.hasNext(var12);
               if (var21 == var14) {
                  return var14;
               }

               if (!(Boolean)var21) {
                  return Unit.INSTANCE;
               }

               var1 = var15.next();
               var12.L$0 = var9;
               var12.I$0 = var3;
               var12.L$1 = var1;
               var12.L$2 = var15;
               var12.label = 3;
               if (var9.send(var1, var12) == var14) {
                  return var14;
               }

               var9 = var9;
               var3 = var3;
            }
         }
      }), 6, (Object)null);
   }

   // $FF: synthetic method
   public static ReceiveChannel drop$default(ReceiveChannel var0, int var1, CoroutineContext var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = (CoroutineContext)Dispatchers.getUnconfined();
      }

      return ChannelsKt.drop(var0, var1, var2);
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final ReceiveChannel dropWhile(ReceiveChannel var0, CoroutineContext var1, Function2 var2) {
      return ProduceKt.produce$default((CoroutineScope)GlobalScope.INSTANCE, var1, 0, (CoroutineStart)null, ChannelsKt.consumes(var0), (Function2)(new Function2(var0, var2, (Continuation)null) {
         final Function2 $predicate;
         final ReceiveChannel $this_dropWhile;
         Object L$0;
         Object L$1;
         Object L$2;
         int label;
         private ProducerScope p$;

         {
            this.$this_dropWhile = var1;
            this.$predicate = var2;
         }

         public final Continuation create(Object var1, Continuation var2) {
            Function2 var3 = new <anonymous constructor>(this.$this_dropWhile, this.$predicate, var2);
            var3.p$ = (ProducerScope)var1;
            return var3;
         }

         public final Object invoke(Object var1, Object var2) {
            return ((<undefinedtype>)this.create(var1, (Continuation)var2)).invokeSuspend(Unit.INSTANCE);
         }

         public final Object invokeSuspend(Object var1) {
            Object var6;
            ProducerScope var7;
            <undefinedtype> var10;
            ChannelIterator var13;
            label118: {
               Object var3 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
               int var2 = this.label;
               Object var4;
               ProducerScope var5;
               ChannelIterator var8;
               Object var9;
               <undefinedtype> var12;
               if (var2 != 0) {
                  if (var2 != 1) {
                     if (var2 != 2) {
                        if (var2 != 3) {
                           if (var2 != 4) {
                              if (var2 != 5) {
                                 throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                              }

                              ChannelIterator var15 = (ChannelIterator)this.L$2;
                              var7 = (ProducerScope)this.L$0;
                              ResultKt.throwOnFailure(var1);
                              var10 = this;
                              var6 = var3;
                              var13 = var15;
                           } else {
                              ChannelIterator var17 = (ChannelIterator)this.L$1;
                              var7 = (ProducerScope)this.L$0;
                              ResultKt.throwOnFailure(var1);
                              var6 = var3;
                              var13 = var17;
                              if (!(Boolean)var1) {
                                 return Unit.INSTANCE;
                              }

                              var1 = var17.next();
                              this.L$0 = var7;
                              this.L$1 = var1;
                              this.L$2 = var17;
                              this.label = 5;
                              if (var7.send(var1, this) == var6) {
                                 return var6;
                              }

                              var10 = this;
                           }
                        } else {
                           var7 = (ProducerScope)this.L$0;
                           ResultKt.throwOnFailure(var1);
                           var10 = this;
                           var6 = var3;
                           var13 = this.$this_dropWhile.iterator();
                        }
                        break label118;
                     }

                     var8 = (ChannelIterator)this.L$2;
                     var9 = this.L$1;
                     var5 = (ProducerScope)this.L$0;
                     ResultKt.throwOnFailure(var1);
                     if (!(Boolean)var1) {
                        this.L$0 = var5;
                        this.L$1 = var9;
                        this.label = 3;
                        var10 = this;
                        var6 = var3;
                        var7 = var5;
                        if (var5.send(var9, this) == var3) {
                           return var3;
                        }

                        var13 = this.$this_dropWhile.iterator();
                        break label118;
                     }

                     this.L$0 = var5;
                     this.L$1 = var8;
                     this.label = 1;
                     var9 = var8.hasNext(this);
                     if (var9 == var3) {
                        return var3;
                     }

                     var5 = var5;
                     var8 = var8;
                     var4 = var3;
                     var12 = this;
                  } else {
                     var8 = (ChannelIterator)this.L$1;
                     var5 = (ProducerScope)this.L$0;
                     ResultKt.throwOnFailure(var1);
                     var4 = var3;
                     var12 = this;
                     var9 = var1;
                  }
               } else {
                  ResultKt.throwOnFailure(var1);
                  ProducerScope var16 = this.p$;
                  ChannelIterator var11 = this.$this_dropWhile.iterator();
                  this.L$0 = var16;
                  this.L$1 = var11;
                  this.label = 1;
                  var9 = var11.hasNext(this);
                  if (var9 == var3) {
                     return var3;
                  }

                  var5 = var16;
                  var8 = var11;
                  var4 = var3;
                  var12 = this;
               }

               while(true) {
                  var10 = var12;
                  var6 = var4;
                  var7 = var5;
                  if (!(Boolean)var9) {
                     var13 = var12.$this_dropWhile.iterator();
                     break;
                  }

                  var9 = var8.next();
                  Function2 var14 = var12.$predicate;
                  var12.L$0 = var5;
                  var12.L$1 = var9;
                  var12.L$2 = var8;
                  var12.label = 2;
                  var1 = var14.invoke(var9, var12);
                  if (var1 == var4) {
                     return var4;
                  }

                  if (!(Boolean)var1) {
                     var12.L$0 = var5;
                     var12.L$1 = var9;
                     var12.label = 3;
                     var10 = var12;
                     var6 = var4;
                     var7 = var5;
                     if (var5.send(var9, var12) == var4) {
                        return var4;
                     }

                     var13 = var12.$this_dropWhile.iterator();
                     break;
                  }

                  var12.L$0 = var5;
                  var12.L$1 = var8;
                  var12.label = 1;
                  var9 = var8.hasNext(var12);
                  if (var9 == var4) {
                     return var4;
                  }

                  var5 = var5;
                  var8 = var8;
                  var4 = var4;
                  var12 = var12;
               }
            }

            while(true) {
               var10.L$0 = var7;
               var10.L$1 = var13;
               var10.label = 4;
               Object var19 = var13.hasNext(var10);
               if (var19 == var6) {
                  return var6;
               }

               <undefinedtype> var18 = var10;
               if (!(Boolean)var19) {
                  return Unit.INSTANCE;
               }

               var1 = var13.next();
               var18.L$0 = var7;
               var18.L$1 = var1;
               var18.L$2 = var13;
               var18.label = 5;
               if (var7.send(var1, var18) == var6) {
                  return var6;
               }

               var10 = var18;
            }
         }
      }), 6, (Object)null);
   }

   // $FF: synthetic method
   public static ReceiveChannel dropWhile$default(ReceiveChannel var0, CoroutineContext var1, Function2 var2, int var3, Object var4) {
      if ((var3 & 1) != 0) {
         var1 = (CoroutineContext)Dispatchers.getUnconfined();
      }

      return ChannelsKt.dropWhile(var0, var1, var2);
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object elementAt(ReceiveChannel var0, int var1, Continuation var2) {
      Object var704;
      label6178: {
         if (var2 instanceof <undefinedtype>) {
            <undefinedtype> var5 = (<undefinedtype>)var2;
            if ((var5.label & Integer.MIN_VALUE) != 0) {
               var5.label += Integer.MIN_VALUE;
               var704 = var5;
               break label6178;
            }
         }

         var704 = new ContinuationImpl(var2) {
            int I$0;
            int I$1;
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            int label;
            Object result;

            public final Object invokeSuspend(Object var1) {
               this.result = var1;
               this.label |= Integer.MIN_VALUE;
               return ChannelsKt.elementAt((ReceiveChannel)null, 0, this);
            }
         };
      }

      Throwable var703;
      ReceiveChannel var705;
      label6173: {
         Throwable var10000;
         label6172: {
            Throwable var710;
            label6171: {
               Object var12 = ((<undefinedtype>)var704).result;
               Object var11 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
               int var3 = ((<undefinedtype>)var704).label;
               ReceiveChannel var7;
               Throwable var8;
               ReceiveChannel var9;
               Object var10;
               boolean var10001;
               ChannelIterator var706;
               ReceiveChannel var707;
               ChannelIterator var708;
               StringBuilder var709;
               IndexOutOfBoundsException var711;
               if (var3 != 0) {
                  label6181: {
                     if (var3 != 1) {
                        throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                     }

                     var1 = ((<undefinedtype>)var704).I$1;
                     var706 = (ChannelIterator)((<undefinedtype>)var704).L$5;
                     var9 = (ReceiveChannel)((<undefinedtype>)var704).L$4;
                     var8 = (Throwable)((<undefinedtype>)var704).L$3;
                     var0 = (ReceiveChannel)((<undefinedtype>)var704).L$2;
                     var7 = (ReceiveChannel)((<undefinedtype>)var704).L$1;
                     var3 = ((<undefinedtype>)var704).I$0;
                     ReceiveChannel var6 = (ReceiveChannel)((<undefinedtype>)var704).L$0;

                     try {
                        ResultKt.throwOnFailure(var12);
                     } catch (Throwable var676) {
                        var703 = var676;
                        var705 = var0;
                        break label6173;
                     }

                     var10 = var704;
                     var705 = var0;

                     label6182: {
                        try {
                           if (!(Boolean)var12) {
                              break label6182;
                           }
                        } catch (Throwable var695) {
                           var10000 = var695;
                           var10001 = false;
                           break label6172;
                        }

                        var705 = var0;

                        try {
                           var12 = var706.next();
                        } catch (Throwable var696) {
                           var10000 = var696;
                           var10001 = false;
                           break label6172;
                        }

                        if (var3 == var1) {
                           ChannelsKt.cancelConsumed(var0, var8);
                           return var12;
                        }

                        var705 = var7;
                        var7 = var6;
                        var708 = var706;
                        ++var1;
                        var707 = var705;
                        break label6181;
                     }

                     var705 = var0;

                     try {
                        ((Number)Boxing.boxInt(var3)).intValue();
                     } catch (Throwable var697) {
                        var10000 = var697;
                        var10001 = false;
                        break label6172;
                     }

                     var705 = var0;

                     try {
                        var711 = new IndexOutOfBoundsException;
                     } catch (Throwable var698) {
                        var10000 = var698;
                        var10001 = false;
                        break label6172;
                     }

                     var705 = var0;

                     try {
                        var709 = new StringBuilder;
                     } catch (Throwable var699) {
                        var10000 = var699;
                        var10001 = false;
                        break label6172;
                     }

                     var705 = var0;

                     try {
                        var709.<init>();
                     } catch (Throwable var700) {
                        var10000 = var700;
                        var10001 = false;
                        break label6172;
                     }

                     var705 = var0;

                     try {
                        var711.<init>(var709.append("ReceiveChannel doesn't contain element at index ").append(var3).append('.').toString());
                     } catch (Throwable var701) {
                        var10000 = var701;
                        var10001 = false;
                        break label6172;
                     }

                     var705 = var0;

                     try {
                        throw (Throwable)var711;
                     } catch (Throwable var702) {
                        var10000 = var702;
                        var10001 = false;
                        break label6172;
                     }
                  }
               } else {
                  ResultKt.throwOnFailure(var12);
                  var710 = (Throwable)null;
                  if (var1 < 0) {
                     try {
                        ((Number)Boxing.boxInt(var1)).intValue();
                        StringBuilder var714 = new StringBuilder();
                        IndexOutOfBoundsException var712 = new IndexOutOfBoundsException(var714.append("ReceiveChannel doesn't contain element at index ").append(var1).append('.').toString());
                        throw (Throwable)var712;
                     } catch (Throwable var675) {
                        var10000 = var675;
                        var10001 = false;
                        break label6171;
                     }
                  }

                  try {
                     var708 = var0.iterator();
                  } catch (Throwable var694) {
                     var10000 = var694;
                     var10001 = false;
                     break label6171;
                  }

                  var8 = null;
                  var10 = var704;
                  var707 = var0;
                  var0 = var0;
                  byte var4 = 0;
                  var3 = var1;
                  var7 = var0;
                  var1 = var4;
                  var9 = var0;
               }

               while(true) {
                  var705 = var0;

                  try {
                     ((<undefinedtype>)var10).L$0 = var7;
                  } catch (Throwable var691) {
                     var10000 = var691;
                     var10001 = false;
                     break label6172;
                  }

                  var705 = var0;

                  try {
                     ((<undefinedtype>)var10).I$0 = var3;
                  } catch (Throwable var690) {
                     var10000 = var690;
                     var10001 = false;
                     break label6172;
                  }

                  var705 = var0;

                  try {
                     ((<undefinedtype>)var10).L$1 = var707;
                  } catch (Throwable var689) {
                     var10000 = var689;
                     var10001 = false;
                     break label6172;
                  }

                  var705 = var0;

                  try {
                     ((<undefinedtype>)var10).L$2 = var0;
                  } catch (Throwable var688) {
                     var10000 = var688;
                     var10001 = false;
                     break label6172;
                  }

                  var705 = var0;

                  try {
                     ((<undefinedtype>)var10).L$3 = var8;
                  } catch (Throwable var687) {
                     var10000 = var687;
                     var10001 = false;
                     break label6172;
                  }

                  var705 = var0;

                  try {
                     ((<undefinedtype>)var10).L$4 = var9;
                  } catch (Throwable var686) {
                     var10000 = var686;
                     var10001 = false;
                     break label6172;
                  }

                  var705 = var0;

                  try {
                     ((<undefinedtype>)var10).L$5 = var708;
                  } catch (Throwable var685) {
                     var10000 = var685;
                     var10001 = false;
                     break label6172;
                  }

                  var705 = var0;

                  try {
                     ((<undefinedtype>)var10).I$1 = var1;
                  } catch (Throwable var684) {
                     var10000 = var684;
                     var10001 = false;
                     break label6172;
                  }

                  var705 = var0;

                  try {
                     ((<undefinedtype>)var10).label = 1;
                  } catch (Throwable var683) {
                     var10000 = var683;
                     var10001 = false;
                     break label6172;
                  }

                  var705 = var0;

                  try {
                     var12 = var708.hasNext((Continuation)var10);
                  } catch (Throwable var682) {
                     var10000 = var682;
                     var10001 = false;
                     break label6172;
                  }

                  if (var12 == var11) {
                     return var11;
                  }

                  var706 = var708;
                  var705 = var0;

                  label6185: {
                     try {
                        if (!(Boolean)var12) {
                           break label6185;
                        }
                     } catch (Throwable var693) {
                        var10000 = var693;
                        var10001 = false;
                        break label6172;
                     }

                     var705 = var0;

                     try {
                        var12 = var706.next();
                     } catch (Throwable var692) {
                        var10000 = var692;
                        var10001 = false;
                        break label6172;
                     }

                     if (var3 == var1) {
                        ChannelsKt.cancelConsumed(var0, var8);
                        return var12;
                     }

                     var7 = var7;
                     var708 = var708;
                     ++var1;
                     var707 = var707;
                     continue;
                  }

                  var705 = var0;

                  try {
                     ((Number)Boxing.boxInt(var3)).intValue();
                  } catch (Throwable var681) {
                     var10000 = var681;
                     var10001 = false;
                     break label6172;
                  }

                  var705 = var0;

                  try {
                     var711 = new IndexOutOfBoundsException;
                  } catch (Throwable var680) {
                     var10000 = var680;
                     var10001 = false;
                     break label6172;
                  }

                  var705 = var0;

                  try {
                     var709 = new StringBuilder;
                  } catch (Throwable var679) {
                     var10000 = var679;
                     var10001 = false;
                     break label6172;
                  }

                  var705 = var0;

                  try {
                     var709.<init>();
                  } catch (Throwable var678) {
                     var10000 = var678;
                     var10001 = false;
                     break label6172;
                  }

                  var705 = var0;

                  try {
                     var711.<init>(var709.append("ReceiveChannel doesn't contain element at index ").append(var3).append('.').toString());
                  } catch (Throwable var677) {
                     var10000 = var677;
                     var10001 = false;
                     break label6172;
                  }

                  var705 = var0;

                  try {
                     throw (Throwable)var711;
                  } catch (Throwable var674) {
                     var10000 = var674;
                     var10001 = false;
                     break label6172;
                  }
               }
            }

            var710 = var10000;
            var705 = var0;
            var703 = var710;
            break label6173;
         }

         var703 = var10000;
      }

      try {
         throw var703;
      } finally {
         ChannelsKt.cancelConsumed(var705, var703);
      }
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object elementAtOrElse(ReceiveChannel var0, int var1, Function1 var2, Continuation var3) {
      Object var376;
      label3549: {
         if (var3 instanceof <undefinedtype>) {
            <undefinedtype> var5 = (<undefinedtype>)var3;
            if ((var5.label & Integer.MIN_VALUE) != 0) {
               var5.label += Integer.MIN_VALUE;
               var376 = var5;
               break label3549;
            }
         }

         var376 = new ContinuationImpl(var3) {
            int I$0;
            int I$1;
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            int label;
            Object result;

            public final Object invokeSuspend(Object var1) {
               this.result = var1;
               this.label |= Integer.MIN_VALUE;
               return ChannelsKt.elementAtOrElse((ReceiveChannel)null, 0, (Function1)null, this);
            }
         };
      }

      Throwable var373;
      ReceiveChannel var375;
      label3544: {
         Throwable var10000;
         label3543: {
            label3542: {
               Object var11 = ((<undefinedtype>)var376).result;
               Object var8 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
               int var4 = ((<undefinedtype>)var376).label;
               ReceiveChannel var6;
               Function1 var7;
               Object var9;
               ChannelIterator var10;
               boolean var10001;
               ReceiveChannel var377;
               Throwable var380;
               Object var381;
               if (var4 != 0) {
                  label3552: {
                     if (var4 != 1) {
                        throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                     }

                     var10 = (ChannelIterator)((<undefinedtype>)var376).L$5;
                     var4 = ((<undefinedtype>)var376).I$1;
                     var6 = (ReceiveChannel)((<undefinedtype>)var376).L$4;
                     Throwable var374 = (Throwable)((<undefinedtype>)var376).L$3;
                     var0 = (ReceiveChannel)((<undefinedtype>)var376).L$2;
                     var7 = (Function1)((<undefinedtype>)var376).L$1;
                     var1 = ((<undefinedtype>)var376).I$0;
                     ReceiveChannel var379 = (ReceiveChannel)((<undefinedtype>)var376).L$0;

                     try {
                        ResultKt.throwOnFailure(var11);
                     } catch (Throwable var356) {
                        var373 = var356;
                        var375 = var0;
                        break label3544;
                     }

                     var9 = var376;
                     var375 = var0;

                     label3553: {
                        try {
                           if (!(Boolean)var11) {
                              break label3553;
                           }
                        } catch (Throwable var370) {
                           var10000 = var370;
                           var10001 = false;
                           break label3543;
                        }

                        var375 = var0;

                        try {
                           var11 = var10.next();
                        } catch (Throwable var371) {
                           var10000 = var371;
                           var10001 = false;
                           break label3543;
                        }

                        if (var1 == var4) {
                           InlineMarker.finallyStart(3);
                           ChannelsKt.cancelConsumed(var0, var374);
                           InlineMarker.finallyEnd(3);
                           return var11;
                        }

                        var375 = var6;
                        var6 = var379;
                        ++var4;
                        var380 = var374;
                        var377 = var375;
                        break label3552;
                     }

                     var375 = var0;

                     try {
                        var381 = var7.invoke(Boxing.boxInt(var1));
                     } catch (Throwable var372) {
                        var10000 = var372;
                        var10001 = false;
                        break label3543;
                     }

                     InlineMarker.finallyStart(2);
                     ChannelsKt.cancelConsumed(var0, var374);
                     InlineMarker.finallyEnd(2);
                     return var381;
                  }
               } else {
                  ResultKt.throwOnFailure(var11);
                  var380 = (Throwable)null;
                  if (var1 < 0) {
                     Object var382;
                     try {
                        var382 = var2.invoke(Boxing.boxInt(var1));
                     } catch (Throwable var354) {
                        var10000 = var354;
                        var10001 = false;
                        break label3542;
                     }

                     InlineMarker.finallyStart(4);
                     ChannelsKt.cancelConsumed(var0, (Throwable)null);
                     InlineMarker.finallyEnd(4);
                     return var382;
                  }

                  var4 = 0;

                  try {
                     var10 = var0.iterator();
                  } catch (Throwable var369) {
                     var10000 = var369;
                     var10001 = false;
                     break label3542;
                  }

                  var380 = null;
                  var7 = var2;
                  var9 = var376;
                  var6 = var0;
                  var377 = var0;
                  var0 = var0;
               }

               while(true) {
                  var375 = var0;

                  try {
                     ((<undefinedtype>)var9).L$0 = var6;
                  } catch (Throwable var366) {
                     var10000 = var366;
                     var10001 = false;
                     break label3543;
                  }

                  var375 = var0;

                  try {
                     ((<undefinedtype>)var9).I$0 = var1;
                  } catch (Throwable var365) {
                     var10000 = var365;
                     var10001 = false;
                     break label3543;
                  }

                  var375 = var0;

                  try {
                     ((<undefinedtype>)var9).L$1 = var7;
                  } catch (Throwable var364) {
                     var10000 = var364;
                     var10001 = false;
                     break label3543;
                  }

                  var375 = var0;

                  try {
                     ((<undefinedtype>)var9).L$2 = var0;
                  } catch (Throwable var363) {
                     var10000 = var363;
                     var10001 = false;
                     break label3543;
                  }

                  var375 = var0;

                  try {
                     ((<undefinedtype>)var9).L$3 = var380;
                  } catch (Throwable var362) {
                     var10000 = var362;
                     var10001 = false;
                     break label3543;
                  }

                  var375 = var0;

                  try {
                     ((<undefinedtype>)var9).L$4 = var377;
                  } catch (Throwable var361) {
                     var10000 = var361;
                     var10001 = false;
                     break label3543;
                  }

                  var375 = var0;

                  try {
                     ((<undefinedtype>)var9).I$1 = var4;
                  } catch (Throwable var360) {
                     var10000 = var360;
                     var10001 = false;
                     break label3543;
                  }

                  var375 = var0;

                  try {
                     ((<undefinedtype>)var9).L$5 = var10;
                  } catch (Throwable var359) {
                     var10000 = var359;
                     var10001 = false;
                     break label3543;
                  }

                  var375 = var0;

                  try {
                     ((<undefinedtype>)var9).label = 1;
                  } catch (Throwable var358) {
                     var10000 = var358;
                     var10001 = false;
                     break label3543;
                  }

                  var375 = var0;

                  try {
                     var11 = var10.hasNext((Continuation)var9);
                  } catch (Throwable var357) {
                     var10000 = var357;
                     var10001 = false;
                     break label3543;
                  }

                  if (var11 == var8) {
                     return var8;
                  }

                  var375 = var0;

                  label3556: {
                     try {
                        if (!(Boolean)var11) {
                           break label3556;
                        }
                     } catch (Throwable var368) {
                        var10000 = var368;
                        var10001 = false;
                        break label3543;
                     }

                     var375 = var0;

                     try {
                        var11 = var10.next();
                     } catch (Throwable var367) {
                        var10000 = var367;
                        var10001 = false;
                        break label3543;
                     }

                     if (var1 == var4) {
                        InlineMarker.finallyStart(3);
                        ChannelsKt.cancelConsumed(var0, var380);
                        InlineMarker.finallyEnd(3);
                        return var11;
                     }

                     var6 = var6;
                     ++var4;
                     var380 = var380;
                     var377 = var377;
                     continue;
                  }

                  var375 = var0;

                  try {
                     var381 = var7.invoke(Boxing.boxInt(var1));
                  } catch (Throwable var355) {
                     var10000 = var355;
                     var10001 = false;
                     break label3543;
                  }

                  InlineMarker.finallyStart(2);
                  ChannelsKt.cancelConsumed(var0, var380);
                  InlineMarker.finallyEnd(2);
                  return var381;
               }
            }

            Throwable var378 = var10000;
            var375 = var0;
            var373 = var378;
            break label3544;
         }

         var373 = var10000;
      }

      try {
         throw var373;
      } finally {
         InlineMarker.finallyStart(1);
         ChannelsKt.cancelConsumed(var375, var373);
         InlineMarker.finallyEnd(1);
      }
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   private static final Object elementAtOrElse$$forInline(ReceiveChannel var0, int var1, Function1 var2, Continuation var3) {
      byte var37;
      Object var38;
      label316: {
         Throwable var5 = (Throwable)null;
         Throwable var10000;
         boolean var10001;
         if (var1 < 0) {
            label297: {
               try {
                  var38 = var2.invoke(var1);
               } catch (Throwable var33) {
                  var10000 = var33;
                  var10001 = false;
                  break label297;
               }

               var37 = 4;
               InlineMarker.finallyStart(4);
               break label316;
            }
         } else {
            label317: {
               ChannelIterator var40;
               try {
                  var40 = var0.iterator();
               } catch (Throwable var36) {
                  var10000 = var36;
                  var10001 = false;
                  break label317;
               }

               int var4 = 0;

               while(true) {
                  Object var6;
                  try {
                     InlineMarker.mark(0);
                     var6 = var40.hasNext(var3);
                     InlineMarker.mark(1);
                     if (!(Boolean)var6) {
                        break;
                     }

                     var6 = var40.next();
                  } catch (Throwable var35) {
                     var10000 = var35;
                     var10001 = false;
                     break label317;
                  }

                  if (var1 == var4) {
                     InlineMarker.finallyStart(3);
                     ChannelsKt.cancelConsumed(var0, (Throwable)null);
                     InlineMarker.finallyEnd(3);
                     return var6;
                  }

                  ++var4;
               }

               try {
                  var38 = var2.invoke(var1);
               } catch (Throwable var34) {
                  var10000 = var34;
                  var10001 = false;
                  break label317;
               }

               var37 = 2;
               InlineMarker.finallyStart(2);
               break label316;
            }
         }

         Throwable var39 = var10000;

         try {
            throw var39;
         } finally {
            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, var39);
            InlineMarker.finallyEnd(1);
         }
      }

      ChannelsKt.cancelConsumed(var0, (Throwable)null);
      InlineMarker.finallyEnd(var37);
      return var38;
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object elementAtOrNull(ReceiveChannel param0, int param1, Continuation param2) {
      // $FF: Couldn't be decompiled
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final ReceiveChannel filter(ReceiveChannel var0, CoroutineContext var1, Function2 var2) {
      return ProduceKt.produce$default((CoroutineScope)GlobalScope.INSTANCE, var1, 0, (CoroutineStart)null, ChannelsKt.consumes(var0), (Function2)(new Function2(var0, var2, (Continuation)null) {
         final Function2 $predicate;
         final ReceiveChannel $this_filter;
         Object L$0;
         Object L$1;
         Object L$2;
         int label;
         private ProducerScope p$;

         {
            this.$this_filter = var1;
            this.$predicate = var2;
         }

         public final Continuation create(Object var1, Continuation var2) {
            Function2 var3 = new <anonymous constructor>(this.$this_filter, this.$predicate, var2);
            var3.p$ = (ProducerScope)var1;
            return var3;
         }

         public final Object invoke(Object var1, Object var2) {
            return ((<undefinedtype>)this.create(var1, (Continuation)var2)).invokeSuspend(Unit.INSTANCE);
         }

         public final Object invokeSuspend(Object var1) {
            Object var3 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
            int var2 = this.label;
            ProducerScope var4;
            ChannelIterator var5;
            ProducerScope var6;
            Object var7;
            ChannelIterator var8;
            <undefinedtype> var10;
            ChannelIterator var11;
            Object var12;
            Object var14;
            Object var15;
            <undefinedtype> var16;
            if (var2 != 0) {
               if (var2 != 1) {
                  <undefinedtype> var13;
                  if (var2 != 2) {
                     if (var2 != 3) {
                        throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                     }

                     var5 = (ChannelIterator)this.L$2;
                     var4 = (ProducerScope)this.L$0;
                     ResultKt.throwOnFailure(var1);
                     var8 = var5;
                     var13 = this;
                  } else {
                     var5 = (ChannelIterator)this.L$2;
                     var7 = this.L$1;
                     var6 = (ProducerScope)this.L$0;
                     ResultKt.throwOnFailure(var1);
                     if ((Boolean)var1) {
                        this.L$0 = var6;
                        this.L$1 = var7;
                        this.L$2 = var5;
                        this.label = 3;
                        if (var6.send(var7, this) == var3) {
                           return var3;
                        }
                     }

                     var3 = var3;
                     var8 = var5;
                     var4 = var6;
                     var13 = this;
                  }

                  var13.L$0 = var4;
                  var13.L$1 = var8;
                  var13.label = 1;
                  var14 = var8.hasNext(var13);
                  if (var14 == var3) {
                     return var3;
                  }

                  var16 = var13;
                  var15 = var14;
                  var6 = var4;
                  var11 = var8;
                  var1 = var15;
                  var5 = var11;
                  var12 = var3;
                  var10 = var16;
               } else {
                  var5 = (ChannelIterator)this.L$1;
                  var6 = (ProducerScope)this.L$0;
                  ResultKt.throwOnFailure(var1);
                  var12 = var3;
                  var10 = this;
               }
            } else {
               ResultKt.throwOnFailure(var1);
               var4 = this.p$;
               var8 = this.$this_filter.iterator();
               this.L$0 = var4;
               this.L$1 = var8;
               this.label = 1;
               var14 = var8.hasNext(this);
               if (var14 == var3) {
                  return var3;
               }

               var15 = var14;
               var6 = var4;
               var11 = var8;
               var1 = var15;
               var5 = var11;
               var12 = var3;
               var10 = this;
            }

            while((Boolean)var1) {
               var7 = var5.next();
               Function2 var9 = var10.$predicate;
               var10.L$0 = var6;
               var10.L$1 = var7;
               var10.L$2 = var5;
               var10.label = 2;
               var1 = var9.invoke(var7, var10);
               if (var1 == var12) {
                  return var12;
               }

               if ((Boolean)var1) {
                  var10.L$0 = var6;
                  var10.L$1 = var7;
                  var10.L$2 = var5;
                  var10.label = 3;
                  if (var6.send(var7, var10) == var12) {
                     return var12;
                  }
               }

               var16 = var10;
               var3 = var12;
               var8 = var5;
               var4 = var6;
               var16.L$0 = var6;
               var16.L$1 = var5;
               var16.label = 1;
               var14 = var5.hasNext(var16);
               if (var14 == var3) {
                  return var3;
               }

               var15 = var14;
               var6 = var4;
               var11 = var8;
               var1 = var15;
               var5 = var11;
               var12 = var3;
               var10 = var16;
            }

            return Unit.INSTANCE;
         }
      }), 6, (Object)null);
   }

   // $FF: synthetic method
   public static ReceiveChannel filter$default(ReceiveChannel var0, CoroutineContext var1, Function2 var2, int var3, Object var4) {
      if ((var3 & 1) != 0) {
         var1 = (CoroutineContext)Dispatchers.getUnconfined();
      }

      return ChannelsKt.filter(var0, var1, var2);
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final ReceiveChannel filterIndexed(ReceiveChannel var0, CoroutineContext var1, Function3 var2) {
      return ProduceKt.produce$default((CoroutineScope)GlobalScope.INSTANCE, var1, 0, (CoroutineStart)null, ChannelsKt.consumes(var0), (Function2)(new Function2(var0, var2, (Continuation)null) {
         final Function3 $predicate;
         final ReceiveChannel $this_filterIndexed;
         int I$0;
         Object L$0;
         Object L$1;
         Object L$2;
         int label;
         private ProducerScope p$;

         {
            this.$this_filterIndexed = var1;
            this.$predicate = var2;
         }

         public final Continuation create(Object var1, Continuation var2) {
            Function2 var3 = new <anonymous constructor>(this.$this_filterIndexed, this.$predicate, var2);
            var3.p$ = (ProducerScope)var1;
            return var3;
         }

         public final Object invoke(Object var1, Object var2) {
            return ((<undefinedtype>)this.create(var1, (Continuation)var2)).invokeSuspend(Unit.INSTANCE);
         }

         public final Object invokeSuspend(Object var1) {
            Object var5 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
            int var2 = this.label;
            ProducerScope var3;
            Object var7;
            ChannelIterator var9;
            <undefinedtype> var11;
            Object var12;
            ChannelIterator var13;
            ProducerScope var14;
            Object var15;
            if (var2 != 0) {
               if (var2 != 1) {
                  <undefinedtype> var4;
                  if (var2 != 2) {
                     if (var2 != 3) {
                        throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                     }

                     ChannelIterator var6 = (ChannelIterator)this.L$2;
                     var2 = this.I$0;
                     var3 = (ProducerScope)this.L$0;
                     ResultKt.throwOnFailure(var1);
                     var4 = this;
                     var9 = var6;
                  } else {
                     ChannelIterator var8 = (ChannelIterator)this.L$2;
                     var7 = this.L$1;
                     var2 = this.I$0;
                     var14 = (ProducerScope)this.L$0;
                     ResultKt.throwOnFailure(var1);
                     if ((Boolean)var1) {
                        this.L$0 = var14;
                        this.I$0 = var2;
                        this.L$1 = var7;
                        this.L$2 = var8;
                        this.label = 3;
                        if (var14.send(var7, this) == var5) {
                           return var5;
                        }
                     }

                     var9 = var8;
                     var3 = var14;
                     var5 = var5;
                     var4 = this;
                  }

                  var4.L$0 = var3;
                  var4.I$0 = var2;
                  var4.L$1 = var9;
                  var4.label = 1;
                  var15 = var9.hasNext(var4);
                  if (var15 == var5) {
                     return var5;
                  }

                  var12 = var5;
                  var1 = var15;
                  var14 = var3;
                  var13 = var9;
                  var11 = var4;
               } else {
                  ChannelIterator var17 = (ChannelIterator)this.L$1;
                  var2 = this.I$0;
                  var14 = (ProducerScope)this.L$0;
                  ResultKt.throwOnFailure(var1);
                  var12 = var5;
                  var11 = this;
                  var13 = var17;
               }
            } else {
               ResultKt.throwOnFailure(var1);
               var3 = this.p$;
               var9 = this.$this_filterIndexed.iterator();
               var2 = 0;
               this.L$0 = var3;
               this.I$0 = var2;
               this.L$1 = var9;
               this.label = 1;
               var15 = var9.hasNext(this);
               if (var15 == var5) {
                  return var5;
               }

               var12 = var5;
               var1 = var15;
               var14 = var3;
               var13 = var9;
               var11 = this;
            }

            while((Boolean)var1) {
               var7 = var13.next();
               Function3 var18 = var11.$predicate;
               Integer var10 = Boxing.boxInt(var2);
               ++var2;
               var11.L$0 = var14;
               var11.I$0 = var2;
               var11.L$1 = var7;
               var11.L$2 = var13;
               var11.label = 2;
               var1 = var18.invoke(var10, var7, var11);
               if (var1 == var12) {
                  return var12;
               }

               if ((Boolean)var1) {
                  var11.L$0 = var14;
                  var11.I$0 = var2;
                  var11.L$1 = var7;
                  var11.L$2 = var13;
                  var11.label = 3;
                  if (var14.send(var7, var11) == var12) {
                     return var12;
                  }
               }

               var11.L$0 = var14;
               var11.I$0 = var2;
               var11.L$1 = var13;
               var11.label = 1;
               var15 = var13.hasNext(var11);
               if (var15 == var12) {
                  return var12;
               }

               var12 = var12;
               var1 = var15;
               var14 = var14;
               var13 = var13;
               var11 = var11;
            }

            return Unit.INSTANCE;
         }
      }), 6, (Object)null);
   }

   // $FF: synthetic method
   public static ReceiveChannel filterIndexed$default(ReceiveChannel var0, CoroutineContext var1, Function3 var2, int var3, Object var4) {
      if ((var3 & 1) != 0) {
         var1 = (CoroutineContext)Dispatchers.getUnconfined();
      }

      return ChannelsKt.filterIndexed(var0, var1, var2);
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object filterIndexedTo(ReceiveChannel param0, Collection param1, Function2 param2, Continuation param3) {
      // $FF: Couldn't be decompiled
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object filterIndexedTo(ReceiveChannel param0, SendChannel param1, Function2 param2, Continuation param3) {
      // $FF: Couldn't be decompiled
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   private static final Object filterIndexedTo$$forInline(ReceiveChannel var0, Collection var1, Function2 var2, Continuation var3) {
      Throwable var6 = (Throwable)null;

      label228: {
         Throwable var10000;
         label229: {
            boolean var10001;
            ChannelIterator var31;
            try {
               var31 = var0.iterator();
            } catch (Throwable var28) {
               var10000 = var28;
               var10001 = false;
               break label229;
            }

            int var4 = 0;

            while(true) {
               try {
                  InlineMarker.mark(0);
                  Object var7 = var31.hasNext(var3);
                  InlineMarker.mark(1);
                  if (!(Boolean)var7) {
                     break;
                  }

                  var7 = var31.next();
                  IndexedValue var8 = new IndexedValue(var4, var7);
                  int var5 = var8.component1();
                  var7 = var8.component2();
                  if ((Boolean)var2.invoke(var5, var7)) {
                     var1.add(var7);
                  }
               } catch (Throwable var27) {
                  var10000 = var27;
                  var10001 = false;
                  break label229;
               }

               ++var4;
            }

            label211:
            try {
               Unit var30 = Unit.INSTANCE;
               break label228;
            } catch (Throwable var26) {
               var10000 = var26;
               var10001 = false;
               break label211;
            }
         }

         Throwable var29 = var10000;

         try {
            throw var29;
         } finally {
            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, var29);
            InlineMarker.finallyEnd(1);
         }
      }

      InlineMarker.finallyStart(1);
      ChannelsKt.cancelConsumed(var0, (Throwable)null);
      InlineMarker.finallyEnd(1);
      return var1;
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   private static final Object filterIndexedTo$$forInline(ReceiveChannel var0, SendChannel var1, Function2 var2, Continuation var3) {
      Throwable var6 = (Throwable)null;

      label228: {
         Throwable var10000;
         label229: {
            boolean var10001;
            ChannelIterator var31;
            try {
               var31 = var0.iterator();
            } catch (Throwable var28) {
               var10000 = var28;
               var10001 = false;
               break label229;
            }

            int var4 = 0;

            while(true) {
               try {
                  InlineMarker.mark(0);
                  Object var7 = var31.hasNext(var3);
                  InlineMarker.mark(1);
                  if (!(Boolean)var7) {
                     break;
                  }

                  Object var8 = var31.next();
                  IndexedValue var32 = new IndexedValue(var4, var8);
                  int var5 = var32.component1();
                  var7 = var32.component2();
                  if ((Boolean)var2.invoke(var5, var7)) {
                     InlineMarker.mark(0);
                     var1.send(var7, var3);
                     InlineMarker.mark(2);
                     InlineMarker.mark(1);
                  }
               } catch (Throwable var27) {
                  var10000 = var27;
                  var10001 = false;
                  break label229;
               }

               ++var4;
            }

            label211:
            try {
               Unit var30 = Unit.INSTANCE;
               break label228;
            } catch (Throwable var26) {
               var10000 = var26;
               var10001 = false;
               break label211;
            }
         }

         Throwable var29 = var10000;

         try {
            throw var29;
         } finally {
            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, var29);
            InlineMarker.finallyEnd(1);
         }
      }

      InlineMarker.finallyStart(1);
      ChannelsKt.cancelConsumed(var0, (Throwable)null);
      InlineMarker.finallyEnd(1);
      return var1;
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final ReceiveChannel filterNot(ReceiveChannel var0, CoroutineContext var1, Function2 var2) {
      return ChannelsKt.filter(var0, var1, (Function2)(new Function2(var2, (Continuation)null) {
         final Function2 $predicate;
         Object L$0;
         int label;
         private Object p$0;

         {
            this.$predicate = var1;
         }

         public final Continuation create(Object var1, Continuation var2) {
            Function2 var3 = new <anonymous constructor>(this.$predicate, var2);
            var3.p$0 = var1;
            return var3;
         }

         public final Object invoke(Object var1, Object var2) {
            return ((<undefinedtype>)this.create(var1, (Continuation)var2)).invokeSuspend(Unit.INSTANCE);
         }

         public final Object invokeSuspend(Object var1) {
            Object var4 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
            int var2 = this.label;
            if (var2 != 0) {
               if (var2 != 1) {
                  throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
               }

               ResultKt.throwOnFailure(var1);
            } else {
               ResultKt.throwOnFailure(var1);
               var1 = this.p$0;
               Function2 var3 = this.$predicate;
               this.L$0 = var1;
               this.label = 1;
               Object var5 = var3.invoke(var1, this);
               var1 = var5;
               if (var5 == var4) {
                  return var4;
               }
            }

            return Boxing.boxBoolean((Boolean)var1 ^ true);
         }
      }));
   }

   // $FF: synthetic method
   public static ReceiveChannel filterNot$default(ReceiveChannel var0, CoroutineContext var1, Function2 var2, int var3, Object var4) {
      if ((var3 & 1) != 0) {
         var1 = (CoroutineContext)Dispatchers.getUnconfined();
      }

      return ChannelsKt.filterNot(var0, var1, var2);
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final ReceiveChannel filterNotNull(ReceiveChannel var0) {
      var0 = ChannelsKt.filter$default(var0, (CoroutineContext)null, (Function2)(new Function2((Continuation)null) {
         int label;
         private Object p$0;

         public final Continuation create(Object var1, Continuation var2) {
            Function2 var3 = new <anonymous constructor>(var2);
            var3.p$0 = var1;
            return var3;
         }

         public final Object invoke(Object var1, Object var2) {
            return ((<undefinedtype>)this.create(var1, (Continuation)var2)).invokeSuspend(Unit.INSTANCE);
         }

         public final Object invokeSuspend(Object var1) {
            IntrinsicsKt.getCOROUTINE_SUSPENDED();
            if (this.label == 0) {
               ResultKt.throwOnFailure(var1);
               boolean var2;
               if (this.p$0 != null) {
                  var2 = true;
               } else {
                  var2 = false;
               }

               return Boxing.boxBoolean(var2);
            } else {
               throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
            }
         }
      }), 1, (Object)null);
      if (var0 != null) {
         return var0;
      } else {
         throw new NullPointerException("null cannot be cast to non-null type kotlinx.coroutines.channels.ReceiveChannel<E>");
      }
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object filterNotNullTo(ReceiveChannel var0, Collection var1, Continuation var2) {
      Object var338;
      label2997: {
         if (var2 instanceof <undefinedtype>) {
            <undefinedtype> var4 = (<undefinedtype>)var2;
            if ((var4.label & Integer.MIN_VALUE) != 0) {
               var4.label += Integer.MIN_VALUE;
               var338 = var4;
               break label2997;
            }
         }

         var338 = new ContinuationImpl(var2) {
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            int label;
            Object result;

            public final Object invokeSuspend(Object var1) {
               this.result = var1;
               this.label |= Integer.MIN_VALUE;
               return ChannelsKt.filterNotNullTo((ReceiveChannel)null, (Collection)null, this);
            }
         };
      }

      Throwable var335;
      ReceiveChannel var337;
      label2991: {
         Throwable var10000;
         label3000: {
            Collection var8;
            boolean var10001;
            Throwable var339;
            label2989: {
               Object var11 = ((<undefinedtype>)var338).result;
               Object var340 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
               int var3 = ((<undefinedtype>)var338).label;
               ReceiveChannel var5;
               ReceiveChannel var6;
               Object var7;
               ReceiveChannel var9;
               ChannelIterator var10;
               Throwable var336;
               Throwable var341;
               if (var3 != 0) {
                  if (var3 != 1) {
                     throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                  }

                  var10 = (ChannelIterator)((<undefinedtype>)var338).L$6;
                  var6 = (ReceiveChannel)((<undefinedtype>)var338).L$5;
                  var336 = (Throwable)((<undefinedtype>)var338).L$4;
                  var0 = (ReceiveChannel)((<undefinedtype>)var338).L$3;
                  var5 = (ReceiveChannel)((<undefinedtype>)var338).L$2;
                  var8 = (Collection)((<undefinedtype>)var338).L$1;
                  var9 = (ReceiveChannel)((<undefinedtype>)var338).L$0;

                  try {
                     ResultKt.throwOnFailure(var11);
                  } catch (Throwable var319) {
                     var337 = var0;
                     var335 = var319;
                     break label2991;
                  }

                  var7 = var338;
                  var339 = var336;
                  var337 = var0;

                  try {
                     if (!(Boolean)var11) {
                        break label2989;
                     }
                  } catch (Throwable var332) {
                     var10000 = var332;
                     var10001 = false;
                     break label3000;
                  }

                  var337 = var0;

                  try {
                     var11 = var10.next();
                  } catch (Throwable var333) {
                     var10000 = var333;
                     var10001 = false;
                     break label3000;
                  }

                  if (var11 != null) {
                     var337 = var0;

                     try {
                        var8.add(var11);
                     } catch (Throwable var334) {
                        var10000 = var334;
                        var10001 = false;
                        break label3000;
                     }
                  }

                  var336 = var339;
                  var338 = var340;
                  var341 = var336;
               } else {
                  ResultKt.throwOnFailure(var11);
                  Throwable var342 = (Throwable)null;

                  try {
                     var10 = var0.iterator();
                  } catch (Throwable var318) {
                     var337 = var0;
                     var335 = var318;
                     break label2991;
                  }

                  var8 = null;
                  var7 = var338;
                  var338 = var340;
                  var5 = var0;
                  var0 = var0;
                  var6 = var0;
                  var9 = var0;
                  var341 = var8;
                  var8 = var1;
               }

               while(true) {
                  var337 = var0;

                  try {
                     ((<undefinedtype>)var7).L$0 = var9;
                  } catch (Throwable var328) {
                     var10000 = var328;
                     var10001 = false;
                     break label3000;
                  }

                  var337 = var0;

                  try {
                     ((<undefinedtype>)var7).L$1 = var8;
                  } catch (Throwable var327) {
                     var10000 = var327;
                     var10001 = false;
                     break label3000;
                  }

                  var337 = var0;

                  try {
                     ((<undefinedtype>)var7).L$2 = var5;
                  } catch (Throwable var326) {
                     var10000 = var326;
                     var10001 = false;
                     break label3000;
                  }

                  var337 = var0;

                  try {
                     ((<undefinedtype>)var7).L$3 = var0;
                  } catch (Throwable var325) {
                     var10000 = var325;
                     var10001 = false;
                     break label3000;
                  }

                  var337 = var0;

                  try {
                     ((<undefinedtype>)var7).L$4 = var341;
                  } catch (Throwable var324) {
                     var10000 = var324;
                     var10001 = false;
                     break label3000;
                  }

                  var337 = var0;

                  try {
                     ((<undefinedtype>)var7).L$5 = var6;
                  } catch (Throwable var323) {
                     var10000 = var323;
                     var10001 = false;
                     break label3000;
                  }

                  var337 = var0;

                  try {
                     ((<undefinedtype>)var7).L$6 = var10;
                  } catch (Throwable var322) {
                     var10000 = var322;
                     var10001 = false;
                     break label3000;
                  }

                  var337 = var0;

                  try {
                     ((<undefinedtype>)var7).label = 1;
                  } catch (Throwable var321) {
                     var10000 = var321;
                     var10001 = false;
                     break label3000;
                  }

                  var337 = var0;

                  try {
                     var11 = var10.hasNext((Continuation)var7);
                  } catch (Throwable var320) {
                     var10000 = var320;
                     var10001 = false;
                     break label3000;
                  }

                  if (var11 == var338) {
                     return var338;
                  }

                  Object var344 = var338;
                  var339 = var341;
                  var340 = var344;
                  var337 = var0;

                  try {
                     if (!(Boolean)var11) {
                        break;
                     }
                  } catch (Throwable var331) {
                     var10000 = var331;
                     var10001 = false;
                     break label3000;
                  }

                  var337 = var0;

                  try {
                     var11 = var10.next();
                  } catch (Throwable var330) {
                     var10000 = var330;
                     var10001 = false;
                     break label3000;
                  }

                  if (var11 != null) {
                     var337 = var0;

                     try {
                        var8.add(var11);
                     } catch (Throwable var329) {
                        var10000 = var329;
                        var10001 = false;
                        break label3000;
                     }
                  }

                  var336 = var339;
                  var338 = var340;
                  var341 = var336;
               }
            }

            var337 = var0;

            try {
               Unit var343 = Unit.INSTANCE;
            } catch (Throwable var317) {
               var10000 = var317;
               var10001 = false;
               break label3000;
            }

            ChannelsKt.cancelConsumed(var0, var339);
            return var8;
         }

         var335 = var10000;
      }

      try {
         throw var335;
      } finally {
         ChannelsKt.cancelConsumed(var337, var335);
      }
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object filterNotNullTo(ReceiveChannel param0, SendChannel param1, Continuation param2) {
      // $FF: Couldn't be decompiled
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object filterNotTo(ReceiveChannel param0, Collection param1, Function1 param2, Continuation param3) {
      // $FF: Couldn't be decompiled
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object filterNotTo(ReceiveChannel var0, SendChannel var1, Function1 var2, Continuation var3) {
      Object var1415;
      label11833: {
         if (var3 instanceof <undefinedtype>) {
            <undefinedtype> var5 = (<undefinedtype>)var3;
            if ((var5.label & Integer.MIN_VALUE) != 0) {
               var5.label += Integer.MIN_VALUE;
               var1415 = var5;
               break label11833;
            }
         }

         var1415 = new ContinuationImpl(var3) {
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            Object L$8;
            Object L$9;
            int label;
            Object result;

            public final Object invokeSuspend(Object var1) {
               this.result = var1;
               this.label |= Integer.MIN_VALUE;
               return ChannelsKt.filterNotTo((ReceiveChannel)null, (SendChannel)null, (Function1)null, this);
            }
         };
      }

      Throwable var1413;
      ReceiveChannel var6;
      label11827: {
         Throwable var10000;
         label11836: {
            Throwable var8;
            SendChannel var1419;
            boolean var10001;
            label11825: {
               label11824: {
                  Object var13 = ((<undefinedtype>)var1415).result;
                  Object var1418 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                  int var4 = ((<undefinedtype>)var1415).label;
                  ReceiveChannel var1411;
                  ReceiveChannel var1414;
                  Function1 var7;
                  Object var9;
                  ReceiveChannel var1417;
                  Object var10;
                  ChannelIterator var11;
                  ReceiveChannel var1422;
                  if (var4 != 0) {
                     if (var4 != 1) {
                        if (var4 != 2) {
                           throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }

                        Object var1410 = ((<undefinedtype>)var1415).L$9;
                        var1410 = ((<undefinedtype>)var1415).L$8;
                        var11 = (ChannelIterator)((<undefinedtype>)var1415).L$7;
                        ReceiveChannel var14 = (ReceiveChannel)((<undefinedtype>)var1415).L$6;
                        var8 = (Throwable)((<undefinedtype>)var1415).L$5;
                        var6 = (ReceiveChannel)((<undefinedtype>)var1415).L$4;
                        var1414 = (ReceiveChannel)((<undefinedtype>)var1415).L$3;
                        var7 = (Function1)((<undefinedtype>)var1415).L$2;
                        SendChannel var12 = (SendChannel)((<undefinedtype>)var1415).L$1;
                        var1411 = (ReceiveChannel)((<undefinedtype>)var1415).L$0;
                        var0 = var6;

                        try {
                           ResultKt.throwOnFailure(var13);
                        } catch (Throwable var1393) {
                           var10000 = var1393;
                           var10001 = false;
                           break label11824;
                        }

                        var9 = var1415;
                        var10 = var1418;
                        var0 = var6;
                        var1417 = var14;
                        var1419 = var12;
                     } else {
                        var11 = (ChannelIterator)((<undefinedtype>)var1415).L$7;
                        var1422 = (ReceiveChannel)((<undefinedtype>)var1415).L$6;
                        var8 = (Throwable)((<undefinedtype>)var1415).L$5;
                        var1411 = (ReceiveChannel)((<undefinedtype>)var1415).L$4;
                        var1414 = (ReceiveChannel)((<undefinedtype>)var1415).L$3;
                        var7 = (Function1)((<undefinedtype>)var1415).L$2;
                        SendChannel var1420 = (SendChannel)((<undefinedtype>)var1415).L$1;
                        var6 = (ReceiveChannel)((<undefinedtype>)var1415).L$0;
                        var0 = var1411;

                        try {
                           ResultKt.throwOnFailure(var13);
                        } catch (Throwable var1394) {
                           var10000 = var1394;
                           var10001 = false;
                           break label11824;
                        }

                        var10 = var1418;
                        var0 = var1411;
                        var1419 = var1420;
                        var9 = var1415;
                        var1411 = var6;
                        var6 = var0;

                        try {
                           if (!(Boolean)var13) {
                              break label11825;
                           }
                        } catch (Throwable var1392) {
                           var10000 = var1392;
                           var10001 = false;
                           break label11836;
                        }

                        var6 = var0;

                        try {
                           var1415 = var11.next();
                        } catch (Throwable var1390) {
                           var10000 = var1390;
                           var10001 = false;
                           break label11836;
                        }

                        var6 = var0;

                        label11839: {
                           try {
                              if ((Boolean)var7.invoke(var1415)) {
                                 break label11839;
                              }
                           } catch (Throwable var1391) {
                              var10000 = var1391;
                              var10001 = false;
                              break label11836;
                           }

                           var6 = var0;

                           try {
                              ((<undefinedtype>)var9).L$0 = var1411;
                           } catch (Throwable var1389) {
                              var10000 = var1389;
                              var10001 = false;
                              break label11836;
                           }

                           var6 = var0;

                           try {
                              ((<undefinedtype>)var9).L$1 = var1419;
                           } catch (Throwable var1388) {
                              var10000 = var1388;
                              var10001 = false;
                              break label11836;
                           }

                           var6 = var0;

                           try {
                              ((<undefinedtype>)var9).L$2 = var7;
                           } catch (Throwable var1387) {
                              var10000 = var1387;
                              var10001 = false;
                              break label11836;
                           }

                           var6 = var0;

                           try {
                              ((<undefinedtype>)var9).L$3 = var1414;
                           } catch (Throwable var1386) {
                              var10000 = var1386;
                              var10001 = false;
                              break label11836;
                           }

                           var6 = var0;

                           try {
                              ((<undefinedtype>)var9).L$4 = var0;
                           } catch (Throwable var1385) {
                              var10000 = var1385;
                              var10001 = false;
                              break label11836;
                           }

                           var6 = var0;

                           try {
                              ((<undefinedtype>)var9).L$5 = var8;
                           } catch (Throwable var1384) {
                              var10000 = var1384;
                              var10001 = false;
                              break label11836;
                           }

                           var6 = var0;

                           try {
                              ((<undefinedtype>)var9).L$6 = var1422;
                           } catch (Throwable var1383) {
                              var10000 = var1383;
                              var10001 = false;
                              break label11836;
                           }

                           var6 = var0;

                           try {
                              ((<undefinedtype>)var9).L$7 = var11;
                           } catch (Throwable var1382) {
                              var10000 = var1382;
                              var10001 = false;
                              break label11836;
                           }

                           var6 = var0;

                           try {
                              ((<undefinedtype>)var9).L$8 = var1415;
                           } catch (Throwable var1381) {
                              var10000 = var1381;
                              var10001 = false;
                              break label11836;
                           }

                           var6 = var0;

                           try {
                              ((<undefinedtype>)var9).L$9 = var1415;
                           } catch (Throwable var1380) {
                              var10000 = var1380;
                              var10001 = false;
                              break label11836;
                           }

                           var6 = var0;

                           try {
                              ((<undefinedtype>)var9).label = 2;
                           } catch (Throwable var1379) {
                              var10000 = var1379;
                              var10001 = false;
                              break label11836;
                           }

                           var6 = var0;

                           try {
                              if (var1419.send(var1415, (Continuation)var9) == var10) {
                                 return var10;
                              }
                           } catch (Throwable var1378) {
                              var10000 = var1378;
                              var10001 = false;
                              break label11836;
                           }
                        }

                        var1417 = var1422;
                     }
                  } else {
                     ResultKt.throwOnFailure(var13);
                     Throwable var1421 = (Throwable)null;

                     try {
                        var11 = var0.iterator();
                     } catch (Throwable var1367) {
                        var6 = var0;
                        var1413 = var1367;
                        break label11827;
                     }

                     SendChannel var1423 = var1;
                     var7 = var2;
                     var8 = null;
                     var9 = var1415;
                     var1411 = var0;
                     var1414 = var0;
                     var0 = var0;
                     var1417 = var0;
                     var10 = var1418;
                     var1419 = var1423;
                  }

                  while(true) {
                     var6 = var0;

                     try {
                        ((<undefinedtype>)var9).L$0 = var1411;
                     } catch (Throwable var1377) {
                        var10000 = var1377;
                        var10001 = false;
                        break label11836;
                     }

                     var6 = var0;

                     try {
                        ((<undefinedtype>)var9).L$1 = var1419;
                     } catch (Throwable var1376) {
                        var10000 = var1376;
                        var10001 = false;
                        break label11836;
                     }

                     var6 = var0;

                     try {
                        ((<undefinedtype>)var9).L$2 = var7;
                     } catch (Throwable var1375) {
                        var10000 = var1375;
                        var10001 = false;
                        break label11836;
                     }

                     var6 = var0;

                     try {
                        ((<undefinedtype>)var9).L$3 = var1414;
                     } catch (Throwable var1374) {
                        var10000 = var1374;
                        var10001 = false;
                        break label11836;
                     }

                     var6 = var0;

                     try {
                        ((<undefinedtype>)var9).L$4 = var0;
                     } catch (Throwable var1373) {
                        var10000 = var1373;
                        var10001 = false;
                        break label11836;
                     }

                     var6 = var0;

                     try {
                        ((<undefinedtype>)var9).L$5 = var8;
                     } catch (Throwable var1372) {
                        var10000 = var1372;
                        var10001 = false;
                        break label11836;
                     }

                     var6 = var0;

                     try {
                        ((<undefinedtype>)var9).L$6 = var1417;
                     } catch (Throwable var1371) {
                        var10000 = var1371;
                        var10001 = false;
                        break label11836;
                     }

                     var6 = var0;

                     try {
                        ((<undefinedtype>)var9).L$7 = var11;
                     } catch (Throwable var1370) {
                        var10000 = var1370;
                        var10001 = false;
                        break label11836;
                     }

                     var6 = var0;

                     try {
                        ((<undefinedtype>)var9).label = 1;
                     } catch (Throwable var1369) {
                        var10000 = var1369;
                        var10001 = false;
                        break label11836;
                     }

                     var6 = var0;

                     try {
                        var13 = var11.hasNext((Continuation)var9);
                     } catch (Throwable var1368) {
                        var10000 = var1368;
                        var10001 = false;
                        break label11836;
                     }

                     if (var13 == var10) {
                        return var10;
                     }

                     var1422 = var1417;
                     var6 = var0;

                     try {
                        if (!(Boolean)var13) {
                           break label11825;
                        }
                     } catch (Throwable var1395) {
                        var10000 = var1395;
                        var10001 = false;
                        break label11836;
                     }

                     var6 = var0;

                     try {
                        var1415 = var11.next();
                     } catch (Throwable var1396) {
                        var10000 = var1396;
                        var10001 = false;
                        break label11836;
                     }

                     var6 = var0;

                     label11842: {
                        try {
                           if ((Boolean)var7.invoke(var1415)) {
                              break label11842;
                           }
                        } catch (Throwable var1397) {
                           var10000 = var1397;
                           var10001 = false;
                           break label11836;
                        }

                        var6 = var0;

                        try {
                           ((<undefinedtype>)var9).L$0 = var1411;
                        } catch (Throwable var1398) {
                           var10000 = var1398;
                           var10001 = false;
                           break label11836;
                        }

                        var6 = var0;

                        try {
                           ((<undefinedtype>)var9).L$1 = var1419;
                        } catch (Throwable var1399) {
                           var10000 = var1399;
                           var10001 = false;
                           break label11836;
                        }

                        var6 = var0;

                        try {
                           ((<undefinedtype>)var9).L$2 = var7;
                        } catch (Throwable var1400) {
                           var10000 = var1400;
                           var10001 = false;
                           break label11836;
                        }

                        var6 = var0;

                        try {
                           ((<undefinedtype>)var9).L$3 = var1414;
                        } catch (Throwable var1401) {
                           var10000 = var1401;
                           var10001 = false;
                           break label11836;
                        }

                        var6 = var0;

                        try {
                           ((<undefinedtype>)var9).L$4 = var0;
                        } catch (Throwable var1402) {
                           var10000 = var1402;
                           var10001 = false;
                           break label11836;
                        }

                        var6 = var0;

                        try {
                           ((<undefinedtype>)var9).L$5 = var8;
                        } catch (Throwable var1403) {
                           var10000 = var1403;
                           var10001 = false;
                           break label11836;
                        }

                        var6 = var0;

                        try {
                           ((<undefinedtype>)var9).L$6 = var1422;
                        } catch (Throwable var1404) {
                           var10000 = var1404;
                           var10001 = false;
                           break label11836;
                        }

                        var6 = var0;

                        try {
                           ((<undefinedtype>)var9).L$7 = var11;
                        } catch (Throwable var1405) {
                           var10000 = var1405;
                           var10001 = false;
                           break label11836;
                        }

                        var6 = var0;

                        try {
                           ((<undefinedtype>)var9).L$8 = var1415;
                        } catch (Throwable var1406) {
                           var10000 = var1406;
                           var10001 = false;
                           break label11836;
                        }

                        var6 = var0;

                        try {
                           ((<undefinedtype>)var9).L$9 = var1415;
                        } catch (Throwable var1407) {
                           var10000 = var1407;
                           var10001 = false;
                           break label11836;
                        }

                        var6 = var0;

                        try {
                           ((<undefinedtype>)var9).label = 2;
                        } catch (Throwable var1408) {
                           var10000 = var1408;
                           var10001 = false;
                           break label11836;
                        }

                        var6 = var0;

                        try {
                           if (var1419.send(var1415, (Continuation)var9) == var10) {
                              return var10;
                           }
                        } catch (Throwable var1409) {
                           var10000 = var1409;
                           var10001 = false;
                           break label11836;
                        }
                     }

                     var1417 = var1422;
                  }
               }

               Throwable var1412 = var10000;
               var6 = var0;
               var1413 = var1412;
               break label11827;
            }

            var6 = var0;

            try {
               Unit var1416 = Unit.INSTANCE;
            } catch (Throwable var1366) {
               var10000 = var1366;
               var10001 = false;
               break label11836;
            }

            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, var8);
            InlineMarker.finallyEnd(1);
            return var1419;
         }

         var1413 = var10000;
      }

      try {
         throw var1413;
      } finally {
         InlineMarker.finallyStart(1);
         ChannelsKt.cancelConsumed(var6, var1413);
         InlineMarker.finallyEnd(1);
      }
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   private static final Object filterNotTo$$forInline(ReceiveChannel var0, Collection var1, Function1 var2, Continuation var3) {
      Throwable var4 = (Throwable)null;

      label216: {
         Throwable var10000;
         label217: {
            boolean var10001;
            ChannelIterator var28;
            try {
               var28 = var0.iterator();
            } catch (Throwable var24) {
               var10000 = var24;
               var10001 = false;
               break label217;
            }

            while(true) {
               try {
                  InlineMarker.mark(0);
                  Object var5 = var28.hasNext(var3);
                  InlineMarker.mark(1);
                  if (!(Boolean)var5) {
                     break;
                  }

                  var5 = var28.next();
                  if (!(Boolean)var2.invoke(var5)) {
                     var1.add(var5);
                  }
               } catch (Throwable var25) {
                  var10000 = var25;
                  var10001 = false;
                  break label217;
               }
            }

            label198:
            try {
               Unit var27 = Unit.INSTANCE;
               break label216;
            } catch (Throwable var23) {
               var10000 = var23;
               var10001 = false;
               break label198;
            }
         }

         Throwable var26 = var10000;

         try {
            throw var26;
         } finally {
            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, var26);
            InlineMarker.finallyEnd(1);
         }
      }

      InlineMarker.finallyStart(1);
      ChannelsKt.cancelConsumed(var0, (Throwable)null);
      InlineMarker.finallyEnd(1);
      return var1;
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   private static final Object filterNotTo$$forInline(ReceiveChannel var0, SendChannel var1, Function1 var2, Continuation var3) {
      Throwable var4 = (Throwable)null;

      label218: {
         Throwable var10000;
         label213: {
            boolean var10001;
            ChannelIterator var28;
            try {
               var28 = var0.iterator();
            } catch (Throwable var24) {
               var10000 = var24;
               var10001 = false;
               break label213;
            }

            while(true) {
               try {
                  while(true) {
                     InlineMarker.mark(0);
                     Object var5 = var28.hasNext(var3);
                     InlineMarker.mark(1);
                     if (!(Boolean)var5) {
                        break;
                     }

                     var5 = var28.next();
                     if (!(Boolean)var2.invoke(var5)) {
                        InlineMarker.mark(0);
                        var1.send(var5, var3);
                        InlineMarker.mark(2);
                        InlineMarker.mark(1);
                     }
                  }
               } catch (Throwable var25) {
                  var10000 = var25;
                  var10001 = false;
                  break;
               }

               try {
                  Unit var27 = Unit.INSTANCE;
                  break label218;
               } catch (Throwable var23) {
                  var10000 = var23;
                  var10001 = false;
                  break;
               }
            }
         }

         Throwable var26 = var10000;

         try {
            throw var26;
         } finally {
            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, var26);
            InlineMarker.finallyEnd(1);
         }
      }

      InlineMarker.finallyStart(1);
      ChannelsKt.cancelConsumed(var0, (Throwable)null);
      InlineMarker.finallyEnd(1);
      return var1;
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object filterTo(ReceiveChannel param0, Collection param1, Function1 param2, Continuation param3) {
      // $FF: Couldn't be decompiled
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object filterTo(ReceiveChannel var0, SendChannel var1, Function1 var2, Continuation var3) {
      Object var1415;
      label11833: {
         if (var3 instanceof <undefinedtype>) {
            <undefinedtype> var5 = (<undefinedtype>)var3;
            if ((var5.label & Integer.MIN_VALUE) != 0) {
               var5.label += Integer.MIN_VALUE;
               var1415 = var5;
               break label11833;
            }
         }

         var1415 = new ContinuationImpl(var3) {
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            Object L$8;
            Object L$9;
            int label;
            Object result;

            public final Object invokeSuspend(Object var1) {
               this.result = var1;
               this.label |= Integer.MIN_VALUE;
               return ChannelsKt.filterTo((ReceiveChannel)null, (SendChannel)null, (Function1)null, this);
            }
         };
      }

      Throwable var1413;
      ReceiveChannel var1422;
      label11827: {
         Throwable var10000;
         label11836: {
            Throwable var8;
            SendChannel var1419;
            boolean var10001;
            label11825: {
               label11824: {
                  Object var13 = ((<undefinedtype>)var1415).result;
                  Object var1418 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                  int var4 = ((<undefinedtype>)var1415).label;
                  ReceiveChannel var1411;
                  ReceiveChannel var6;
                  ReceiveChannel var1414;
                  SendChannel var7;
                  Object var9;
                  ReceiveChannel var1417;
                  Object var10;
                  ChannelIterator var11;
                  Function1 var1420;
                  Function1 var1423;
                  Object var1425;
                  if (var4 != 0) {
                     if (var4 != 1) {
                        if (var4 != 2) {
                           throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }

                        Object var1410 = ((<undefinedtype>)var1415).L$9;
                        var1410 = ((<undefinedtype>)var1415).L$8;
                        var11 = (ChannelIterator)((<undefinedtype>)var1415).L$7;
                        ReceiveChannel var12 = (ReceiveChannel)((<undefinedtype>)var1415).L$6;
                        var8 = (Throwable)((<undefinedtype>)var1415).L$5;
                        var6 = (ReceiveChannel)((<undefinedtype>)var1415).L$4;
                        var1414 = (ReceiveChannel)((<undefinedtype>)var1415).L$3;
                        Function1 var14 = (Function1)((<undefinedtype>)var1415).L$2;
                        var7 = (SendChannel)((<undefinedtype>)var1415).L$1;
                        var1411 = (ReceiveChannel)((<undefinedtype>)var1415).L$0;
                        var0 = var6;

                        try {
                           ResultKt.throwOnFailure(var13);
                        } catch (Throwable var1393) {
                           var10000 = var1393;
                           var10001 = false;
                           break label11824;
                        }

                        var9 = var1415;
                        var10 = var1418;
                        var0 = var6;
                        var1420 = var14;
                        var1417 = var12;
                        var1419 = var7;
                     } else {
                        var11 = (ChannelIterator)((<undefinedtype>)var1415).L$7;
                        var6 = (ReceiveChannel)((<undefinedtype>)var1415).L$6;
                        var8 = (Throwable)((<undefinedtype>)var1415).L$5;
                        var1411 = (ReceiveChannel)((<undefinedtype>)var1415).L$4;
                        var1414 = (ReceiveChannel)((<undefinedtype>)var1415).L$3;
                        var1423 = (Function1)((<undefinedtype>)var1415).L$2;
                        SendChannel var1424 = (SendChannel)((<undefinedtype>)var1415).L$1;
                        var1422 = (ReceiveChannel)((<undefinedtype>)var1415).L$0;
                        var0 = var1411;

                        try {
                           ResultKt.throwOnFailure(var13);
                        } catch (Throwable var1394) {
                           var10000 = var1394;
                           var10001 = false;
                           break label11824;
                        }

                        var10 = var1418;
                        var0 = var1411;
                        var1419 = var1424;
                        var1425 = var1415;
                        var1411 = var1422;
                        var1422 = var0;

                        try {
                           if (!(Boolean)var13) {
                              break label11825;
                           }
                        } catch (Throwable var1392) {
                           var10000 = var1392;
                           var10001 = false;
                           break label11836;
                        }

                        var1422 = var0;

                        try {
                           var1415 = var11.next();
                        } catch (Throwable var1390) {
                           var10000 = var1390;
                           var10001 = false;
                           break label11836;
                        }

                        var1422 = var0;

                        label11839: {
                           try {
                              if (!(Boolean)var1423.invoke(var1415)) {
                                 break label11839;
                              }
                           } catch (Throwable var1391) {
                              var10000 = var1391;
                              var10001 = false;
                              break label11836;
                           }

                           var1422 = var0;

                           try {
                              ((<undefinedtype>)var1425).L$0 = var1411;
                           } catch (Throwable var1389) {
                              var10000 = var1389;
                              var10001 = false;
                              break label11836;
                           }

                           var1422 = var0;

                           try {
                              ((<undefinedtype>)var1425).L$1 = var1419;
                           } catch (Throwable var1388) {
                              var10000 = var1388;
                              var10001 = false;
                              break label11836;
                           }

                           var1422 = var0;

                           try {
                              ((<undefinedtype>)var1425).L$2 = var1423;
                           } catch (Throwable var1387) {
                              var10000 = var1387;
                              var10001 = false;
                              break label11836;
                           }

                           var1422 = var0;

                           try {
                              ((<undefinedtype>)var1425).L$3 = var1414;
                           } catch (Throwable var1386) {
                              var10000 = var1386;
                              var10001 = false;
                              break label11836;
                           }

                           var1422 = var0;

                           try {
                              ((<undefinedtype>)var1425).L$4 = var0;
                           } catch (Throwable var1385) {
                              var10000 = var1385;
                              var10001 = false;
                              break label11836;
                           }

                           var1422 = var0;

                           try {
                              ((<undefinedtype>)var1425).L$5 = var8;
                           } catch (Throwable var1384) {
                              var10000 = var1384;
                              var10001 = false;
                              break label11836;
                           }

                           var1422 = var0;

                           try {
                              ((<undefinedtype>)var1425).L$6 = var6;
                           } catch (Throwable var1383) {
                              var10000 = var1383;
                              var10001 = false;
                              break label11836;
                           }

                           var1422 = var0;

                           try {
                              ((<undefinedtype>)var1425).L$7 = var11;
                           } catch (Throwable var1382) {
                              var10000 = var1382;
                              var10001 = false;
                              break label11836;
                           }

                           var1422 = var0;

                           try {
                              ((<undefinedtype>)var1425).L$8 = var1415;
                           } catch (Throwable var1381) {
                              var10000 = var1381;
                              var10001 = false;
                              break label11836;
                           }

                           var1422 = var0;

                           try {
                              ((<undefinedtype>)var1425).L$9 = var1415;
                           } catch (Throwable var1380) {
                              var10000 = var1380;
                              var10001 = false;
                              break label11836;
                           }

                           var1422 = var0;

                           try {
                              ((<undefinedtype>)var1425).label = 2;
                           } catch (Throwable var1379) {
                              var10000 = var1379;
                              var10001 = false;
                              break label11836;
                           }

                           var1422 = var0;

                           try {
                              if (var1419.send(var1415, (Continuation)var1425) == var10) {
                                 return var10;
                              }
                           } catch (Throwable var1378) {
                              var10000 = var1378;
                              var10001 = false;
                              break label11836;
                           }
                        }

                        var1417 = var6;
                        var1420 = var1423;
                        var9 = var1425;
                     }
                  } else {
                     ResultKt.throwOnFailure(var13);
                     Throwable var1421 = (Throwable)null;

                     try {
                        var11 = var0.iterator();
                     } catch (Throwable var1367) {
                        var1422 = var0;
                        var1413 = var1367;
                        break label11827;
                     }

                     var7 = var1;
                     var1420 = var2;
                     var8 = null;
                     var9 = var1415;
                     var1411 = var0;
                     var1414 = var0;
                     var0 = var0;
                     var1417 = var0;
                     var10 = var1418;
                     var1419 = var7;
                  }

                  while(true) {
                     var1422 = var0;

                     try {
                        ((<undefinedtype>)var9).L$0 = var1411;
                     } catch (Throwable var1377) {
                        var10000 = var1377;
                        var10001 = false;
                        break label11836;
                     }

                     var1422 = var0;

                     try {
                        ((<undefinedtype>)var9).L$1 = var1419;
                     } catch (Throwable var1376) {
                        var10000 = var1376;
                        var10001 = false;
                        break label11836;
                     }

                     var1422 = var0;

                     try {
                        ((<undefinedtype>)var9).L$2 = var1420;
                     } catch (Throwable var1375) {
                        var10000 = var1375;
                        var10001 = false;
                        break label11836;
                     }

                     var1422 = var0;

                     try {
                        ((<undefinedtype>)var9).L$3 = var1414;
                     } catch (Throwable var1374) {
                        var10000 = var1374;
                        var10001 = false;
                        break label11836;
                     }

                     var1422 = var0;

                     try {
                        ((<undefinedtype>)var9).L$4 = var0;
                     } catch (Throwable var1373) {
                        var10000 = var1373;
                        var10001 = false;
                        break label11836;
                     }

                     var1422 = var0;

                     try {
                        ((<undefinedtype>)var9).L$5 = var8;
                     } catch (Throwable var1372) {
                        var10000 = var1372;
                        var10001 = false;
                        break label11836;
                     }

                     var1422 = var0;

                     try {
                        ((<undefinedtype>)var9).L$6 = var1417;
                     } catch (Throwable var1371) {
                        var10000 = var1371;
                        var10001 = false;
                        break label11836;
                     }

                     var1422 = var0;

                     try {
                        ((<undefinedtype>)var9).L$7 = var11;
                     } catch (Throwable var1370) {
                        var10000 = var1370;
                        var10001 = false;
                        break label11836;
                     }

                     var1422 = var0;

                     try {
                        ((<undefinedtype>)var9).label = 1;
                     } catch (Throwable var1369) {
                        var10000 = var1369;
                        var10001 = false;
                        break label11836;
                     }

                     var1422 = var0;

                     try {
                        var13 = var11.hasNext((Continuation)var9);
                     } catch (Throwable var1368) {
                        var10000 = var1368;
                        var10001 = false;
                        break label11836;
                     }

                     if (var13 == var10) {
                        return var10;
                     }

                     var1425 = var9;
                     var1423 = var1420;
                     var6 = var1417;
                     var1422 = var0;

                     try {
                        if (!(Boolean)var13) {
                           break label11825;
                        }
                     } catch (Throwable var1395) {
                        var10000 = var1395;
                        var10001 = false;
                        break label11836;
                     }

                     var1422 = var0;

                     try {
                        var1415 = var11.next();
                     } catch (Throwable var1396) {
                        var10000 = var1396;
                        var10001 = false;
                        break label11836;
                     }

                     var1422 = var0;

                     label11842: {
                        try {
                           if (!(Boolean)var1423.invoke(var1415)) {
                              break label11842;
                           }
                        } catch (Throwable var1397) {
                           var10000 = var1397;
                           var10001 = false;
                           break label11836;
                        }

                        var1422 = var0;

                        try {
                           ((<undefinedtype>)var1425).L$0 = var1411;
                        } catch (Throwable var1398) {
                           var10000 = var1398;
                           var10001 = false;
                           break label11836;
                        }

                        var1422 = var0;

                        try {
                           ((<undefinedtype>)var1425).L$1 = var1419;
                        } catch (Throwable var1399) {
                           var10000 = var1399;
                           var10001 = false;
                           break label11836;
                        }

                        var1422 = var0;

                        try {
                           ((<undefinedtype>)var1425).L$2 = var1423;
                        } catch (Throwable var1400) {
                           var10000 = var1400;
                           var10001 = false;
                           break label11836;
                        }

                        var1422 = var0;

                        try {
                           ((<undefinedtype>)var1425).L$3 = var1414;
                        } catch (Throwable var1401) {
                           var10000 = var1401;
                           var10001 = false;
                           break label11836;
                        }

                        var1422 = var0;

                        try {
                           ((<undefinedtype>)var1425).L$4 = var0;
                        } catch (Throwable var1402) {
                           var10000 = var1402;
                           var10001 = false;
                           break label11836;
                        }

                        var1422 = var0;

                        try {
                           ((<undefinedtype>)var1425).L$5 = var8;
                        } catch (Throwable var1403) {
                           var10000 = var1403;
                           var10001 = false;
                           break label11836;
                        }

                        var1422 = var0;

                        try {
                           ((<undefinedtype>)var1425).L$6 = var6;
                        } catch (Throwable var1404) {
                           var10000 = var1404;
                           var10001 = false;
                           break label11836;
                        }

                        var1422 = var0;

                        try {
                           ((<undefinedtype>)var1425).L$7 = var11;
                        } catch (Throwable var1405) {
                           var10000 = var1405;
                           var10001 = false;
                           break label11836;
                        }

                        var1422 = var0;

                        try {
                           ((<undefinedtype>)var1425).L$8 = var1415;
                        } catch (Throwable var1406) {
                           var10000 = var1406;
                           var10001 = false;
                           break label11836;
                        }

                        var1422 = var0;

                        try {
                           ((<undefinedtype>)var1425).L$9 = var1415;
                        } catch (Throwable var1407) {
                           var10000 = var1407;
                           var10001 = false;
                           break label11836;
                        }

                        var1422 = var0;

                        try {
                           ((<undefinedtype>)var1425).label = 2;
                        } catch (Throwable var1408) {
                           var10000 = var1408;
                           var10001 = false;
                           break label11836;
                        }

                        var1422 = var0;

                        try {
                           if (var1419.send(var1415, (Continuation)var1425) == var10) {
                              return var10;
                           }
                        } catch (Throwable var1409) {
                           var10000 = var1409;
                           var10001 = false;
                           break label11836;
                        }
                     }

                     var1417 = var6;
                     var1420 = var1423;
                     var9 = var1425;
                  }
               }

               Throwable var1412 = var10000;
               var1422 = var0;
               var1413 = var1412;
               break label11827;
            }

            var1422 = var0;

            try {
               Unit var1416 = Unit.INSTANCE;
            } catch (Throwable var1366) {
               var10000 = var1366;
               var10001 = false;
               break label11836;
            }

            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, var8);
            InlineMarker.finallyEnd(1);
            return var1419;
         }

         var1413 = var10000;
      }

      try {
         throw var1413;
      } finally {
         InlineMarker.finallyStart(1);
         ChannelsKt.cancelConsumed(var1422, var1413);
         InlineMarker.finallyEnd(1);
      }
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   private static final Object filterTo$$forInline(ReceiveChannel var0, Collection var1, Function1 var2, Continuation var3) {
      Throwable var4 = (Throwable)null;

      label218: {
         Throwable var10000;
         label213: {
            boolean var10001;
            ChannelIterator var28;
            try {
               var28 = var0.iterator();
            } catch (Throwable var24) {
               var10000 = var24;
               var10001 = false;
               break label213;
            }

            while(true) {
               try {
                  while(true) {
                     InlineMarker.mark(0);
                     Object var5 = var28.hasNext(var3);
                     InlineMarker.mark(1);
                     if (!(Boolean)var5) {
                        break;
                     }

                     var5 = var28.next();
                     if ((Boolean)var2.invoke(var5)) {
                        var1.add(var5);
                     }
                  }
               } catch (Throwable var25) {
                  var10000 = var25;
                  var10001 = false;
                  break;
               }

               try {
                  Unit var27 = Unit.INSTANCE;
                  break label218;
               } catch (Throwable var23) {
                  var10000 = var23;
                  var10001 = false;
                  break;
               }
            }
         }

         Throwable var26 = var10000;

         try {
            throw var26;
         } finally {
            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, var26);
            InlineMarker.finallyEnd(1);
         }
      }

      InlineMarker.finallyStart(1);
      ChannelsKt.cancelConsumed(var0, (Throwable)null);
      InlineMarker.finallyEnd(1);
      return var1;
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   private static final Object filterTo$$forInline(ReceiveChannel var0, SendChannel var1, Function1 var2, Continuation var3) {
      Throwable var4 = (Throwable)null;

      label216: {
         Throwable var10000;
         label217: {
            boolean var10001;
            ChannelIterator var28;
            try {
               var28 = var0.iterator();
            } catch (Throwable var24) {
               var10000 = var24;
               var10001 = false;
               break label217;
            }

            while(true) {
               try {
                  InlineMarker.mark(0);
                  Object var5 = var28.hasNext(var3);
                  InlineMarker.mark(1);
                  if (!(Boolean)var5) {
                     break;
                  }

                  var5 = var28.next();
                  if ((Boolean)var2.invoke(var5)) {
                     InlineMarker.mark(0);
                     var1.send(var5, var3);
                     InlineMarker.mark(2);
                     InlineMarker.mark(1);
                  }
               } catch (Throwable var25) {
                  var10000 = var25;
                  var10001 = false;
                  break label217;
               }
            }

            label198:
            try {
               Unit var27 = Unit.INSTANCE;
               break label216;
            } catch (Throwable var23) {
               var10000 = var23;
               var10001 = false;
               break label198;
            }
         }

         Throwable var26 = var10000;

         try {
            throw var26;
         } finally {
            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, var26);
            InlineMarker.finallyEnd(1);
         }
      }

      InlineMarker.finallyStart(1);
      ChannelsKt.cancelConsumed(var0, (Throwable)null);
      InlineMarker.finallyEnd(1);
      return var1;
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object find(ReceiveChannel param0, Function1 param1, Continuation param2) {
      // $FF: Couldn't be decompiled
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   private static final Object find$$forInline(ReceiveChannel var0, Function1 var1, Continuation var2) {
      Object var4 = null;
      Throwable var5 = (Throwable)null;

      Object var27;
      label220: {
         Throwable var10000;
         label214: {
            ChannelIterator var6;
            boolean var10001;
            try {
               var6 = var0.iterator();
            } catch (Throwable var25) {
               var10000 = var25;
               var10001 = false;
               break label214;
            }

            while(true) {
               boolean var3;
               Object var30;
               label211: {
                  try {
                     InlineMarker.mark(0);
                     var30 = var6.hasNext(var2);
                     InlineMarker.mark(1);
                     if ((Boolean)var30) {
                        var30 = var6.next();
                        var3 = (Boolean)var1.invoke(var30);
                        break label211;
                     }
                  } catch (Throwable var26) {
                     var10000 = var26;
                     var10001 = false;
                     break;
                  }

                  try {
                     Unit var28 = Unit.INSTANCE;
                     break label220;
                  } catch (Throwable var24) {
                     var10000 = var24;
                     var10001 = false;
                     break;
                  }
               }

               if (var3) {
                  InlineMarker.finallyStart(2);
                  ChannelsKt.cancelConsumed(var0, (Throwable)null);
                  InlineMarker.finallyEnd(2);
                  var27 = var30;
                  return var27;
               }
            }
         }

         Throwable var29 = var10000;

         try {
            throw var29;
         } finally {
            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, var29);
            InlineMarker.finallyEnd(1);
         }
      }

      InlineMarker.finallyStart(1);
      ChannelsKt.cancelConsumed(var0, (Throwable)null);
      InlineMarker.finallyEnd(1);
      var27 = var4;
      return var27;
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object findLast(ReceiveChannel var0, Function1 var1, Continuation var2) {
      Object var477;
      label4068: {
         if (var2 instanceof <undefinedtype>) {
            <undefinedtype> var4 = (<undefinedtype>)var2;
            if ((var4.label & Integer.MIN_VALUE) != 0) {
               var4.label += Integer.MIN_VALUE;
               var477 = var4;
               break label4068;
            }
         }

         var477 = new ContinuationImpl(var2) {
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            Object L$8;
            int label;
            Object result;

            public final Object invokeSuspend(Object var1) {
               this.result = var1;
               this.label |= Integer.MIN_VALUE;
               return ChannelsKt.findLast((ReceiveChannel)null, (Function1)null, this);
            }
         };
      }

      Throwable var474;
      ReceiveChannel var476;
      label4062: {
         Throwable var10000;
         label4071: {
            boolean var10001;
            Ref.ObjectRef var478;
            Throwable var480;
            label4060: {
               Object var13 = ((<undefinedtype>)var477).result;
               Object var8 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
               int var3 = ((<undefinedtype>)var477).label;
               ReceiveChannel var5;
               ReceiveChannel var6;
               Object var7;
               Function1 var9;
               ReceiveChannel var10;
               ReceiveChannel var11;
               ChannelIterator var12;
               Ref.ObjectRef var475;
               Throwable var479;
               Ref.ObjectRef var481;
               if (var3 != 0) {
                  if (var3 != 1) {
                     throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                  }

                  var12 = (ChannelIterator)((<undefinedtype>)var477).L$8;
                  var10 = (ReceiveChannel)((<undefinedtype>)var477).L$7;
                  var480 = (Throwable)((<undefinedtype>)var477).L$6;
                  var0 = (ReceiveChannel)((<undefinedtype>)var477).L$5;
                  var6 = (ReceiveChannel)((<undefinedtype>)var477).L$4;
                  var475 = (Ref.ObjectRef)((<undefinedtype>)var477).L$3;
                  var5 = (ReceiveChannel)((<undefinedtype>)var477).L$2;
                  var9 = (Function1)((<undefinedtype>)var477).L$1;
                  var11 = (ReceiveChannel)((<undefinedtype>)var477).L$0;

                  try {
                     ResultKt.throwOnFailure(var13);
                  } catch (Throwable var453) {
                     var476 = var0;
                     var474 = var453;
                     break label4062;
                  }

                  var7 = var477;
                  var478 = var475;
                  var476 = var0;

                  try {
                     if (!(Boolean)var13) {
                        break label4060;
                     }
                  } catch (Throwable var470) {
                     var10000 = var470;
                     var10001 = false;
                     break label4071;
                  }

                  var476 = var0;

                  try {
                     var13 = var12.next();
                  } catch (Throwable var471) {
                     var10000 = var471;
                     var10001 = false;
                     break label4071;
                  }

                  var476 = var0;

                  label4073: {
                     try {
                        if (!(Boolean)var9.invoke(var13)) {
                           break label4073;
                        }
                     } catch (Throwable var472) {
                        var10000 = var472;
                        var10001 = false;
                        break label4071;
                     }

                     var476 = var0;

                     try {
                        var478.element = var13;
                     } catch (Throwable var473) {
                        var10000 = var473;
                        var10001 = false;
                        break label4071;
                     }
                  }

                  var475 = var478;
                  var479 = var480;
                  var481 = var475;
               } else {
                  ResultKt.throwOnFailure(var13);
                  var481 = new Ref.ObjectRef();
                  var481.element = null;
                  Throwable var482 = (Throwable)null;

                  try {
                     var12 = var0.iterator();
                  } catch (Throwable var454) {
                     var476 = var0;
                     var474 = var454;
                     break label4062;
                  }

                  var7 = var477;
                  var479 = null;
                  var5 = var0;
                  var6 = var0;
                  var0 = var0;
                  var9 = var1;
                  var10 = var0;
                  var11 = var0;
               }

               while(true) {
                  var476 = var0;

                  try {
                     ((<undefinedtype>)var7).L$0 = var11;
                  } catch (Throwable var465) {
                     var10000 = var465;
                     var10001 = false;
                     break label4071;
                  }

                  var476 = var0;

                  try {
                     ((<undefinedtype>)var7).L$1 = var9;
                  } catch (Throwable var464) {
                     var10000 = var464;
                     var10001 = false;
                     break label4071;
                  }

                  var476 = var0;

                  try {
                     ((<undefinedtype>)var7).L$2 = var5;
                  } catch (Throwable var463) {
                     var10000 = var463;
                     var10001 = false;
                     break label4071;
                  }

                  var476 = var0;

                  try {
                     ((<undefinedtype>)var7).L$3 = var481;
                  } catch (Throwable var462) {
                     var10000 = var462;
                     var10001 = false;
                     break label4071;
                  }

                  var476 = var0;

                  try {
                     ((<undefinedtype>)var7).L$4 = var6;
                  } catch (Throwable var461) {
                     var10000 = var461;
                     var10001 = false;
                     break label4071;
                  }

                  var476 = var0;

                  try {
                     ((<undefinedtype>)var7).L$5 = var0;
                  } catch (Throwable var460) {
                     var10000 = var460;
                     var10001 = false;
                     break label4071;
                  }

                  var476 = var0;

                  try {
                     ((<undefinedtype>)var7).L$6 = var479;
                  } catch (Throwable var459) {
                     var10000 = var459;
                     var10001 = false;
                     break label4071;
                  }

                  var476 = var0;

                  try {
                     ((<undefinedtype>)var7).L$7 = var10;
                  } catch (Throwable var458) {
                     var10000 = var458;
                     var10001 = false;
                     break label4071;
                  }

                  var476 = var0;

                  try {
                     ((<undefinedtype>)var7).L$8 = var12;
                  } catch (Throwable var457) {
                     var10000 = var457;
                     var10001 = false;
                     break label4071;
                  }

                  var476 = var0;

                  try {
                     ((<undefinedtype>)var7).label = 1;
                  } catch (Throwable var456) {
                     var10000 = var456;
                     var10001 = false;
                     break label4071;
                  }

                  var476 = var0;

                  try {
                     var13 = var12.hasNext((Continuation)var7);
                  } catch (Throwable var455) {
                     var10000 = var455;
                     var10001 = false;
                     break label4071;
                  }

                  if (var13 == var8) {
                     return var8;
                  }

                  var475 = var481;
                  var480 = var479;
                  var478 = var475;
                  var476 = var0;

                  try {
                     if (!(Boolean)var13) {
                        break;
                     }
                  } catch (Throwable var469) {
                     var10000 = var469;
                     var10001 = false;
                     break label4071;
                  }

                  var476 = var0;

                  try {
                     var13 = var12.next();
                  } catch (Throwable var467) {
                     var10000 = var467;
                     var10001 = false;
                     break label4071;
                  }

                  var476 = var0;

                  label4076: {
                     try {
                        if (!(Boolean)var9.invoke(var13)) {
                           break label4076;
                        }
                     } catch (Throwable var468) {
                        var10000 = var468;
                        var10001 = false;
                        break label4071;
                     }

                     var476 = var0;

                     try {
                        var478.element = var13;
                     } catch (Throwable var466) {
                        var10000 = var466;
                        var10001 = false;
                        break label4071;
                     }
                  }

                  var475 = var478;
                  var479 = var480;
                  var481 = var475;
               }
            }

            var476 = var0;

            try {
               Unit var483 = Unit.INSTANCE;
            } catch (Throwable var452) {
               var10000 = var452;
               var10001 = false;
               break label4071;
            }

            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, var480);
            InlineMarker.finallyEnd(1);
            return var478.element;
         }

         var474 = var10000;
      }

      try {
         throw var474;
      } finally {
         InlineMarker.finallyStart(1);
         ChannelsKt.cancelConsumed(var476, var474);
         InlineMarker.finallyEnd(1);
      }
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   private static final Object findLast$$forInline(ReceiveChannel var0, Function1 var1, Continuation var2) {
      Throwable var3 = (Throwable)null;

      Object var28;
      label209: {
         Throwable var10000;
         label210: {
            ChannelIterator var5;
            boolean var10001;
            try {
               var5 = var0.iterator();
            } catch (Throwable var25) {
               var10000 = var25;
               var10001 = false;
               break label210;
            }

            var28 = null;

            while(true) {
               Object var4;
               try {
                  InlineMarker.mark(0);
                  var4 = var5.hasNext(var2);
                  InlineMarker.mark(1);
                  if (!(Boolean)var4) {
                     break;
                  }

                  var4 = var5.next();
                  if (!(Boolean)var1.invoke(var4)) {
                     continue;
                  }
               } catch (Throwable var24) {
                  var10000 = var24;
                  var10001 = false;
                  break label210;
               }

               var28 = var4;
            }

            label191:
            try {
               Unit var27 = Unit.INSTANCE;
               break label209;
            } catch (Throwable var23) {
               var10000 = var23;
               var10001 = false;
               break label191;
            }
         }

         Throwable var26 = var10000;

         try {
            throw var26;
         } finally {
            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, var26);
            InlineMarker.finallyEnd(1);
         }
      }

      InlineMarker.finallyStart(1);
      ChannelsKt.cancelConsumed(var0, (Throwable)null);
      InlineMarker.finallyEnd(1);
      return var28;
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object first(ReceiveChannel param0, Continuation param1) {
      // $FF: Couldn't be decompiled
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object first(ReceiveChannel var0, Function1 var1, Continuation var2) {
      Object var339;
      label3062: {
         if (var2 instanceof <undefinedtype>) {
            <undefinedtype> var5 = (<undefinedtype>)var2;
            if ((var5.label & Integer.MIN_VALUE) != 0) {
               var5.label += Integer.MIN_VALUE;
               var339 = var5;
               break label3062;
            }
         }

         var339 = new ContinuationImpl(var2) {
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            int label;
            Object result;

            public final Object invokeSuspend(Object var1) {
               this.result = var1;
               this.label |= Integer.MIN_VALUE;
               return ChannelsKt.first((ReceiveChannel)null, (Function1)null, this);
            }
         };
      }

      Throwable var336;
      ReceiveChannel var338;
      label3056: {
         Throwable var10000;
         label3065: {
            boolean var10001;
            Throwable var341;
            label3054: {
               Object var12 = ((<undefinedtype>)var339).result;
               Object var342 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
               int var3 = ((<undefinedtype>)var339).label;
               boolean var4;
               ReceiveChannel var6;
               ReceiveChannel var7;
               Object var8;
               Function1 var9;
               ChannelIterator var10;
               ReceiveChannel var11;
               Object var340;
               Throwable var343;
               if (var3 != 0) {
                  if (var3 != 1) {
                     throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                  }

                  var10 = (ChannelIterator)((<undefinedtype>)var339).L$6;
                  var7 = (ReceiveChannel)((<undefinedtype>)var339).L$5;
                  Throwable var337 = (Throwable)((<undefinedtype>)var339).L$4;
                  var0 = (ReceiveChannel)((<undefinedtype>)var339).L$3;
                  var6 = (ReceiveChannel)((<undefinedtype>)var339).L$2;
                  var9 = (Function1)((<undefinedtype>)var339).L$1;
                  var11 = (ReceiveChannel)((<undefinedtype>)var339).L$0;

                  try {
                     ResultKt.throwOnFailure(var12);
                  } catch (Throwable var320) {
                     var338 = var0;
                     var336 = var320;
                     break label3056;
                  }

                  var8 = var339;
                  var341 = var337;
                  var338 = var0;

                  try {
                     if (!(Boolean)var12) {
                        break label3054;
                     }
                  } catch (Throwable var333) {
                     var10000 = var333;
                     var10001 = false;
                     break label3065;
                  }

                  var338 = var0;

                  try {
                     var12 = var10.next();
                  } catch (Throwable var334) {
                     var10000 = var334;
                     var10001 = false;
                     break label3065;
                  }

                  var338 = var0;

                  try {
                     var4 = (Boolean)var9.invoke(var12);
                  } catch (Throwable var335) {
                     var10000 = var335;
                     var10001 = false;
                     break label3065;
                  }

                  if (var4) {
                     InlineMarker.finallyStart(2);
                     ChannelsKt.cancelConsumed(var0, var341);
                     InlineMarker.finallyEnd(2);
                     return var12;
                  }

                  var340 = var342;
                  var343 = var341;
                  var339 = var340;
               } else {
                  ResultKt.throwOnFailure(var12);
                  Throwable var344 = (Throwable)null;

                  try {
                     var10 = var0.iterator();
                  } catch (Throwable var319) {
                     var338 = var0;
                     var336 = var319;
                     break label3056;
                  }

                  var9 = null;
                  var8 = var339;
                  var339 = var342;
                  var6 = var0;
                  var0 = var0;
                  var7 = var0;
                  var11 = var0;
                  var343 = var9;
                  var9 = var1;
               }

               while(true) {
                  var338 = var0;

                  try {
                     ((<undefinedtype>)var8).L$0 = var11;
                  } catch (Throwable var329) {
                     var10000 = var329;
                     var10001 = false;
                     break label3065;
                  }

                  var338 = var0;

                  try {
                     ((<undefinedtype>)var8).L$1 = var9;
                  } catch (Throwable var328) {
                     var10000 = var328;
                     var10001 = false;
                     break label3065;
                  }

                  var338 = var0;

                  try {
                     ((<undefinedtype>)var8).L$2 = var6;
                  } catch (Throwable var327) {
                     var10000 = var327;
                     var10001 = false;
                     break label3065;
                  }

                  var338 = var0;

                  try {
                     ((<undefinedtype>)var8).L$3 = var0;
                  } catch (Throwable var326) {
                     var10000 = var326;
                     var10001 = false;
                     break label3065;
                  }

                  var338 = var0;

                  try {
                     ((<undefinedtype>)var8).L$4 = var343;
                  } catch (Throwable var325) {
                     var10000 = var325;
                     var10001 = false;
                     break label3065;
                  }

                  var338 = var0;

                  try {
                     ((<undefinedtype>)var8).L$5 = var7;
                  } catch (Throwable var324) {
                     var10000 = var324;
                     var10001 = false;
                     break label3065;
                  }

                  var338 = var0;

                  try {
                     ((<undefinedtype>)var8).L$6 = var10;
                  } catch (Throwable var323) {
                     var10000 = var323;
                     var10001 = false;
                     break label3065;
                  }

                  var338 = var0;

                  try {
                     ((<undefinedtype>)var8).label = 1;
                  } catch (Throwable var322) {
                     var10000 = var322;
                     var10001 = false;
                     break label3065;
                  }

                  var338 = var0;

                  try {
                     var12 = var10.hasNext((Continuation)var8);
                  } catch (Throwable var321) {
                     var10000 = var321;
                     var10001 = false;
                     break label3065;
                  }

                  if (var12 == var339) {
                     return var339;
                  }

                  var340 = var339;
                  var341 = var343;
                  var342 = var340;
                  var338 = var0;

                  try {
                     if (!(Boolean)var12) {
                        break;
                     }
                  } catch (Throwable var332) {
                     var10000 = var332;
                     var10001 = false;
                     break label3065;
                  }

                  var338 = var0;

                  try {
                     var12 = var10.next();
                  } catch (Throwable var331) {
                     var10000 = var331;
                     var10001 = false;
                     break label3065;
                  }

                  var338 = var0;

                  try {
                     var4 = (Boolean)var9.invoke(var12);
                  } catch (Throwable var330) {
                     var10000 = var330;
                     var10001 = false;
                     break label3065;
                  }

                  if (var4) {
                     InlineMarker.finallyStart(2);
                     ChannelsKt.cancelConsumed(var0, var341);
                     InlineMarker.finallyEnd(2);
                     return var12;
                  }

                  var340 = var342;
                  var343 = var341;
                  var339 = var340;
               }
            }

            var338 = var0;

            try {
               Unit var345 = Unit.INSTANCE;
            } catch (Throwable var318) {
               var10000 = var318;
               var10001 = false;
               break label3065;
            }

            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, var341);
            InlineMarker.finallyEnd(1);
            throw (Throwable)(new NoSuchElementException("ReceiveChannel contains no element matching the predicate."));
         }

         var336 = var10000;
      }

      try {
         throw var336;
      } finally {
         InlineMarker.finallyStart(1);
         ChannelsKt.cancelConsumed(var338, var336);
         InlineMarker.finallyEnd(1);
      }
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   private static final Object first$$forInline(ReceiveChannel var0, Function1 var1, Continuation var2) {
      Throwable var4 = (Throwable)null;

      label205: {
         Throwable var10000;
         label200: {
            boolean var10001;
            ChannelIterator var28;
            try {
               var28 = var0.iterator();
            } catch (Throwable var24) {
               var10000 = var24;
               var10001 = false;
               break label200;
            }

            while(true) {
               boolean var3;
               Object var5;
               label197: {
                  try {
                     InlineMarker.mark(0);
                     var5 = var28.hasNext(var2);
                     InlineMarker.mark(1);
                     if ((Boolean)var5) {
                        var5 = var28.next();
                        var3 = (Boolean)var1.invoke(var5);
                        break label197;
                     }
                  } catch (Throwable var25) {
                     var10000 = var25;
                     var10001 = false;
                     break;
                  }

                  try {
                     Unit var26 = Unit.INSTANCE;
                     break label205;
                  } catch (Throwable var23) {
                     var10000 = var23;
                     var10001 = false;
                     break;
                  }
               }

               if (var3) {
                  InlineMarker.finallyStart(2);
                  ChannelsKt.cancelConsumed(var0, (Throwable)null);
                  InlineMarker.finallyEnd(2);
                  return var5;
               }
            }
         }

         Throwable var27 = var10000;

         try {
            throw var27;
         } finally {
            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, var27);
            InlineMarker.finallyEnd(1);
         }
      }

      InlineMarker.finallyStart(1);
      ChannelsKt.cancelConsumed(var0, (Throwable)null);
      InlineMarker.finallyEnd(1);
      throw (Throwable)(new NoSuchElementException("ReceiveChannel contains no element matching the predicate."));
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object firstOrNull(ReceiveChannel var0, Continuation var1) {
      Object var38;
      label421: {
         if (var1 instanceof <undefinedtype>) {
            <undefinedtype> var4 = (<undefinedtype>)var1;
            if ((var4.label & Integer.MIN_VALUE) != 0) {
               var4.label += Integer.MIN_VALUE;
               var38 = var4;
               break label421;
            }
         }

         var38 = new ContinuationImpl(var1) {
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            int label;
            Object result;

            public final Object invokeSuspend(Object var1) {
               this.result = var1;
               this.label |= Integer.MIN_VALUE;
               return ChannelsKt.firstOrNull((ReceiveChannel)null, this);
            }
         };
      }

      Throwable var39;
      ReceiveChannel var40;
      label415: {
         Throwable var42;
         Throwable var10000;
         label424: {
            Object var6 = ((<undefinedtype>)var38).result;
            Object var41 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
            int var2 = ((<undefinedtype>)var38).label;
            ChannelIterator var43;
            boolean var10001;
            if (var2 != 0) {
               if (var2 != 1) {
                  throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
               }

               ChannelIterator var7 = (ChannelIterator)((<undefinedtype>)var38).L$4;
               var0 = (ReceiveChannel)((<undefinedtype>)var38).L$3;
               var42 = (Throwable)((<undefinedtype>)var38).L$2;
               ReceiveChannel var5 = (ReceiveChannel)((<undefinedtype>)var38).L$1;
               var0 = (ReceiveChannel)((<undefinedtype>)var38).L$0;
               var0 = var5;

               try {
                  ResultKt.throwOnFailure(var6);
               } catch (Throwable var37) {
                  var10000 = var37;
                  var10001 = false;
                  break label424;
               }

               var40 = var5;
               var43 = var7;
            } else {
               ResultKt.throwOnFailure(var6);
               Throwable var44 = (Throwable)null;

               try {
                  var43 = var0.iterator();
                  ((<undefinedtype>)var38).L$0 = var0;
                  ((<undefinedtype>)var38).L$1 = var0;
                  ((<undefinedtype>)var38).L$2 = null;
                  ((<undefinedtype>)var38).L$3 = var0;
                  ((<undefinedtype>)var38).L$4 = var43;
                  ((<undefinedtype>)var38).label = 1;
                  var6 = var43.hasNext((Continuation)var38);
               } catch (Throwable var35) {
                  var40 = var0;
                  var39 = var35;
                  break label415;
               }

               if (var6 == var41) {
                  return var41;
               }

               var42 = null;
               var40 = var0;
            }

            var0 = var40;

            boolean var3;
            try {
               var3 = (Boolean)var6;
            } catch (Throwable var36) {
               var10000 = var36;
               var10001 = false;
               break label424;
            }

            if (!var3) {
               ChannelsKt.cancelConsumed(var40, var42);
               return null;
            }

            var0 = var40;

            Object var45;
            try {
               var45 = var43.next();
            } catch (Throwable var34) {
               var10000 = var34;
               var10001 = false;
               break label424;
            }

            ChannelsKt.cancelConsumed(var40, var42);
            return var45;
         }

         var42 = var10000;
         var40 = var0;
         var39 = var42;
      }

      try {
         throw var39;
      } finally {
         ChannelsKt.cancelConsumed(var40, var39);
      }
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object firstOrNull(ReceiveChannel var0, Function1 var1, Continuation var2) {
      Object var339;
      label3060: {
         if (var2 instanceof <undefinedtype>) {
            <undefinedtype> var5 = (<undefinedtype>)var2;
            if ((var5.label & Integer.MIN_VALUE) != 0) {
               var5.label += Integer.MIN_VALUE;
               var339 = var5;
               break label3060;
            }
         }

         var339 = new ContinuationImpl(var2) {
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            int label;
            Object result;

            public final Object invokeSuspend(Object var1) {
               this.result = var1;
               this.label |= Integer.MIN_VALUE;
               return ChannelsKt.firstOrNull((ReceiveChannel)null, (Function1)null, this);
            }
         };
      }

      Throwable var336;
      ReceiveChannel var338;
      label3055: {
         Throwable var10000;
         label3063: {
            boolean var10001;
            Throwable var340;
            label3053: {
               Object var12 = ((<undefinedtype>)var339).result;
               Object var342 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
               int var3 = ((<undefinedtype>)var339).label;
               boolean var4;
               ReceiveChannel var6;
               Function1 var7;
               ReceiveChannel var8;
               Object var9;
               ChannelIterator var10;
               ReceiveChannel var11;
               Throwable var337;
               Throwable var343;
               if (var3 != 0) {
                  if (var3 != 1) {
                     throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                  }

                  var10 = (ChannelIterator)((<undefinedtype>)var339).L$6;
                  var8 = (ReceiveChannel)((<undefinedtype>)var339).L$5;
                  var337 = (Throwable)((<undefinedtype>)var339).L$4;
                  var0 = (ReceiveChannel)((<undefinedtype>)var339).L$3;
                  var6 = (ReceiveChannel)((<undefinedtype>)var339).L$2;
                  var7 = (Function1)((<undefinedtype>)var339).L$1;
                  var11 = (ReceiveChannel)((<undefinedtype>)var339).L$0;

                  try {
                     ResultKt.throwOnFailure(var12);
                  } catch (Throwable var320) {
                     var338 = var0;
                     var336 = var320;
                     break label3055;
                  }

                  var9 = var339;
                  var340 = var337;
                  var338 = var0;

                  try {
                     if (!(Boolean)var12) {
                        break label3053;
                     }
                  } catch (Throwable var333) {
                     var10000 = var333;
                     var10001 = false;
                     break label3063;
                  }

                  var338 = var0;

                  try {
                     var12 = var10.next();
                  } catch (Throwable var334) {
                     var10000 = var334;
                     var10001 = false;
                     break label3063;
                  }

                  var338 = var0;

                  try {
                     var4 = (Boolean)var7.invoke(var12);
                  } catch (Throwable var335) {
                     var10000 = var335;
                     var10001 = false;
                     break label3063;
                  }

                  if (var4) {
                     InlineMarker.finallyStart(2);
                     ChannelsKt.cancelConsumed(var0, var340);
                     InlineMarker.finallyEnd(2);
                     return var12;
                  }

                  var337 = var340;
                  var339 = var342;
                  var343 = var337;
               } else {
                  ResultKt.throwOnFailure(var12);
                  Throwable var344 = (Throwable)null;

                  try {
                     var10 = var0.iterator();
                  } catch (Throwable var319) {
                     var338 = var0;
                     var336 = var319;
                     break label3055;
                  }

                  var7 = var1;
                  var9 = var339;
                  Object var347 = var342;
                  var343 = null;
                  ReceiveChannel var341 = var0;
                  var0 = var0;
                  var6 = var0;
                  var11 = var341;
                  var339 = var347;
                  var8 = var0;
               }

               while(true) {
                  var338 = var0;

                  try {
                     ((<undefinedtype>)var9).L$0 = var11;
                  } catch (Throwable var329) {
                     var10000 = var329;
                     var10001 = false;
                     break label3063;
                  }

                  var338 = var0;

                  try {
                     ((<undefinedtype>)var9).L$1 = var7;
                  } catch (Throwable var328) {
                     var10000 = var328;
                     var10001 = false;
                     break label3063;
                  }

                  var338 = var0;

                  try {
                     ((<undefinedtype>)var9).L$2 = var6;
                  } catch (Throwable var327) {
                     var10000 = var327;
                     var10001 = false;
                     break label3063;
                  }

                  var338 = var0;

                  try {
                     ((<undefinedtype>)var9).L$3 = var0;
                  } catch (Throwable var326) {
                     var10000 = var326;
                     var10001 = false;
                     break label3063;
                  }

                  var338 = var0;

                  try {
                     ((<undefinedtype>)var9).L$4 = var343;
                  } catch (Throwable var325) {
                     var10000 = var325;
                     var10001 = false;
                     break label3063;
                  }

                  var338 = var0;

                  try {
                     ((<undefinedtype>)var9).L$5 = var8;
                  } catch (Throwable var324) {
                     var10000 = var324;
                     var10001 = false;
                     break label3063;
                  }

                  var338 = var0;

                  try {
                     ((<undefinedtype>)var9).L$6 = var10;
                  } catch (Throwable var323) {
                     var10000 = var323;
                     var10001 = false;
                     break label3063;
                  }

                  var338 = var0;

                  try {
                     ((<undefinedtype>)var9).label = 1;
                  } catch (Throwable var322) {
                     var10000 = var322;
                     var10001 = false;
                     break label3063;
                  }

                  var338 = var0;

                  try {
                     var12 = var10.hasNext((Continuation)var9);
                  } catch (Throwable var321) {
                     var10000 = var321;
                     var10001 = false;
                     break label3063;
                  }

                  if (var12 == var339) {
                     return var339;
                  }

                  Object var345 = var339;
                  var340 = var343;
                  var342 = var345;
                  var338 = var0;

                  try {
                     if (!(Boolean)var12) {
                        break;
                     }
                  } catch (Throwable var332) {
                     var10000 = var332;
                     var10001 = false;
                     break label3063;
                  }

                  var338 = var0;

                  try {
                     var12 = var10.next();
                  } catch (Throwable var331) {
                     var10000 = var331;
                     var10001 = false;
                     break label3063;
                  }

                  var338 = var0;

                  try {
                     var4 = (Boolean)var7.invoke(var12);
                  } catch (Throwable var330) {
                     var10000 = var330;
                     var10001 = false;
                     break label3063;
                  }

                  if (var4) {
                     InlineMarker.finallyStart(2);
                     ChannelsKt.cancelConsumed(var0, var340);
                     InlineMarker.finallyEnd(2);
                     return var12;
                  }

                  var337 = var340;
                  var339 = var342;
                  var343 = var337;
               }
            }

            var338 = var0;

            try {
               Unit var346 = Unit.INSTANCE;
            } catch (Throwable var318) {
               var10000 = var318;
               var10001 = false;
               break label3063;
            }

            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, var340);
            InlineMarker.finallyEnd(1);
            return null;
         }

         var336 = var10000;
      }

      try {
         throw var336;
      } finally {
         InlineMarker.finallyStart(1);
         ChannelsKt.cancelConsumed(var338, var336);
         InlineMarker.finallyEnd(1);
      }
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   private static final Object firstOrNull$$forInline(ReceiveChannel var0, Function1 var1, Continuation var2) {
      Throwable var4 = (Throwable)null;

      label205: {
         Throwable var10000;
         label200: {
            boolean var10001;
            ChannelIterator var28;
            try {
               var28 = var0.iterator();
            } catch (Throwable var24) {
               var10000 = var24;
               var10001 = false;
               break label200;
            }

            while(true) {
               boolean var3;
               Object var5;
               label197: {
                  try {
                     InlineMarker.mark(0);
                     var5 = var28.hasNext(var2);
                     InlineMarker.mark(1);
                     if ((Boolean)var5) {
                        var5 = var28.next();
                        var3 = (Boolean)var1.invoke(var5);
                        break label197;
                     }
                  } catch (Throwable var25) {
                     var10000 = var25;
                     var10001 = false;
                     break;
                  }

                  try {
                     Unit var26 = Unit.INSTANCE;
                     break label205;
                  } catch (Throwable var23) {
                     var10000 = var23;
                     var10001 = false;
                     break;
                  }
               }

               if (var3) {
                  InlineMarker.finallyStart(2);
                  ChannelsKt.cancelConsumed(var0, (Throwable)null);
                  InlineMarker.finallyEnd(2);
                  return var5;
               }
            }
         }

         Throwable var27 = var10000;

         try {
            throw var27;
         } finally {
            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, var27);
            InlineMarker.finallyEnd(1);
         }
      }

      InlineMarker.finallyStart(1);
      ChannelsKt.cancelConsumed(var0, (Throwable)null);
      InlineMarker.finallyEnd(1);
      return null;
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final ReceiveChannel flatMap(ReceiveChannel var0, CoroutineContext var1, Function2 var2) {
      return ProduceKt.produce$default((CoroutineScope)GlobalScope.INSTANCE, var1, 0, (CoroutineStart)null, ChannelsKt.consumes(var0), (Function2)(new Function2(var0, var2, (Continuation)null) {
         final ReceiveChannel $this_flatMap;
         final Function2 $transform;
         Object L$0;
         Object L$1;
         Object L$2;
         int label;
         private ProducerScope p$;

         {
            this.$this_flatMap = var1;
            this.$transform = var2;
         }

         public final Continuation create(Object var1, Continuation var2) {
            Function2 var3 = new <anonymous constructor>(this.$this_flatMap, this.$transform, var2);
            var3.p$ = (ProducerScope)var1;
            return var3;
         }

         public final Object invoke(Object var1, Object var2) {
            return ((<undefinedtype>)this.create(var1, (Continuation)var2)).invokeSuspend(Unit.INSTANCE);
         }

         public final Object invokeSuspend(Object var1) {
            Object var3 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
            int var2 = this.label;
            ProducerScope var4;
            ChannelIterator var5;
            ProducerScope var6;
            Object var7;
            ReceiveChannel var8;
            ChannelIterator var9;
            SendChannel var10;
            Function2 var11;
            <undefinedtype> var13;
            if (var2 != 0) {
               if (var2 != 1) {
                  if (var2 != 2) {
                     if (var2 != 3) {
                        throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                     }

                     var5 = (ChannelIterator)this.L$2;
                     var4 = (ProducerScope)this.L$0;
                     ResultKt.throwOnFailure(var1);
                     var9 = var5;
                     var13 = this;
                  } else {
                     var5 = (ChannelIterator)this.L$2;
                     var7 = this.L$1;
                     var6 = (ProducerScope)this.L$0;
                     ResultKt.throwOnFailure(var1);
                     var8 = (ReceiveChannel)var1;
                     var10 = (SendChannel)var6;
                     this.L$0 = var6;
                     this.L$1 = var7;
                     this.L$2 = var5;
                     this.label = 3;
                     if (ChannelsKt.toChannel(var8, var10, this) == var3) {
                        return var3;
                     }

                     var3 = var3;
                     var9 = var5;
                     var4 = var6;
                     var13 = this;
                  }
               } else {
                  var5 = (ChannelIterator)this.L$1;
                  var6 = (ProducerScope)this.L$0;
                  ResultKt.throwOnFailure(var1);
                  if (!(Boolean)var1) {
                     return Unit.INSTANCE;
                  }

                  var7 = var5.next();
                  var11 = this.$transform;
                  this.L$0 = var6;
                  this.L$1 = var7;
                  this.L$2 = var5;
                  this.label = 2;
                  var1 = var11.invoke(var7, this);
                  if (var1 == var3) {
                     return var3;
                  }

                  var8 = (ReceiveChannel)var1;
                  var10 = (SendChannel)var6;
                  this.L$0 = var6;
                  this.L$1 = var7;
                  this.L$2 = var5;
                  this.label = 3;
                  if (ChannelsKt.toChannel(var8, var10, this) == var3) {
                     return var3;
                  }

                  var3 = var3;
                  var9 = var5;
                  var4 = var6;
                  var13 = this;
               }
            } else {
               ResultKt.throwOnFailure(var1);
               var4 = this.p$;
               var9 = this.$this_flatMap.iterator();
               var13 = this;
            }

            while(true) {
               var13.L$0 = var4;
               var13.L$1 = var9;
               var13.label = 1;
               Object var16 = var9.hasNext(var13);
               if (var16 == var3) {
                  return var3;
               }

               <undefinedtype> var17 = var13;
               Object var18 = var16;
               var6 = var4;
               ChannelIterator var14 = var9;
               var1 = var18;
               var5 = var14;
               Object var15 = var3;
               <undefinedtype> var12 = var17;
               if (!(Boolean)var1) {
                  return Unit.INSTANCE;
               }

               var7 = var5.next();
               var11 = var12.$transform;
               var12.L$0 = var6;
               var12.L$1 = var7;
               var12.L$2 = var5;
               var12.label = 2;
               var1 = var11.invoke(var7, var12);
               if (var1 == var15) {
                  return var15;
               }

               var8 = (ReceiveChannel)var1;
               var10 = (SendChannel)var6;
               var12.L$0 = var6;
               var12.L$1 = var7;
               var12.L$2 = var5;
               var12.label = 3;
               if (ChannelsKt.toChannel(var8, var10, var12) == var15) {
                  return var15;
               }

               var17 = var12;
               var3 = var15;
               var9 = var5;
               var4 = var6;
               var13 = var17;
            }
         }
      }), 6, (Object)null);
   }

   // $FF: synthetic method
   public static ReceiveChannel flatMap$default(ReceiveChannel var0, CoroutineContext var1, Function2 var2, int var3, Object var4) {
      if ((var3 & 1) != 0) {
         var1 = (CoroutineContext)Dispatchers.getUnconfined();
      }

      return ChannelsKt.flatMap(var0, var1, var2);
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object fold(ReceiveChannel param0, Object param1, Function2 param2, Continuation param3) {
      // $FF: Couldn't be decompiled
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   private static final Object fold$$forInline(ReceiveChannel var0, Object var1, Function2 var2, Continuation var3) {
      Throwable var4 = (Throwable)null;

      label194: {
         Throwable var10000;
         label195: {
            boolean var10001;
            ChannelIterator var28;
            try {
               var28 = var0.iterator();
            } catch (Throwable var24) {
               var10000 = var24;
               var10001 = false;
               break label195;
            }

            while(true) {
               try {
                  InlineMarker.mark(0);
                  Object var5 = var28.hasNext(var3);
                  InlineMarker.mark(1);
                  if (!(Boolean)var5) {
                     break;
                  }

                  var1 = var2.invoke(var1, var28.next());
               } catch (Throwable var25) {
                  var10000 = var25;
                  var10001 = false;
                  break label195;
               }
            }

            label178:
            try {
               Unit var27 = Unit.INSTANCE;
               break label194;
            } catch (Throwable var23) {
               var10000 = var23;
               var10001 = false;
               break label178;
            }
         }

         Throwable var26 = var10000;

         try {
            throw var26;
         } finally {
            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, var26);
            InlineMarker.finallyEnd(1);
         }
      }

      InlineMarker.finallyStart(1);
      ChannelsKt.cancelConsumed(var0, (Throwable)null);
      InlineMarker.finallyEnd(1);
      return var1;
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object foldIndexed(ReceiveChannel var0, Object var1, Function3 var2, Continuation var3) {
      Object var592;
      label4802: {
         if (var3 instanceof <undefinedtype>) {
            <undefinedtype> var5 = (<undefinedtype>)var3;
            if ((var5.label & Integer.MIN_VALUE) != 0) {
               var5.label += Integer.MIN_VALUE;
               var592 = var5;
               break label4802;
            }
         }

         var592 = new ContinuationImpl(var3) {
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            Object L$8;
            Object L$9;
            int label;
            Object result;

            public final Object invokeSuspend(Object var1) {
               this.result = var1;
               this.label |= Integer.MIN_VALUE;
               return ChannelsKt.foldIndexed((ReceiveChannel)null, (Object)null, (Function3)null, this);
            }
         };
      }

      Throwable var589;
      label4797: {
         Throwable var10000;
         label4805: {
            boolean var10001;
            ReceiveChannel var588;
            Ref.ObjectRef var593;
            Throwable var594;
            label4795: {
               Object var14 = ((<undefinedtype>)var592).result;
               Object var11 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
               int var4 = ((<undefinedtype>)var592).label;
               Ref.IntRef var6;
               Object var7;
               Function3 var8;
               ReceiveChannel var9;
               ChannelIterator var10;
               ReceiveChannel var12;
               Object var13;
               ReceiveChannel var590;
               Throwable var597;
               Object var599;
               ReceiveChannel var600;
               if (var4 != 0) {
                  if (var4 != 1) {
                     throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                  }

                  var10 = (ChannelIterator)((<undefinedtype>)var592).L$9;
                  var12 = (ReceiveChannel)((<undefinedtype>)var592).L$8;
                  var594 = (Throwable)((<undefinedtype>)var592).L$7;
                  var588 = (ReceiveChannel)((<undefinedtype>)var592).L$6;
                  var9 = (ReceiveChannel)((<undefinedtype>)var592).L$5;
                  Ref.ObjectRef var587 = (Ref.ObjectRef)((<undefinedtype>)var592).L$4;
                  var6 = (Ref.IntRef)((<undefinedtype>)var592).L$3;
                  var8 = (Function3)((<undefinedtype>)var592).L$2;
                  var7 = ((<undefinedtype>)var592).L$1;
                  var590 = (ReceiveChannel)((<undefinedtype>)var592).L$0;

                  try {
                     ResultKt.throwOnFailure(var14);
                  } catch (Throwable var564) {
                     var0 = var588;
                     var589 = var564;
                     break label4797;
                  }

                  var13 = var592;
                  var593 = var587;
                  var0 = var588;

                  try {
                     if (!(Boolean)var14) {
                        break label4795;
                     }
                  } catch (Throwable var582) {
                     var10000 = var582;
                     var10001 = false;
                     break label4805;
                  }

                  var0 = var588;

                  try {
                     var14 = var10.next();
                  } catch (Throwable var583) {
                     var10000 = var583;
                     var10001 = false;
                     break label4805;
                  }

                  var0 = var588;

                  try {
                     var4 = var6.element;
                  } catch (Throwable var584) {
                     var10000 = var584;
                     var10001 = false;
                     break label4805;
                  }

                  var0 = var588;

                  try {
                     var6.element = var4 + 1;
                  } catch (Throwable var585) {
                     var10000 = var585;
                     var10001 = false;
                     break label4805;
                  }

                  var0 = var588;

                  try {
                     var593.element = var8.invoke(Boxing.boxInt(var4), var593.element, var14);
                  } catch (Throwable var586) {
                     var10000 = var586;
                     var10001 = false;
                     break label4805;
                  }

                  var600 = var9;
                  var599 = var7;
                  var597 = var594;
               } else {
                  ResultKt.throwOnFailure(var14);
                  var6 = new Ref.IntRef();
                  var6.element = 0;
                  Ref.ObjectRef var598 = new Ref.ObjectRef();
                  var598.element = var1;
                  var589 = (Throwable)null;

                  try {
                     var10 = var0.iterator();
                  } finally {
                     break label4797;
                  }

               }

               while(true) {
                  var0 = var588;

                  try {
                     ((<undefinedtype>)var13).L$0 = var590;
                  } catch (Throwable var576) {
                     var10000 = var576;
                     var10001 = false;
                     break label4805;
                  }

                  var0 = var588;

                  try {
                     ((<undefinedtype>)var13).L$1 = var599;
                  } catch (Throwable var575) {
                     var10000 = var575;
                     var10001 = false;
                     break label4805;
                  }

                  var0 = var588;

                  try {
                     ((<undefinedtype>)var13).L$2 = var8;
                  } catch (Throwable var574) {
                     var10000 = var574;
                     var10001 = false;
                     break label4805;
                  }

                  var0 = var588;

                  try {
                     ((<undefinedtype>)var13).L$3 = var6;
                  } catch (Throwable var573) {
                     var10000 = var573;
                     var10001 = false;
                     break label4805;
                  }

                  var0 = var588;

                  try {
                     ((<undefinedtype>)var13).L$4 = var593;
                  } catch (Throwable var572) {
                     var10000 = var572;
                     var10001 = false;
                     break label4805;
                  }

                  var0 = var588;

                  try {
                     ((<undefinedtype>)var13).L$5 = var600;
                  } catch (Throwable var571) {
                     var10000 = var571;
                     var10001 = false;
                     break label4805;
                  }

                  var0 = var588;

                  try {
                     ((<undefinedtype>)var13).L$6 = var588;
                  } catch (Throwable var570) {
                     var10000 = var570;
                     var10001 = false;
                     break label4805;
                  }

                  var0 = var588;

                  try {
                     ((<undefinedtype>)var13).L$7 = var597;
                  } catch (Throwable var569) {
                     var10000 = var569;
                     var10001 = false;
                     break label4805;
                  }

                  var0 = var588;

                  try {
                     ((<undefinedtype>)var13).L$8 = var12;
                  } catch (Throwable var568) {
                     var10000 = var568;
                     var10001 = false;
                     break label4805;
                  }

                  var0 = var588;

                  try {
                     ((<undefinedtype>)var13).L$9 = var10;
                  } catch (Throwable var567) {
                     var10000 = var567;
                     var10001 = false;
                     break label4805;
                  }

                  var0 = var588;

                  try {
                     ((<undefinedtype>)var13).label = 1;
                  } catch (Throwable var566) {
                     var10000 = var566;
                     var10001 = false;
                     break label4805;
                  }

                  var0 = var588;

                  Object var595;
                  try {
                     var595 = var10.hasNext((Continuation)var13);
                  } catch (Throwable var565) {
                     var10000 = var565;
                     var10001 = false;
                     break label4805;
                  }

                  if (var595 == var11) {
                     return var11;
                  }

                  Object var596 = var595;
                  var594 = var597;
                  var7 = var599;
                  var9 = var600;
                  var14 = var596;
                  var0 = var588;

                  try {
                     if (!(Boolean)var14) {
                        break;
                     }
                  } catch (Throwable var581) {
                     var10000 = var581;
                     var10001 = false;
                     break label4805;
                  }

                  var0 = var588;

                  try {
                     var14 = var10.next();
                  } catch (Throwable var580) {
                     var10000 = var580;
                     var10001 = false;
                     break label4805;
                  }

                  var0 = var588;

                  try {
                     var4 = var6.element;
                  } catch (Throwable var579) {
                     var10000 = var579;
                     var10001 = false;
                     break label4805;
                  }

                  var0 = var588;

                  try {
                     var6.element = var4 + 1;
                  } catch (Throwable var578) {
                     var10000 = var578;
                     var10001 = false;
                     break label4805;
                  }

                  var0 = var588;

                  try {
                     var593.element = var8.invoke(Boxing.boxInt(var4), var593.element, var14);
                  } catch (Throwable var577) {
                     var10000 = var577;
                     var10001 = false;
                     break label4805;
                  }

                  var600 = var9;
                  var599 = var7;
                  var597 = var594;
               }
            }

            var0 = var588;

            try {
               Unit var591 = Unit.INSTANCE;
            } catch (Throwable var562) {
               var10000 = var562;
               var10001 = false;
               break label4805;
            }

            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var588, var594);
            InlineMarker.finallyEnd(1);
            return var593.element;
         }

         var589 = var10000;
      }

      try {
         throw var589;
      } finally {
         InlineMarker.finallyStart(1);
         ChannelsKt.cancelConsumed(var0, var589);
         InlineMarker.finallyEnd(1);
      }
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   private static final Object foldIndexed$$forInline(ReceiveChannel var0, Object var1, Function3 var2, Continuation var3) {
      Throwable var5 = (Throwable)null;

      label204: {
         Throwable var10000;
         label205: {
            boolean var10001;
            ChannelIterator var29;
            try {
               var29 = var0.iterator();
            } catch (Throwable var26) {
               var10000 = var26;
               var10001 = false;
               break label205;
            }

            int var4 = 0;

            while(true) {
               try {
                  InlineMarker.mark(0);
                  Object var6 = var29.hasNext(var3);
                  InlineMarker.mark(1);
                  if (!(Boolean)var6) {
                     break;
                  }

                  var1 = var2.invoke(var4, var1, var29.next());
               } catch (Throwable var25) {
                  var10000 = var25;
                  var10001 = false;
                  break label205;
               }

               ++var4;
            }

            label187:
            try {
               Unit var28 = Unit.INSTANCE;
               break label204;
            } catch (Throwable var24) {
               var10000 = var24;
               var10001 = false;
               break label187;
            }
         }

         Throwable var27 = var10000;

         try {
            throw var27;
         } finally {
            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, var27);
            InlineMarker.finallyEnd(1);
         }
      }

      InlineMarker.finallyStart(1);
      ChannelsKt.cancelConsumed(var0, (Throwable)null);
      InlineMarker.finallyEnd(1);
      return var1;
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object groupBy(ReceiveChannel param0, Function1 param1, Continuation param2) {
      // $FF: Couldn't be decompiled
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object groupBy(ReceiveChannel var0, Function1 var1, Function1 var2, Continuation var3) {
      Object var906;
      label7420: {
         if (var3 instanceof <undefinedtype>) {
            <undefinedtype> var5 = (<undefinedtype>)var3;
            if ((var5.label & Integer.MIN_VALUE) != 0) {
               var5.label += Integer.MIN_VALUE;
               var906 = var5;
               break label7420;
            }
         }

         var906 = new ContinuationImpl(var3) {
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            Object L$8;
            Object L$9;
            int label;
            Object result;

            public final Object invokeSuspend(Object var1) {
               this.result = var1;
               this.label |= Integer.MIN_VALUE;
               return ChannelsKt.groupBy((ReceiveChannel)null, (Function1)null, (Function1)null, this);
            }
         };
      }

      label7415: {
         Throwable var10000;
         label7423: {
            ReceiveChannel var903;
            Throwable var908;
            Map var910;
            boolean var10001;
            label7413: {
               Object var14 = ((<undefinedtype>)var906).result;
               Object var909 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
               int var4 = ((<undefinedtype>)var906).label;
               ChannelIterator var6;
               Object var7;
               Object var8;
               ReceiveChannel var9;
               ReceiveChannel var905;
               ReceiveChannel var10;
               Function1 var11;
               ReceiveChannel var12;
               Function1 var13;
               Object var16;
               Object var17;
               Throwable var915;
               ArrayList var916;
               Object var917;
               ReceiveChannel var918;
               if (var4 != 0) {
                  if (var4 != 1) {
                     throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                  }

                  var6 = (ChannelIterator)((<undefinedtype>)var906).L$9;
                  var10 = (ReceiveChannel)((<undefinedtype>)var906).L$8;
                  Throwable var902 = (Throwable)((<undefinedtype>)var906).L$7;
                  var903 = (ReceiveChannel)((<undefinedtype>)var906).L$6;
                  var12 = (ReceiveChannel)((<undefinedtype>)var906).L$5;
                  Map var904 = (Map)((<undefinedtype>)var906).L$4;
                  var9 = (ReceiveChannel)((<undefinedtype>)var906).L$3;
                  var11 = (Function1)((<undefinedtype>)var906).L$2;
                  var13 = (Function1)((<undefinedtype>)var906).L$1;
                  ReceiveChannel var15 = (ReceiveChannel)((<undefinedtype>)var906).L$0;

                  try {
                     ResultKt.throwOnFailure(var14);
                  } catch (Throwable var871) {
                     var905 = var903;
                     var1 = var871;
                     var0 = var905;
                     break label7415;
                  }

                  var7 = var906;
                  var8 = var909;
                  var908 = var902;
                  var910 = var904;
                  var905 = var15;
                  var0 = var903;

                  try {
                     if (!(Boolean)var14) {
                        break label7413;
                     }
                  } catch (Throwable var893) {
                     var10000 = var893;
                     var10001 = false;
                     break label7423;
                  }

                  var0 = var903;

                  try {
                     var16 = var6.next();
                  } catch (Throwable var894) {
                     var10000 = var894;
                     var10001 = false;
                     break label7423;
                  }

                  var0 = var903;

                  try {
                     var17 = var13.invoke(var16);
                  } catch (Throwable var895) {
                     var10000 = var895;
                     var10001 = false;
                     break label7423;
                  }

                  var0 = var903;

                  try {
                     var917 = var910.get(var17);
                  } catch (Throwable var896) {
                     var10000 = var896;
                     var10001 = false;
                     break label7423;
                  }

                  var14 = var917;
                  if (var917 == null) {
                     var0 = var903;

                     try {
                        var916 = new ArrayList;
                     } catch (Throwable var897) {
                        var10000 = var897;
                        var10001 = false;
                        break label7423;
                     }

                     var0 = var903;

                     try {
                        var916.<init>();
                     } catch (Throwable var898) {
                        var10000 = var898;
                        var10001 = false;
                        break label7423;
                     }

                     var0 = var903;

                     try {
                        var14 = (List)var916;
                     } catch (Throwable var899) {
                        var10000 = var899;
                        var10001 = false;
                        break label7423;
                     }

                     var0 = var903;

                     try {
                        var910.put(var17, var14);
                     } catch (Throwable var900) {
                        var10000 = var900;
                        var10001 = false;
                        break label7423;
                     }
                  }

                  var0 = var903;

                  try {
                     ((List)var14).add(var11.invoke(var16));
                  } catch (Throwable var901) {
                     var10000 = var901;
                     var10001 = false;
                     break label7423;
                  }

                  var918 = var12;
                  var915 = var908;
               } else {
                  ResultKt.throwOnFailure(var14);
                  Map var911 = (Map)(new LinkedHashMap());
                  Throwable var912 = (Throwable)null;

                  try {
                     ChannelIterator var914 = var0.iterator();
                  } finally {
                     break label7415;
                  }

               }

               while(true) {
                  var0 = var903;

                  try {
                     ((<undefinedtype>)var7).L$0 = var905;
                  } catch (Throwable var883) {
                     var10000 = var883;
                     var10001 = false;
                     break label7423;
                  }

                  var0 = var903;

                  try {
                     ((<undefinedtype>)var7).L$1 = var13;
                  } catch (Throwable var882) {
                     var10000 = var882;
                     var10001 = false;
                     break label7423;
                  }

                  var0 = var903;

                  try {
                     ((<undefinedtype>)var7).L$2 = var11;
                  } catch (Throwable var881) {
                     var10000 = var881;
                     var10001 = false;
                     break label7423;
                  }

                  var0 = var903;

                  try {
                     ((<undefinedtype>)var7).L$3 = var9;
                  } catch (Throwable var880) {
                     var10000 = var880;
                     var10001 = false;
                     break label7423;
                  }

                  var0 = var903;

                  try {
                     ((<undefinedtype>)var7).L$4 = var910;
                  } catch (Throwable var879) {
                     var10000 = var879;
                     var10001 = false;
                     break label7423;
                  }

                  var0 = var903;

                  try {
                     ((<undefinedtype>)var7).L$5 = var918;
                  } catch (Throwable var878) {
                     var10000 = var878;
                     var10001 = false;
                     break label7423;
                  }

                  var0 = var903;

                  try {
                     ((<undefinedtype>)var7).L$6 = var903;
                  } catch (Throwable var877) {
                     var10000 = var877;
                     var10001 = false;
                     break label7423;
                  }

                  var0 = var903;

                  try {
                     ((<undefinedtype>)var7).L$7 = var915;
                  } catch (Throwable var876) {
                     var10000 = var876;
                     var10001 = false;
                     break label7423;
                  }

                  var0 = var903;

                  try {
                     ((<undefinedtype>)var7).L$8 = var10;
                  } catch (Throwable var875) {
                     var10000 = var875;
                     var10001 = false;
                     break label7423;
                  }

                  var0 = var903;

                  try {
                     ((<undefinedtype>)var7).L$9 = var6;
                  } catch (Throwable var874) {
                     var10000 = var874;
                     var10001 = false;
                     break label7423;
                  }

                  var0 = var903;

                  try {
                     ((<undefinedtype>)var7).label = 1;
                  } catch (Throwable var873) {
                     var10000 = var873;
                     var10001 = false;
                     break label7423;
                  }

                  var0 = var903;

                  try {
                     var906 = var6.hasNext((Continuation)var7);
                  } catch (Throwable var872) {
                     var10000 = var872;
                     var10001 = false;
                     break label7423;
                  }

                  if (var906 == var8) {
                     return var8;
                  }

                  Object var913 = var906;
                  var908 = var915;
                  var12 = var918;
                  var14 = var913;
                  var0 = var903;

                  try {
                     if (!(Boolean)var14) {
                        break;
                     }
                  } catch (Throwable var892) {
                     var10000 = var892;
                     var10001 = false;
                     break label7423;
                  }

                  var0 = var903;

                  try {
                     var16 = var6.next();
                  } catch (Throwable var891) {
                     var10000 = var891;
                     var10001 = false;
                     break label7423;
                  }

                  var0 = var903;

                  try {
                     var17 = var13.invoke(var16);
                  } catch (Throwable var890) {
                     var10000 = var890;
                     var10001 = false;
                     break label7423;
                  }

                  var0 = var903;

                  try {
                     var917 = var910.get(var17);
                  } catch (Throwable var889) {
                     var10000 = var889;
                     var10001 = false;
                     break label7423;
                  }

                  var14 = var917;
                  if (var917 == null) {
                     var0 = var903;

                     try {
                        var916 = new ArrayList;
                     } catch (Throwable var888) {
                        var10000 = var888;
                        var10001 = false;
                        break label7423;
                     }

                     var0 = var903;

                     try {
                        var916.<init>();
                     } catch (Throwable var887) {
                        var10000 = var887;
                        var10001 = false;
                        break label7423;
                     }

                     var0 = var903;

                     try {
                        var14 = (List)var916;
                     } catch (Throwable var886) {
                        var10000 = var886;
                        var10001 = false;
                        break label7423;
                     }

                     var0 = var903;

                     try {
                        var910.put(var17, var14);
                     } catch (Throwable var885) {
                        var10000 = var885;
                        var10001 = false;
                        break label7423;
                     }
                  }

                  var0 = var903;

                  try {
                     ((List)var14).add(var11.invoke(var16));
                  } catch (Throwable var884) {
                     var10000 = var884;
                     var10001 = false;
                     break label7423;
                  }

                  var918 = var12;
                  var915 = var908;
               }
            }

            var0 = var903;

            try {
               Unit var907 = Unit.INSTANCE;
            } catch (Throwable var869) {
               var10000 = var869;
               var10001 = false;
               break label7423;
            }

            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var903, var908);
            InlineMarker.finallyEnd(1);
            return var910;
         }

         var1 = var10000;
      }

      try {
         throw var1;
      } finally {
         InlineMarker.finallyStart(1);
         ChannelsKt.cancelConsumed(var0, (Throwable)var1);
         InlineMarker.finallyEnd(1);
      }
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   private static final Object groupBy$$forInline(ReceiveChannel var0, Function1 var1, Continuation var2) {
      Map var5 = (Map)(new LinkedHashMap());
      Throwable var3 = (Throwable)null;

      label337: {
         Throwable var10000;
         label332: {
            ChannelIterator var6;
            boolean var10001;
            try {
               var6 = var0.iterator();
            } catch (Throwable var49) {
               var10000 = var49;
               var10001 = false;
               break label332;
            }

            while(true) {
               Object var4;
               Object var7;
               Object var8;
               Object var53;
               label329: {
                  try {
                     InlineMarker.mark(0);
                     var53 = var6.hasNext(var2);
                     InlineMarker.mark(1);
                     if ((Boolean)var53) {
                        var8 = var6.next();
                        var7 = var1.invoke(var8);
                        var4 = var5.get(var7);
                        break label329;
                     }
                  } catch (Throwable var50) {
                     var10000 = var50;
                     var10001 = false;
                     break;
                  }

                  try {
                     Unit var51 = Unit.INSTANCE;
                     break label337;
                  } catch (Throwable var46) {
                     var10000 = var46;
                     var10001 = false;
                     break;
                  }
               }

               var53 = var4;
               if (var4 == null) {
                  try {
                     ArrayList var54 = new ArrayList();
                     var53 = (List)var54;
                     var5.put(var7, var53);
                  } catch (Throwable var48) {
                     var10000 = var48;
                     var10001 = false;
                     break;
                  }
               }

               try {
                  ((List)var53).add(var8);
               } catch (Throwable var47) {
                  var10000 = var47;
                  var10001 = false;
                  break;
               }
            }
         }

         Throwable var52 = var10000;

         try {
            throw var52;
         } finally {
            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, var52);
            InlineMarker.finallyEnd(1);
         }
      }

      InlineMarker.finallyStart(1);
      ChannelsKt.cancelConsumed(var0, (Throwable)null);
      InlineMarker.finallyEnd(1);
      return var5;
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   private static final Object groupBy$$forInline(ReceiveChannel var0, Function1 var1, Function1 var2, Continuation var3) {
      Map var6 = (Map)(new LinkedHashMap());
      Throwable var4 = (Throwable)null;

      label337: {
         Throwable var10000;
         label332: {
            ChannelIterator var7;
            boolean var10001;
            try {
               var7 = var0.iterator();
            } catch (Throwable var50) {
               var10000 = var50;
               var10001 = false;
               break label332;
            }

            while(true) {
               Object var5;
               Object var8;
               Object var9;
               Object var54;
               label329: {
                  try {
                     InlineMarker.mark(0);
                     var54 = var7.hasNext(var3);
                     InlineMarker.mark(1);
                     if ((Boolean)var54) {
                        var8 = var7.next();
                        var9 = var1.invoke(var8);
                        var5 = var6.get(var9);
                        break label329;
                     }
                  } catch (Throwable var51) {
                     var10000 = var51;
                     var10001 = false;
                     break;
                  }

                  try {
                     Unit var52 = Unit.INSTANCE;
                     break label337;
                  } catch (Throwable var47) {
                     var10000 = var47;
                     var10001 = false;
                     break;
                  }
               }

               var54 = var5;
               if (var5 == null) {
                  try {
                     ArrayList var55 = new ArrayList();
                     var54 = (List)var55;
                     var6.put(var9, var54);
                  } catch (Throwable var49) {
                     var10000 = var49;
                     var10001 = false;
                     break;
                  }
               }

               try {
                  ((List)var54).add(var2.invoke(var8));
               } catch (Throwable var48) {
                  var10000 = var48;
                  var10001 = false;
                  break;
               }
            }
         }

         Throwable var53 = var10000;

         try {
            throw var53;
         } finally {
            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, var53);
            InlineMarker.finallyEnd(1);
         }
      }

      InlineMarker.finallyStart(1);
      ChannelsKt.cancelConsumed(var0, (Throwable)null);
      InlineMarker.finallyEnd(1);
      return var6;
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object groupByTo(ReceiveChannel var0, Map var1, Function1 var2, Continuation var3) {
      Object var245;
      label2168: {
         if (var3 instanceof <undefinedtype>) {
            <undefinedtype> var5 = (<undefinedtype>)var3;
            if ((var5.label & Integer.MIN_VALUE) != 0) {
               var5.label += Integer.MIN_VALUE;
               var245 = var5;
               break label2168;
            }
         }

         var245 = new ContinuationImpl(var3) {
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            int label;
            Object result;

            public final Object invokeSuspend(Object var1) {
               this.result = var1;
               this.label |= Integer.MIN_VALUE;
               return ChannelsKt.groupByTo((ReceiveChannel)null, (Map)null, (Function1)null, this);
            }
         };
      }

      Throwable var241;
      ReceiveChannel var242;
      label2162: {
         Throwable var10000;
         label2171: {
            Object var12 = ((<undefinedtype>)var245).result;
            Object var247 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
            int var4 = ((<undefinedtype>)var245).label;
            ChannelIterator var6;
            ReceiveChannel var7;
            ReceiveChannel var8;
            Throwable var9;
            Map var10;
            ReceiveChannel var11;
            boolean var10001;
            Function1 var243;
            Object var244;
            Function1 var248;
            if (var4 != 0) {
               if (var4 != 1) {
                  throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
               }

               var6 = (ChannelIterator)((<undefinedtype>)var245).L$7;
               var11 = (ReceiveChannel)((<undefinedtype>)var245).L$6;
               var9 = (Throwable)((<undefinedtype>)var245).L$5;
               var0 = (ReceiveChannel)((<undefinedtype>)var245).L$4;
               var7 = (ReceiveChannel)((<undefinedtype>)var245).L$3;
               Function1 var13 = (Function1)((<undefinedtype>)var245).L$2;
               var10 = (Map)((<undefinedtype>)var245).L$1;
               var8 = (ReceiveChannel)((<undefinedtype>)var245).L$0;
               var242 = var0;

               try {
                  ResultKt.throwOnFailure(var12);
               } catch (Throwable var238) {
                  var10000 = var238;
                  var10001 = false;
                  break label2171;
               }

               var244 = var247;
               var248 = var13;
            } else {
               ResultKt.throwOnFailure(var12);
               Throwable var249 = (Throwable)null;

               try {
                  var6 = var0.iterator();
               } catch (Throwable var229) {
                  var242 = var0;
                  var241 = var229;
                  break label2162;
               }

               var12 = null;
               var10 = var1;
               Function1 var250 = var2;
               var7 = var0;
               var8 = var0;
               var244 = var245;
               var9 = (Throwable)var12;
               var243 = var250;
               var11 = var0;

               try {
                  ((<undefinedtype>)var244).L$0 = var8;
                  ((<undefinedtype>)var244).L$1 = var10;
                  ((<undefinedtype>)var244).L$2 = var243;
                  ((<undefinedtype>)var244).L$3 = var7;
                  ((<undefinedtype>)var244).L$4 = var0;
                  ((<undefinedtype>)var244).L$5 = var9;
                  ((<undefinedtype>)var244).L$6 = var11;
                  ((<undefinedtype>)var244).L$7 = var6;
                  ((<undefinedtype>)var244).label = 1;
                  var12 = var6.hasNext((Continuation)var244);
               } catch (Throwable var240) {
                  var242 = var0;
                  var241 = var240;
                  break label2162;
               }

               if (var12 == var247) {
                  return var247;
               }

               var245 = var245;
               var244 = var247;
               var248 = var243;
            }

            while(true) {
               var242 = var0;

               try {
                  if (!(Boolean)var12) {
                     break;
                  }
               } catch (Throwable var239) {
                  var10000 = var239;
                  var10001 = false;
                  break label2171;
               }

               var242 = var0;

               Object var15;
               try {
                  var15 = var6.next();
               } catch (Throwable var237) {
                  var10000 = var237;
                  var10001 = false;
                  break label2171;
               }

               var242 = var0;

               Object var14;
               try {
                  var14 = var248.invoke(var15);
               } catch (Throwable var236) {
                  var10000 = var236;
                  var10001 = false;
                  break label2171;
               }

               var242 = var0;

               Object var251;
               try {
                  var251 = var10.get(var14);
               } catch (Throwable var235) {
                  var10000 = var235;
                  var10001 = false;
                  break label2171;
               }

               var12 = var251;
               if (var251 == null) {
                  var242 = var0;

                  ArrayList var252;
                  try {
                     var252 = new ArrayList;
                  } catch (Throwable var234) {
                     var10000 = var234;
                     var10001 = false;
                     break label2171;
                  }

                  var242 = var0;

                  try {
                     var252.<init>();
                  } catch (Throwable var233) {
                     var10000 = var233;
                     var10001 = false;
                     break label2171;
                  }

                  var242 = var0;

                  try {
                     var12 = (List)var252;
                  } catch (Throwable var232) {
                     var10000 = var232;
                     var10001 = false;
                     break label2171;
                  }

                  var242 = var0;

                  try {
                     var10.put(var14, var12);
                  } catch (Throwable var231) {
                     var10000 = var231;
                     var10001 = false;
                     break label2171;
                  }
               }

               var242 = var0;

               try {
                  ((List)var12).add(var15);
               } catch (Throwable var230) {
                  var10000 = var230;
                  var10001 = false;
                  break label2171;
               }

               var243 = var248;
               var247 = var244;
               var244 = var245;

               try {
                  ((<undefinedtype>)var244).L$0 = var8;
                  ((<undefinedtype>)var244).L$1 = var10;
                  ((<undefinedtype>)var244).L$2 = var243;
                  ((<undefinedtype>)var244).L$3 = var7;
                  ((<undefinedtype>)var244).L$4 = var0;
                  ((<undefinedtype>)var244).L$5 = var9;
                  ((<undefinedtype>)var244).L$6 = var11;
                  ((<undefinedtype>)var244).L$7 = var6;
                  ((<undefinedtype>)var244).label = 1;
                  var12 = var6.hasNext((Continuation)var244);
               } catch (Throwable var228) {
                  var242 = var0;
                  var241 = var228;
                  break label2162;
               }

               if (var12 == var247) {
                  return var247;
               }

               var245 = var245;
               var244 = var247;
               var248 = var243;
            }

            var242 = var0;

            try {
               Unit var246 = Unit.INSTANCE;
            } catch (Throwable var227) {
               var10000 = var227;
               var10001 = false;
               break label2171;
            }

            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, var9);
            InlineMarker.finallyEnd(1);
            return var10;
         }

         var241 = var10000;
      }

      try {
         throw var241;
      } finally {
         InlineMarker.finallyStart(1);
         ChannelsKt.cancelConsumed(var242, var241);
         InlineMarker.finallyEnd(1);
      }
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object groupByTo(ReceiveChannel var0, Map var1, Function1 var2, Function1 var3, Continuation var4) {
      Object var847;
      label6815: {
         if (var4 instanceof <undefinedtype>) {
            <undefinedtype> var6 = (<undefinedtype>)var4;
            if ((var6.label & Integer.MIN_VALUE) != 0) {
               var6.label += Integer.MIN_VALUE;
               var847 = var6;
               break label6815;
            }
         }

         var847 = new ContinuationImpl(var4) {
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            Object L$8;
            int label;
            Object result;

            public final Object invokeSuspend(Object var1) {
               this.result = var1;
               this.label |= Integer.MIN_VALUE;
               return ChannelsKt.groupByTo((ReceiveChannel)null, (Map)null, (Function1)null, (Function1)null, this);
            }
         };
      }

      label6809: {
         Throwable var10000;
         label6818: {
            boolean var10001;
            ReceiveChannel var843;
            Throwable var846;
            Map var848;
            label6807: {
               Object var13 = ((<undefinedtype>)var847).result;
               Object var8 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
               int var5 = ((<undefinedtype>)var847).label;
               Function1 var7;
               ReceiveChannel var9;
               ChannelIterator var10;
               Function1 var11;
               ReceiveChannel var12;
               Object var14;
               Object var15;
               Object var16;
               ReceiveChannel var844;
               Object var849;
               ArrayList var851;
               if (var5 != 0) {
                  if (var5 != 1) {
                     throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                  }

                  var10 = (ChannelIterator)((<undefinedtype>)var847).L$8;
                  var12 = (ReceiveChannel)((<undefinedtype>)var847).L$7;
                  var846 = (Throwable)((<undefinedtype>)var847).L$6;
                  var843 = (ReceiveChannel)((<undefinedtype>)var847).L$5;
                  var9 = (ReceiveChannel)((<undefinedtype>)var847).L$4;
                  var7 = (Function1)((<undefinedtype>)var847).L$3;
                  var11 = (Function1)((<undefinedtype>)var847).L$2;
                  Map var842 = (Map)((<undefinedtype>)var847).L$1;
                  var844 = (ReceiveChannel)((<undefinedtype>)var847).L$0;

                  try {
                     ResultKt.throwOnFailure(var13);
                  } catch (Throwable var812) {
                     var844 = var843;
                     var1 = var812;
                     var0 = var844;
                     break label6809;
                  }

                  var849 = var847;
                  var848 = var842;
                  var0 = var843;

                  try {
                     if (!(Boolean)var13) {
                        break label6807;
                     }
                  } catch (Throwable var833) {
                     var10000 = var833;
                     var10001 = false;
                     break label6818;
                  }

                  var0 = var843;

                  try {
                     var16 = var10.next();
                  } catch (Throwable var834) {
                     var10000 = var834;
                     var10001 = false;
                     break label6818;
                  }

                  var0 = var843;

                  try {
                     var15 = var11.invoke(var16);
                  } catch (Throwable var835) {
                     var10000 = var835;
                     var10001 = false;
                     break label6818;
                  }

                  var0 = var843;

                  try {
                     var14 = var848.get(var15);
                  } catch (Throwable var836) {
                     var10000 = var836;
                     var10001 = false;
                     break label6818;
                  }

                  var13 = var14;
                  if (var14 == null) {
                     var0 = var843;

                     try {
                        var851 = new ArrayList;
                     } catch (Throwable var837) {
                        var10000 = var837;
                        var10001 = false;
                        break label6818;
                     }

                     var0 = var843;

                     try {
                        var851.<init>();
                     } catch (Throwable var838) {
                        var10000 = var838;
                        var10001 = false;
                        break label6818;
                     }

                     var0 = var843;

                     try {
                        var13 = (List)var851;
                     } catch (Throwable var839) {
                        var10000 = var839;
                        var10001 = false;
                        break label6818;
                     }

                     var0 = var843;

                     try {
                        var848.put(var15, var13);
                     } catch (Throwable var840) {
                        var10000 = var840;
                        var10001 = false;
                        break label6818;
                     }
                  }

                  var0 = var843;

                  try {
                     ((List)var13).add(var7.invoke(var16));
                  } catch (Throwable var841) {
                     var10000 = var841;
                     var10001 = false;
                     break label6818;
                  }
               } else {
                  ResultKt.throwOnFailure(var13);
                  Throwable var850 = (Throwable)null;

                  try {
                     var10 = var0.iterator();
                  } finally {
                     break label6809;
                  }

               }

               while(true) {
                  var0 = var843;

                  try {
                     ((<undefinedtype>)var849).L$0 = var844;
                  } catch (Throwable var823) {
                     var10000 = var823;
                     var10001 = false;
                     break label6818;
                  }

                  var0 = var843;

                  try {
                     ((<undefinedtype>)var849).L$1 = var848;
                  } catch (Throwable var822) {
                     var10000 = var822;
                     var10001 = false;
                     break label6818;
                  }

                  var0 = var843;

                  try {
                     ((<undefinedtype>)var849).L$2 = var11;
                  } catch (Throwable var821) {
                     var10000 = var821;
                     var10001 = false;
                     break label6818;
                  }

                  var0 = var843;

                  try {
                     ((<undefinedtype>)var849).L$3 = var7;
                  } catch (Throwable var820) {
                     var10000 = var820;
                     var10001 = false;
                     break label6818;
                  }

                  var0 = var843;

                  try {
                     ((<undefinedtype>)var849).L$4 = var9;
                  } catch (Throwable var819) {
                     var10000 = var819;
                     var10001 = false;
                     break label6818;
                  }

                  var0 = var843;

                  try {
                     ((<undefinedtype>)var849).L$5 = var843;
                  } catch (Throwable var818) {
                     var10000 = var818;
                     var10001 = false;
                     break label6818;
                  }

                  var0 = var843;

                  try {
                     ((<undefinedtype>)var849).L$6 = var846;
                  } catch (Throwable var817) {
                     var10000 = var817;
                     var10001 = false;
                     break label6818;
                  }

                  var0 = var843;

                  try {
                     ((<undefinedtype>)var849).L$7 = var12;
                  } catch (Throwable var816) {
                     var10000 = var816;
                     var10001 = false;
                     break label6818;
                  }

                  var0 = var843;

                  try {
                     ((<undefinedtype>)var849).L$8 = var10;
                  } catch (Throwable var815) {
                     var10000 = var815;
                     var10001 = false;
                     break label6818;
                  }

                  var0 = var843;

                  try {
                     ((<undefinedtype>)var849).label = 1;
                  } catch (Throwable var814) {
                     var10000 = var814;
                     var10001 = false;
                     break label6818;
                  }

                  var0 = var843;

                  try {
                     var13 = var10.hasNext((Continuation)var849);
                  } catch (Throwable var813) {
                     var10000 = var813;
                     var10001 = false;
                     break label6818;
                  }

                  if (var13 == var8) {
                     return var8;
                  }

                  var0 = var843;

                  try {
                     if (!(Boolean)var13) {
                        break;
                     }
                  } catch (Throwable var832) {
                     var10000 = var832;
                     var10001 = false;
                     break label6818;
                  }

                  var0 = var843;

                  try {
                     var16 = var10.next();
                  } catch (Throwable var831) {
                     var10000 = var831;
                     var10001 = false;
                     break label6818;
                  }

                  var0 = var843;

                  try {
                     var15 = var11.invoke(var16);
                  } catch (Throwable var830) {
                     var10000 = var830;
                     var10001 = false;
                     break label6818;
                  }

                  var0 = var843;

                  try {
                     var14 = var848.get(var15);
                  } catch (Throwable var829) {
                     var10000 = var829;
                     var10001 = false;
                     break label6818;
                  }

                  var13 = var14;
                  if (var14 == null) {
                     var0 = var843;

                     try {
                        var851 = new ArrayList;
                     } catch (Throwable var828) {
                        var10000 = var828;
                        var10001 = false;
                        break label6818;
                     }

                     var0 = var843;

                     try {
                        var851.<init>();
                     } catch (Throwable var827) {
                        var10000 = var827;
                        var10001 = false;
                        break label6818;
                     }

                     var0 = var843;

                     try {
                        var13 = (List)var851;
                     } catch (Throwable var826) {
                        var10000 = var826;
                        var10001 = false;
                        break label6818;
                     }

                     var0 = var843;

                     try {
                        var848.put(var15, var13);
                     } catch (Throwable var825) {
                        var10000 = var825;
                        var10001 = false;
                        break label6818;
                     }
                  }

                  var0 = var843;

                  try {
                     ((List)var13).add(var7.invoke(var16));
                  } catch (Throwable var824) {
                     var10000 = var824;
                     var10001 = false;
                     break label6818;
                  }
               }
            }

            var0 = var843;

            try {
               Unit var845 = Unit.INSTANCE;
            } catch (Throwable var810) {
               var10000 = var810;
               var10001 = false;
               break label6818;
            }

            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var843, var846);
            InlineMarker.finallyEnd(1);
            return var848;
         }

         var1 = var10000;
      }

      try {
         throw var1;
      } finally {
         InlineMarker.finallyStart(1);
         ChannelsKt.cancelConsumed(var0, (Throwable)var1);
         InlineMarker.finallyEnd(1);
      }
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   private static final Object groupByTo$$forInline(ReceiveChannel var0, Map var1, Function1 var2, Continuation var3) {
      Throwable var4 = (Throwable)null;

      label337: {
         Throwable var10000;
         label332: {
            ChannelIterator var6;
            boolean var10001;
            try {
               var6 = var0.iterator();
            } catch (Throwable var49) {
               var10000 = var49;
               var10001 = false;
               break label332;
            }

            while(true) {
               Object var5;
               Object var7;
               Object var8;
               Object var53;
               label329: {
                  try {
                     InlineMarker.mark(0);
                     var53 = var6.hasNext(var3);
                     InlineMarker.mark(1);
                     if ((Boolean)var53) {
                        var7 = var6.next();
                        var8 = var2.invoke(var7);
                        var5 = var1.get(var8);
                        break label329;
                     }
                  } catch (Throwable var50) {
                     var10000 = var50;
                     var10001 = false;
                     break;
                  }

                  try {
                     Unit var51 = Unit.INSTANCE;
                     break label337;
                  } catch (Throwable var46) {
                     var10000 = var46;
                     var10001 = false;
                     break;
                  }
               }

               var53 = var5;
               if (var5 == null) {
                  try {
                     ArrayList var54 = new ArrayList();
                     var53 = (List)var54;
                     var1.put(var8, var53);
                  } catch (Throwable var48) {
                     var10000 = var48;
                     var10001 = false;
                     break;
                  }
               }

               try {
                  ((List)var53).add(var7);
               } catch (Throwable var47) {
                  var10000 = var47;
                  var10001 = false;
                  break;
               }
            }
         }

         Throwable var52 = var10000;

         try {
            throw var52;
         } finally {
            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, var52);
            InlineMarker.finallyEnd(1);
         }
      }

      InlineMarker.finallyStart(1);
      ChannelsKt.cancelConsumed(var0, (Throwable)null);
      InlineMarker.finallyEnd(1);
      return var1;
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   private static final Object groupByTo$$forInline(ReceiveChannel var0, Map var1, Function1 var2, Function1 var3, Continuation var4) {
      Throwable var5 = (Throwable)null;

      label337: {
         Throwable var10000;
         label332: {
            ChannelIterator var7;
            boolean var10001;
            try {
               var7 = var0.iterator();
            } catch (Throwable var50) {
               var10000 = var50;
               var10001 = false;
               break label332;
            }

            while(true) {
               Object var6;
               Object var8;
               Object var9;
               Object var54;
               label329: {
                  try {
                     InlineMarker.mark(0);
                     var54 = var7.hasNext(var4);
                     InlineMarker.mark(1);
                     if ((Boolean)var54) {
                        var8 = var7.next();
                        var9 = var2.invoke(var8);
                        var6 = var1.get(var9);
                        break label329;
                     }
                  } catch (Throwable var51) {
                     var10000 = var51;
                     var10001 = false;
                     break;
                  }

                  try {
                     Unit var52 = Unit.INSTANCE;
                     break label337;
                  } catch (Throwable var47) {
                     var10000 = var47;
                     var10001 = false;
                     break;
                  }
               }

               var54 = var6;
               if (var6 == null) {
                  try {
                     ArrayList var55 = new ArrayList();
                     var54 = (List)var55;
                     var1.put(var9, var54);
                  } catch (Throwable var49) {
                     var10000 = var49;
                     var10001 = false;
                     break;
                  }
               }

               try {
                  ((List)var54).add(var3.invoke(var8));
               } catch (Throwable var48) {
                  var10000 = var48;
                  var10001 = false;
                  break;
               }
            }
         }

         Throwable var53 = var10000;

         try {
            throw var53;
         } finally {
            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, var53);
            InlineMarker.finallyEnd(1);
         }
      }

      InlineMarker.finallyStart(1);
      ChannelsKt.cancelConsumed(var0, (Throwable)null);
      InlineMarker.finallyEnd(1);
      return var1;
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object indexOf(ReceiveChannel var0, Object var1, Continuation var2) {
      Object var454;
      label4118: {
         if (var2 instanceof <undefinedtype>) {
            <undefinedtype> var4 = (<undefinedtype>)var2;
            if ((var4.label & Integer.MIN_VALUE) != 0) {
               var4.label += Integer.MIN_VALUE;
               var454 = var4;
               break label4118;
            }
         }

         var454 = new ContinuationImpl(var2) {
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            int label;
            Object result;

            public final Object invokeSuspend(Object var1) {
               this.result = var1;
               this.label |= Integer.MIN_VALUE;
               return ChannelsKt.indexOf((ReceiveChannel)null, (Object)null, this);
            }
         };
      }

      Throwable var451;
      ReceiveChannel var453;
      label4113: {
         Throwable var10000;
         label4112: {
            Object var12 = ((<undefinedtype>)var454).result;
            Object var5 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
            int var3 = ((<undefinedtype>)var454).label;
            ReceiveChannel var6;
            ReceiveChannel var7;
            Ref.IntRef var456;
            Object var8;
            Object var9;
            Integer var457;
            ChannelIterator var10;
            Throwable var458;
            ReceiveChannel var11;
            Ref.IntRef var459;
            Unit var460;
            boolean var10001;
            if (var3 != 0) {
               label4121: {
                  if (var3 != 1) {
                     throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                  }

                  var10 = (ChannelIterator)((<undefinedtype>)var454).L$7;
                  var7 = (ReceiveChannel)((<undefinedtype>)var454).L$6;
                  Throwable var452 = (Throwable)((<undefinedtype>)var454).L$5;
                  var0 = (ReceiveChannel)((<undefinedtype>)var454).L$4;
                  var6 = (ReceiveChannel)((<undefinedtype>)var454).L$3;
                  var456 = (Ref.IntRef)((<undefinedtype>)var454).L$2;
                  var8 = ((<undefinedtype>)var454).L$1;
                  var11 = (ReceiveChannel)((<undefinedtype>)var454).L$0;

                  try {
                     ResultKt.throwOnFailure(var12);
                  } catch (Throwable var431) {
                     var453 = var0;
                     var451 = var431;
                     break label4113;
                  }

                  var9 = var454;
                  var453 = var0;

                  label4122: {
                     try {
                        if (!(Boolean)var12) {
                           break label4122;
                        }
                     } catch (Throwable var446) {
                        var10000 = var446;
                        var10001 = false;
                        break label4112;
                     }

                     var453 = var0;

                     label4123: {
                        try {
                           if (!Intrinsics.areEqual(var8, var10.next())) {
                              break label4123;
                           }
                        } catch (Throwable var447) {
                           var10000 = var447;
                           var10001 = false;
                           break label4112;
                        }

                        var453 = var0;

                        try {
                           var457 = Boxing.boxInt(var456.element);
                        } catch (Throwable var448) {
                           var10000 = var448;
                           var10001 = false;
                           break label4112;
                        }

                        ChannelsKt.cancelConsumed(var0, var452);
                        return var457;
                     }

                     var453 = var0;

                     try {
                        ++var456.element;
                     } catch (Throwable var449) {
                        var10000 = var449;
                        var10001 = false;
                        break label4112;
                     }

                     var459 = var456;
                     var454 = var5;
                     var458 = var452;
                     break label4121;
                  }

                  var453 = var0;

                  try {
                     var460 = Unit.INSTANCE;
                  } catch (Throwable var450) {
                     var10000 = var450;
                     var10001 = false;
                     break label4112;
                  }

                  ChannelsKt.cancelConsumed(var0, var452);
                  return Boxing.boxInt(-1);
               }
            } else {
               ResultKt.throwOnFailure(var12);
               var456 = new Ref.IntRef();
               var456.element = 0;
               Throwable var461 = (Throwable)null;

               try {
                  var10 = var0.iterator();
               } catch (Throwable var432) {
                  var453 = var0;
                  var451 = var432;
                  break label4113;
               }

               Object var13 = null;
               var6 = var0;
               var8 = var1;
               var9 = var454;
               var11 = var0;
               var459 = var456;
               var458 = (Throwable)var13;
               var454 = var5;
               var7 = var0;
               var0 = var0;
            }

            while(true) {
               var453 = var0;

               try {
                  ((<undefinedtype>)var9).L$0 = var11;
               } catch (Throwable var442) {
                  var10000 = var442;
                  var10001 = false;
                  break;
               }

               var453 = var0;

               try {
                  ((<undefinedtype>)var9).L$1 = var8;
               } catch (Throwable var441) {
                  var10000 = var441;
                  var10001 = false;
                  break;
               }

               var453 = var0;

               try {
                  ((<undefinedtype>)var9).L$2 = var459;
               } catch (Throwable var440) {
                  var10000 = var440;
                  var10001 = false;
                  break;
               }

               var453 = var0;

               try {
                  ((<undefinedtype>)var9).L$3 = var6;
               } catch (Throwable var439) {
                  var10000 = var439;
                  var10001 = false;
                  break;
               }

               var453 = var0;

               try {
                  ((<undefinedtype>)var9).L$4 = var0;
               } catch (Throwable var438) {
                  var10000 = var438;
                  var10001 = false;
                  break;
               }

               var453 = var0;

               try {
                  ((<undefinedtype>)var9).L$5 = var458;
               } catch (Throwable var437) {
                  var10000 = var437;
                  var10001 = false;
                  break;
               }

               var453 = var0;

               try {
                  ((<undefinedtype>)var9).L$6 = var7;
               } catch (Throwable var436) {
                  var10000 = var436;
                  var10001 = false;
                  break;
               }

               var453 = var0;

               try {
                  ((<undefinedtype>)var9).L$7 = var10;
               } catch (Throwable var435) {
                  var10000 = var435;
                  var10001 = false;
                  break;
               }

               var453 = var0;

               try {
                  ((<undefinedtype>)var9).label = 1;
               } catch (Throwable var434) {
                  var10000 = var434;
                  var10001 = false;
                  break;
               }

               var453 = var0;

               try {
                  var12 = var10.hasNext((Continuation)var9);
               } catch (Throwable var433) {
                  var10000 = var433;
                  var10001 = false;
                  break;
               }

               if (var12 == var454) {
                  return var454;
               }

               var456 = var459;
               var453 = var0;

               label4126: {
                  try {
                     if (!(Boolean)var12) {
                        break label4126;
                     }
                  } catch (Throwable var445) {
                     var10000 = var445;
                     var10001 = false;
                     break;
                  }

                  var453 = var0;

                  label4127: {
                     try {
                        if (!Intrinsics.areEqual(var8, var10.next())) {
                           break label4127;
                        }
                     } catch (Throwable var444) {
                        var10000 = var444;
                        var10001 = false;
                        break;
                     }

                     var453 = var0;

                     try {
                        var457 = Boxing.boxInt(var456.element);
                     } catch (Throwable var429) {
                        var10000 = var429;
                        var10001 = false;
                        break;
                     }

                     ChannelsKt.cancelConsumed(var0, var458);
                     return var457;
                  }

                  var453 = var0;

                  try {
                     ++var456.element;
                  } catch (Throwable var443) {
                     var10000 = var443;
                     var10001 = false;
                     break;
                  }

                  var459 = var459;
                  var454 = var454;
                  var458 = var458;
                  continue;
               }

               var453 = var0;

               try {
                  var460 = Unit.INSTANCE;
               } catch (Throwable var430) {
                  var10000 = var430;
                  var10001 = false;
                  break;
               }

               ChannelsKt.cancelConsumed(var0, var458);
               return Boxing.boxInt(-1);
            }
         }

         var451 = var10000;
      }

      try {
         throw var451;
      } finally {
         ChannelsKt.cancelConsumed(var453, var451);
      }
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object indexOfFirst(ReceiveChannel var0, Function1 var1, Continuation var2) {
      Object var454;
      label4118: {
         if (var2 instanceof <undefinedtype>) {
            <undefinedtype> var4 = (<undefinedtype>)var2;
            if ((var4.label & Integer.MIN_VALUE) != 0) {
               var4.label += Integer.MIN_VALUE;
               var454 = var4;
               break label4118;
            }
         }

         var454 = new ContinuationImpl(var2) {
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            int label;
            Object result;

            public final Object invokeSuspend(Object var1) {
               this.result = var1;
               this.label |= Integer.MIN_VALUE;
               return ChannelsKt.indexOfFirst((ReceiveChannel)null, (Function1)null, this);
            }
         };
      }

      Throwable var451;
      ReceiveChannel var453;
      label4113: {
         Throwable var10000;
         label4112: {
            Object var12 = ((<undefinedtype>)var454).result;
            Object var5 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
            int var3 = ((<undefinedtype>)var454).label;
            ReceiveChannel var6;
            Function1 var7;
            ReceiveChannel var8;
            Ref.IntRef var457;
            Object var9;
            ReceiveChannel var10;
            Integer var458;
            ChannelIterator var11;
            Throwable var459;
            Ref.IntRef var460;
            Unit var461;
            boolean var10001;
            if (var3 != 0) {
               label4121: {
                  if (var3 != 1) {
                     throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                  }

                  var11 = (ChannelIterator)((<undefinedtype>)var454).L$7;
                  var8 = (ReceiveChannel)((<undefinedtype>)var454).L$6;
                  Throwable var452 = (Throwable)((<undefinedtype>)var454).L$5;
                  var0 = (ReceiveChannel)((<undefinedtype>)var454).L$4;
                  var6 = (ReceiveChannel)((<undefinedtype>)var454).L$3;
                  var457 = (Ref.IntRef)((<undefinedtype>)var454).L$2;
                  var7 = (Function1)((<undefinedtype>)var454).L$1;
                  var10 = (ReceiveChannel)((<undefinedtype>)var454).L$0;

                  try {
                     ResultKt.throwOnFailure(var12);
                  } catch (Throwable var431) {
                     var453 = var0;
                     var451 = var431;
                     break label4113;
                  }

                  var9 = var454;
                  var453 = var0;

                  label4122: {
                     try {
                        if (!(Boolean)var12) {
                           break label4122;
                        }
                     } catch (Throwable var446) {
                        var10000 = var446;
                        var10001 = false;
                        break label4112;
                     }

                     var453 = var0;

                     label4123: {
                        try {
                           if (!(Boolean)var7.invoke(var11.next())) {
                              break label4123;
                           }
                        } catch (Throwable var447) {
                           var10000 = var447;
                           var10001 = false;
                           break label4112;
                        }

                        var453 = var0;

                        try {
                           var458 = Boxing.boxInt(var457.element);
                        } catch (Throwable var448) {
                           var10000 = var448;
                           var10001 = false;
                           break label4112;
                        }

                        InlineMarker.finallyStart(2);
                        ChannelsKt.cancelConsumed(var0, var452);
                        InlineMarker.finallyEnd(2);
                        return var458;
                     }

                     var453 = var0;

                     try {
                        ++var457.element;
                     } catch (Throwable var449) {
                        var10000 = var449;
                        var10001 = false;
                        break label4112;
                     }

                     var460 = var457;
                     var454 = var5;
                     var459 = var452;
                     break label4121;
                  }

                  var453 = var0;

                  try {
                     var461 = Unit.INSTANCE;
                  } catch (Throwable var450) {
                     var10000 = var450;
                     var10001 = false;
                     break label4112;
                  }

                  InlineMarker.finallyStart(1);
                  ChannelsKt.cancelConsumed(var0, var452);
                  InlineMarker.finallyEnd(1);
                  return Boxing.boxInt(-1);
               }
            } else {
               ResultKt.throwOnFailure(var12);
               var457 = new Ref.IntRef();
               var457.element = 0;
               Throwable var462 = (Throwable)null;

               try {
                  var11 = var0.iterator();
               } catch (Throwable var432) {
                  var453 = var0;
                  var451 = var432;
                  break label4113;
               }

               Object var13 = null;
               var6 = var0;
               var7 = var1;
               var9 = var454;
               var10 = var0;
               var460 = var457;
               var459 = (Throwable)var13;
               var454 = var5;
               var8 = var0;
               var0 = var0;
            }

            while(true) {
               var453 = var0;

               try {
                  ((<undefinedtype>)var9).L$0 = var10;
               } catch (Throwable var442) {
                  var10000 = var442;
                  var10001 = false;
                  break;
               }

               var453 = var0;

               try {
                  ((<undefinedtype>)var9).L$1 = var7;
               } catch (Throwable var441) {
                  var10000 = var441;
                  var10001 = false;
                  break;
               }

               var453 = var0;

               try {
                  ((<undefinedtype>)var9).L$2 = var460;
               } catch (Throwable var440) {
                  var10000 = var440;
                  var10001 = false;
                  break;
               }

               var453 = var0;

               try {
                  ((<undefinedtype>)var9).L$3 = var6;
               } catch (Throwable var439) {
                  var10000 = var439;
                  var10001 = false;
                  break;
               }

               var453 = var0;

               try {
                  ((<undefinedtype>)var9).L$4 = var0;
               } catch (Throwable var438) {
                  var10000 = var438;
                  var10001 = false;
                  break;
               }

               var453 = var0;

               try {
                  ((<undefinedtype>)var9).L$5 = var459;
               } catch (Throwable var437) {
                  var10000 = var437;
                  var10001 = false;
                  break;
               }

               var453 = var0;

               try {
                  ((<undefinedtype>)var9).L$6 = var8;
               } catch (Throwable var436) {
                  var10000 = var436;
                  var10001 = false;
                  break;
               }

               var453 = var0;

               try {
                  ((<undefinedtype>)var9).L$7 = var11;
               } catch (Throwable var435) {
                  var10000 = var435;
                  var10001 = false;
                  break;
               }

               var453 = var0;

               try {
                  ((<undefinedtype>)var9).label = 1;
               } catch (Throwable var434) {
                  var10000 = var434;
                  var10001 = false;
                  break;
               }

               var453 = var0;

               try {
                  var12 = var11.hasNext((Continuation)var9);
               } catch (Throwable var433) {
                  var10000 = var433;
                  var10001 = false;
                  break;
               }

               if (var12 == var454) {
                  return var454;
               }

               var457 = var460;
               var453 = var0;

               label4126: {
                  try {
                     if (!(Boolean)var12) {
                        break label4126;
                     }
                  } catch (Throwable var445) {
                     var10000 = var445;
                     var10001 = false;
                     break;
                  }

                  var453 = var0;

                  label4127: {
                     try {
                        if (!(Boolean)var7.invoke(var11.next())) {
                           break label4127;
                        }
                     } catch (Throwable var444) {
                        var10000 = var444;
                        var10001 = false;
                        break;
                     }

                     var453 = var0;

                     try {
                        var458 = Boxing.boxInt(var457.element);
                     } catch (Throwable var429) {
                        var10000 = var429;
                        var10001 = false;
                        break;
                     }

                     InlineMarker.finallyStart(2);
                     ChannelsKt.cancelConsumed(var0, var459);
                     InlineMarker.finallyEnd(2);
                     return var458;
                  }

                  var453 = var0;

                  try {
                     ++var457.element;
                  } catch (Throwable var443) {
                     var10000 = var443;
                     var10001 = false;
                     break;
                  }

                  var460 = var460;
                  var454 = var454;
                  var459 = var459;
                  continue;
               }

               var453 = var0;

               try {
                  var461 = Unit.INSTANCE;
               } catch (Throwable var430) {
                  var10000 = var430;
                  var10001 = false;
                  break;
               }

               InlineMarker.finallyStart(1);
               ChannelsKt.cancelConsumed(var0, var459);
               InlineMarker.finallyEnd(1);
               return Boxing.boxInt(-1);
            }
         }

         var451 = var10000;
      }

      try {
         throw var451;
      } finally {
         InlineMarker.finallyStart(1);
         ChannelsKt.cancelConsumed(var453, var451);
         InlineMarker.finallyEnd(1);
      }
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   private static final Object indexOfFirst$$forInline(ReceiveChannel var0, Function1 var1, Continuation var2) {
      Throwable var4 = (Throwable)null;

      int var3;
      label229: {
         Throwable var10000;
         label230: {
            ChannelIterator var5;
            boolean var10001;
            try {
               var5 = var0.iterator();
            } catch (Throwable var24) {
               var10000 = var24;
               var10001 = false;
               break label230;
            }

            var3 = 0;

            while(true) {
               try {
                  InlineMarker.mark(0);
                  Object var28 = var5.hasNext(var2);
                  InlineMarker.mark(1);
                  if (!(Boolean)var28) {
                     break;
                  }

                  if ((Boolean)var1.invoke(var5.next())) {
                     break label229;
                  }
               } catch (Throwable var25) {
                  var10000 = var25;
                  var10001 = false;
                  break label230;
               }

               ++var3;
            }

            try {
               Unit var26 = Unit.INSTANCE;
            } catch (Throwable var23) {
               var10000 = var23;
               var10001 = false;
               break label230;
            }

            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, (Throwable)null);
            InlineMarker.finallyEnd(1);
            return -1;
         }

         Throwable var27 = var10000;

         try {
            throw var27;
         } finally {
            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, var27);
            InlineMarker.finallyEnd(1);
         }
      }

      InlineMarker.finallyStart(2);
      ChannelsKt.cancelConsumed(var0, (Throwable)null);
      InlineMarker.finallyEnd(2);
      return var3;
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object indexOfLast(ReceiveChannel var0, Function1 var1, Continuation var2) {
      Object var479;
      label4068: {
         if (var2 instanceof <undefinedtype>) {
            <undefinedtype> var4 = (<undefinedtype>)var2;
            if ((var4.label & Integer.MIN_VALUE) != 0) {
               var4.label += Integer.MIN_VALUE;
               var479 = var4;
               break label4068;
            }
         }

         var479 = new ContinuationImpl(var2) {
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            Object L$8;
            int label;
            Object result;

            public final Object invokeSuspend(Object var1) {
               this.result = var1;
               this.label |= Integer.MIN_VALUE;
               return ChannelsKt.indexOfLast((ReceiveChannel)null, (Function1)null, this);
            }
         };
      }

      Throwable var475;
      ReceiveChannel var480;
      label4062: {
         Throwable var10000;
         label4071: {
            Throwable var5;
            boolean var10001;
            Ref.IntRef var476;
            label4060: {
               Object var13 = ((<undefinedtype>)var479).result;
               Object var481 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
               int var3 = ((<undefinedtype>)var479).label;
               ReceiveChannel var7;
               ReceiveChannel var8;
               Object var9;
               Function1 var10;
               ReceiveChannel var11;
               Object var477;
               Ref.IntRef var482;
               Throwable var483;
               Ref.IntRef var485;
               Ref.IntRef var486;
               ChannelIterator var489;
               if (var3 != 0) {
                  if (var3 != 1) {
                     throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                  }

                  ChannelIterator var14 = (ChannelIterator)((<undefinedtype>)var479).L$8;
                  var8 = (ReceiveChannel)((<undefinedtype>)var479).L$7;
                  var5 = (Throwable)((<undefinedtype>)var479).L$6;
                  var0 = (ReceiveChannel)((<undefinedtype>)var479).L$5;
                  var7 = (ReceiveChannel)((<undefinedtype>)var479).L$4;
                  Ref.IntRef var12 = (Ref.IntRef)((<undefinedtype>)var479).L$3;
                  var476 = (Ref.IntRef)((<undefinedtype>)var479).L$2;
                  var10 = (Function1)((<undefinedtype>)var479).L$1;
                  var11 = (ReceiveChannel)((<undefinedtype>)var479).L$0;

                  try {
                     ResultKt.throwOnFailure(var13);
                  } catch (Throwable var454) {
                     var480 = var0;
                     var475 = var454;
                     break label4062;
                  }

                  var9 = var479;
                  var482 = var12;
                  var489 = var14;
                  var480 = var0;

                  try {
                     if (!(Boolean)var13) {
                        break label4060;
                     }
                  } catch (Throwable var471) {
                     var10000 = var471;
                     var10001 = false;
                     break label4071;
                  }

                  var480 = var0;

                  label4073: {
                     try {
                        if (!(Boolean)var10.invoke(var489.next())) {
                           break label4073;
                        }
                     } catch (Throwable var472) {
                        var10000 = var472;
                        var10001 = false;
                        break label4071;
                     }

                     var480 = var0;

                     try {
                        var476.element = var482.element;
                     } catch (Throwable var473) {
                        var10000 = var473;
                        var10001 = false;
                        break label4071;
                     }
                  }

                  var480 = var0;

                  try {
                     ++var482.element;
                  } catch (Throwable var474) {
                     var10000 = var474;
                     var10001 = false;
                     break label4071;
                  }

                  var485 = var12;
                  var486 = var476;
                  var477 = var481;
                  var483 = var5;
               } else {
                  ResultKt.throwOnFailure(var13);
                  var486 = new Ref.IntRef();
                  var486.element = -1;
                  var485 = new Ref.IntRef();
                  var485.element = 0;
                  Throwable var488 = (Throwable)null;

                  try {
                     var489 = var0.iterator();
                  } catch (Throwable var455) {
                     var480 = var0;
                     var475 = var455;
                     break label4062;
                  }

                  var13 = null;
                  var7 = var0;
                  var10 = var1;
                  ReceiveChannel var478 = var0;
                  var0 = var0;
                  var8 = var478;
                  var11 = var478;
                  var483 = (Throwable)var13;
                  var477 = var481;
                  var9 = var479;
               }

               while(true) {
                  var480 = var0;

                  try {
                     ((<undefinedtype>)var9).L$0 = var11;
                  } catch (Throwable var466) {
                     var10000 = var466;
                     var10001 = false;
                     break label4071;
                  }

                  var480 = var0;

                  try {
                     ((<undefinedtype>)var9).L$1 = var10;
                  } catch (Throwable var465) {
                     var10000 = var465;
                     var10001 = false;
                     break label4071;
                  }

                  var480 = var0;

                  try {
                     ((<undefinedtype>)var9).L$2 = var486;
                  } catch (Throwable var464) {
                     var10000 = var464;
                     var10001 = false;
                     break label4071;
                  }

                  var480 = var0;

                  try {
                     ((<undefinedtype>)var9).L$3 = var485;
                  } catch (Throwable var463) {
                     var10000 = var463;
                     var10001 = false;
                     break label4071;
                  }

                  var480 = var0;

                  try {
                     ((<undefinedtype>)var9).L$4 = var7;
                  } catch (Throwable var462) {
                     var10000 = var462;
                     var10001 = false;
                     break label4071;
                  }

                  var480 = var0;

                  try {
                     ((<undefinedtype>)var9).L$5 = var0;
                  } catch (Throwable var461) {
                     var10000 = var461;
                     var10001 = false;
                     break label4071;
                  }

                  var480 = var0;

                  try {
                     ((<undefinedtype>)var9).L$6 = var483;
                  } catch (Throwable var460) {
                     var10000 = var460;
                     var10001 = false;
                     break label4071;
                  }

                  var480 = var0;

                  try {
                     ((<undefinedtype>)var9).L$7 = var8;
                  } catch (Throwable var459) {
                     var10000 = var459;
                     var10001 = false;
                     break label4071;
                  }

                  var480 = var0;

                  try {
                     ((<undefinedtype>)var9).L$8 = var489;
                  } catch (Throwable var458) {
                     var10000 = var458;
                     var10001 = false;
                     break label4071;
                  }

                  var480 = var0;

                  try {
                     ((<undefinedtype>)var9).label = 1;
                  } catch (Throwable var457) {
                     var10000 = var457;
                     var10001 = false;
                     break label4071;
                  }

                  var480 = var0;

                  try {
                     var13 = var489.hasNext((Continuation)var9);
                  } catch (Throwable var456) {
                     var10000 = var456;
                     var10001 = false;
                     break label4071;
                  }

                  if (var13 == var477) {
                     return var477;
                  }

                  var476 = var486;
                  var482 = var485;
                  var5 = var483;
                  var480 = var0;

                  try {
                     if (!(Boolean)var13) {
                        break;
                     }
                  } catch (Throwable var470) {
                     var10000 = var470;
                     var10001 = false;
                     break label4071;
                  }

                  var480 = var0;

                  label4076: {
                     try {
                        if (!(Boolean)var10.invoke(var489.next())) {
                           break label4076;
                        }
                     } catch (Throwable var469) {
                        var10000 = var469;
                        var10001 = false;
                        break label4071;
                     }

                     var480 = var0;

                     try {
                        var476.element = var482.element;
                     } catch (Throwable var468) {
                        var10000 = var468;
                        var10001 = false;
                        break label4071;
                     }
                  }

                  var480 = var0;

                  try {
                     ++var482.element;
                  } catch (Throwable var467) {
                     var10000 = var467;
                     var10001 = false;
                     break label4071;
                  }

                  var485 = var485;
                  var486 = var486;
                  var477 = var477;
                  var483 = var483;
               }
            }

            var480 = var0;

            try {
               Unit var487 = Unit.INSTANCE;
            } catch (Throwable var453) {
               var10000 = var453;
               var10001 = false;
               break label4071;
            }

            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, var5);
            InlineMarker.finallyEnd(1);
            return Boxing.boxInt(var476.element);
         }

         var475 = var10000;
      }

      try {
         throw var475;
      } finally {
         InlineMarker.finallyStart(1);
         ChannelsKt.cancelConsumed(var480, var475);
         InlineMarker.finallyEnd(1);
      }
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   private static final Object indexOfLast$$forInline(ReceiveChannel var0, Function1 var1, Continuation var2) {
      Throwable var5 = (Throwable)null;

      int var4;
      label286: {
         Throwable var10000;
         label287: {
            ChannelIterator var39;
            boolean var10001;
            try {
               var39 = var0.iterator();
            } catch (Throwable var36) {
               var10000 = var36;
               var10001 = false;
               break label287;
            }

            var4 = -1;
            int var3 = 0;

            while(true) {
               try {
                  InlineMarker.mark(0);
                  Object var6 = var39.hasNext(var2);
                  InlineMarker.mark(1);
                  if (!(Boolean)var6) {
                     break;
                  }
               } catch (Throwable var34) {
                  var10000 = var34;
                  var10001 = false;
                  break label287;
               }

               label273: {
                  try {
                     if (!(Boolean)var1.invoke(var39.next())) {
                        break label273;
                     }
                  } catch (Throwable var35) {
                     var10000 = var35;
                     var10001 = false;
                     break label287;
                  }

                  var4 = var3;
               }

               ++var3;
            }

            label265:
            try {
               Unit var37 = Unit.INSTANCE;
               break label286;
            } catch (Throwable var33) {
               var10000 = var33;
               var10001 = false;
               break label265;
            }
         }

         Throwable var38 = var10000;

         try {
            throw var38;
         } finally {
            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, var38);
            InlineMarker.finallyEnd(1);
         }
      }

      InlineMarker.finallyStart(1);
      ChannelsKt.cancelConsumed(var0, (Throwable)null);
      InlineMarker.finallyEnd(1);
      return var4;
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object last(ReceiveChannel var0, Continuation var1) {
      Object var768;
      label6527: {
         if (var1 instanceof <undefinedtype>) {
            <undefinedtype> var3 = (<undefinedtype>)var1;
            if ((var3.label & Integer.MIN_VALUE) != 0) {
               var3.label += Integer.MIN_VALUE;
               var768 = var3;
               break label6527;
            }
         }

         var768 = new ContinuationImpl(var1) {
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            int label;
            Object result;

            public final Object invokeSuspend(Object var1) {
               this.result = var1;
               this.label |= Integer.MIN_VALUE;
               return ChannelsKt.last((ReceiveChannel)null, this);
            }
         };
      }

      Throwable var775;
      Object var9;
      label6521: {
         Throwable var769;
         ReceiveChannel var771;
         label6520: {
            Throwable var10000;
            label6530: {
               boolean var10001;
               label6518: {
                  label6517: {
                     ReceiveChannel var4;
                     label6516: {
                        Object var772;
                        ChannelIterator var774;
                        ReceiveChannel var7;
                        ReceiveChannel var776;
                        Object var10;
                        Object var11;
                        label6531: {
                           Object var8 = ((<undefinedtype>)var768).result;
                           var11 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                           int var2 = ((<undefinedtype>)var768).label;
                           Throwable var5;
                           ChannelIterator var6;
                           if (var2 != 0) {
                              if (var2 != 1) {
                                 if (var2 != 2) {
                                    throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                                 }

                                 var9 = ((<undefinedtype>)var768).L$5;
                                 var774 = (ChannelIterator)((<undefinedtype>)var768).L$4;
                                 var7 = (ReceiveChannel)((<undefinedtype>)var768).L$3;
                                 var775 = (Throwable)((<undefinedtype>)var768).L$2;
                                 var0 = (ReceiveChannel)((<undefinedtype>)var768).L$1;
                                 var4 = (ReceiveChannel)((<undefinedtype>)var768).L$0;
                                 var771 = var0;

                                 try {
                                    ResultKt.throwOnFailure(var8);
                                 } catch (Throwable var749) {
                                    var10000 = var749;
                                    var10001 = false;
                                    break label6517;
                                 }

                                 var10 = var8;
                                 var771 = var0;

                                 try {
                                    if (!(Boolean)var10) {
                                       break label6521;
                                    }
                                 } catch (Throwable var766) {
                                    var10000 = var766;
                                    var10001 = false;
                                    break label6517;
                                 }

                                 var771 = var0;

                                 try {
                                    var9 = var774.next();
                                 } catch (Throwable var767) {
                                    var10000 = var767;
                                    var10001 = false;
                                    break label6517;
                                 }

                                 var776 = var4;
                                 var772 = var9;
                                 break label6531;
                              }

                              var6 = (ChannelIterator)((<undefinedtype>)var768).L$4;
                              var4 = (ReceiveChannel)((<undefinedtype>)var768).L$3;
                              var5 = (Throwable)((<undefinedtype>)var768).L$2;
                              var0 = (ReceiveChannel)((<undefinedtype>)var768).L$1;
                              var7 = (ReceiveChannel)((<undefinedtype>)var768).L$0;
                              var771 = var0;

                              try {
                                 ResultKt.throwOnFailure(var8);
                              } catch (Throwable var745) {
                                 var10000 = var745;
                                 var10001 = false;
                                 break label6530;
                              }
                           } else {
                              ResultKt.throwOnFailure(var8);
                              Throwable var773 = (Throwable)null;
                              var4 = var0;

                              try {
                                 var6 = var0.iterator();
                              } catch (Throwable var765) {
                                 var10000 = var765;
                                 var10001 = false;
                                 break label6516;
                              }

                              var4 = var0;

                              try {
                                 ((<undefinedtype>)var768).L$0 = var0;
                              } catch (Throwable var764) {
                                 var10000 = var764;
                                 var10001 = false;
                                 break label6516;
                              }

                              var4 = var0;

                              try {
                                 ((<undefinedtype>)var768).L$1 = var0;
                              } catch (Throwable var763) {
                                 var10000 = var763;
                                 var10001 = false;
                                 break label6516;
                              }

                              var4 = var0;

                              try {
                                 ((<undefinedtype>)var768).L$2 = null;
                              } catch (Throwable var762) {
                                 var10000 = var762;
                                 var10001 = false;
                                 break label6516;
                              }

                              var4 = var0;

                              try {
                                 ((<undefinedtype>)var768).L$3 = var0;
                              } catch (Throwable var761) {
                                 var10000 = var761;
                                 var10001 = false;
                                 break label6516;
                              }

                              var4 = var0;

                              try {
                                 ((<undefinedtype>)var768).L$4 = var6;
                              } catch (Throwable var760) {
                                 var10000 = var760;
                                 var10001 = false;
                                 break label6516;
                              }

                              var4 = var0;

                              try {
                                 ((<undefinedtype>)var768).label = 1;
                              } catch (Throwable var759) {
                                 var10000 = var759;
                                 var10001 = false;
                                 break label6516;
                              }

                              var4 = var0;

                              try {
                                 var8 = var6.hasNext((Continuation)var768);
                              } catch (Throwable var758) {
                                 var10000 = var758;
                                 var10001 = false;
                                 break label6516;
                              }

                              if (var8 == var11) {
                                 return var11;
                              }

                              var7 = var0;
                              var4 = var0;
                              var5 = null;
                           }

                           var771 = var0;

                           try {
                              if (!(Boolean)var8) {
                                 break label6518;
                              }
                           } catch (Throwable var746) {
                              var10000 = var746;
                              var10001 = false;
                              break label6530;
                           }

                           var771 = var0;

                           try {
                              var8 = var6.next();
                           } catch (Throwable var742) {
                              var10000 = var742;
                              var10001 = false;
                              break label6530;
                           }

                           ChannelIterator var777 = var6;
                           var772 = var8;
                           var776 = var7;
                           var775 = var5;
                           var7 = var4;
                           var774 = var777;
                        }

                        while(true) {
                           var4 = var0;

                           try {
                              ((<undefinedtype>)var768).L$0 = var776;
                           } catch (Throwable var757) {
                              var10000 = var757;
                              var10001 = false;
                              break;
                           }

                           var4 = var0;

                           try {
                              ((<undefinedtype>)var768).L$1 = var0;
                           } catch (Throwable var756) {
                              var10000 = var756;
                              var10001 = false;
                              break;
                           }

                           var4 = var0;

                           try {
                              ((<undefinedtype>)var768).L$2 = var775;
                           } catch (Throwable var755) {
                              var10000 = var755;
                              var10001 = false;
                              break;
                           }

                           var4 = var0;

                           try {
                              ((<undefinedtype>)var768).L$3 = var7;
                           } catch (Throwable var754) {
                              var10000 = var754;
                              var10001 = false;
                              break;
                           }

                           var4 = var0;

                           try {
                              ((<undefinedtype>)var768).L$4 = var774;
                           } catch (Throwable var753) {
                              var10000 = var753;
                              var10001 = false;
                              break;
                           }

                           var4 = var0;

                           try {
                              ((<undefinedtype>)var768).L$5 = var772;
                           } catch (Throwable var752) {
                              var10000 = var752;
                              var10001 = false;
                              break;
                           }

                           var4 = var0;

                           try {
                              ((<undefinedtype>)var768).label = 2;
                           } catch (Throwable var751) {
                              var10000 = var751;
                              var10001 = false;
                              break;
                           }

                           var4 = var0;

                           try {
                              var10 = var774.hasNext((Continuation)var768);
                           } catch (Throwable var750) {
                              var10000 = var750;
                              var10001 = false;
                              break;
                           }

                           if (var10 == var11) {
                              return var11;
                           }

                           var9 = var772;
                           var771 = var0;

                           try {
                              if (!(Boolean)var10) {
                                 break label6521;
                              }
                           } catch (Throwable var748) {
                              var10000 = var748;
                              var10001 = false;
                              break label6517;
                           }

                           var771 = var0;

                           try {
                              var9 = var774.next();
                           } catch (Throwable var747) {
                              var10000 = var747;
                              var10001 = false;
                              break label6517;
                           }

                           var776 = var776;
                           var772 = var9;
                        }
                     }

                     var769 = var10000;
                     var771 = var4;
                     break label6520;
                  }

                  var769 = var10000;
                  break label6520;
               }

               var771 = var0;

               NoSuchElementException var770;
               try {
                  var770 = new NoSuchElementException;
               } catch (Throwable var744) {
                  var10000 = var744;
                  var10001 = false;
                  break label6530;
               }

               var771 = var0;

               try {
                  var770.<init>("ReceiveChannel is empty.");
               } catch (Throwable var743) {
                  var10000 = var743;
                  var10001 = false;
                  break label6530;
               }

               var771 = var0;

               label6403:
               try {
                  throw (Throwable)var770;
               } catch (Throwable var741) {
                  var10000 = var741;
                  var10001 = false;
                  break label6403;
               }
            }

            var769 = var10000;
         }

         try {
            throw var769;
         } finally {
            ChannelsKt.cancelConsumed(var771, var769);
         }
      }

      ChannelsKt.cancelConsumed(var0, var775);
      return var9;
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object last(ReceiveChannel var0, Function1 var1, Continuation var2) {
      Object var544;
      label4676: {
         if (var2 instanceof <undefinedtype>) {
            <undefinedtype> var4 = (<undefinedtype>)var2;
            if ((var4.label & Integer.MIN_VALUE) != 0) {
               var4.label += Integer.MIN_VALUE;
               var544 = var4;
               break label4676;
            }
         }

         var544 = new ContinuationImpl(var2) {
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            Object L$8;
            int label;
            Object result;

            public final Object invokeSuspend(Object var1) {
               this.result = var1;
               this.label |= Integer.MIN_VALUE;
               return ChannelsKt.last((ReceiveChannel)null, (Function1)null, this);
            }
         };
      }

      Throwable var540;
      ReceiveChannel var545;
      label4670: {
         Throwable var10000;
         label4679: {
            Throwable var5;
            boolean var10001;
            Ref.ObjectRef var541;
            Ref.BooleanRef var547;
            label4668: {
               Object var13 = ((<undefinedtype>)var544).result;
               Object var546 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
               int var3 = ((<undefinedtype>)var544).label;
               Object var6;
               ReceiveChannel var7;
               Object var8;
               ReceiveChannel var9;
               Function1 var10;
               ReceiveChannel var12;
               Object var542;
               Throwable var548;
               Ref.BooleanRef var549;
               Throwable var550;
               Ref.ObjectRef var551;
               ChannelIterator var554;
               Ref.ObjectRef var555;
               if (var3 != 0) {
                  if (var3 != 1) {
                     throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                  }

                  ChannelIterator var14 = (ChannelIterator)((<undefinedtype>)var544).L$8;
                  var9 = (ReceiveChannel)((<undefinedtype>)var544).L$7;
                  var5 = (Throwable)((<undefinedtype>)var544).L$6;
                  var0 = (ReceiveChannel)((<undefinedtype>)var544).L$5;
                  var7 = (ReceiveChannel)((<undefinedtype>)var544).L$4;
                  Ref.BooleanRef var11 = (Ref.BooleanRef)((<undefinedtype>)var544).L$3;
                  var541 = (Ref.ObjectRef)((<undefinedtype>)var544).L$2;
                  var10 = (Function1)((<undefinedtype>)var544).L$1;
                  var12 = (ReceiveChannel)((<undefinedtype>)var544).L$0;

                  try {
                     ResultKt.throwOnFailure(var13);
                  } catch (Throwable var517) {
                     var545 = var0;
                     var540 = var517;
                     break label4670;
                  }

                  var8 = var544;
                  var6 = var546;
                  var547 = var11;
                  var554 = var14;
                  var545 = var0;

                  try {
                     if (!(Boolean)var13) {
                        break label4668;
                     }
                  } catch (Throwable var535) {
                     var10000 = var535;
                     var10001 = false;
                     break label4679;
                  }

                  var545 = var0;

                  try {
                     var13 = var554.next();
                  } catch (Throwable var536) {
                     var10000 = var536;
                     var10001 = false;
                     break label4679;
                  }

                  var545 = var0;

                  label4681: {
                     try {
                        if (!(Boolean)var10.invoke(var13)) {
                           break label4681;
                        }
                     } catch (Throwable var537) {
                        var10000 = var537;
                        var10001 = false;
                        break label4679;
                     }

                     var545 = var0;

                     try {
                        var541.element = var13;
                     } catch (Throwable var538) {
                        var10000 = var538;
                        var10001 = false;
                        break label4679;
                     }

                     var545 = var0;

                     try {
                        var547.element = true;
                     } catch (Throwable var539) {
                        var10000 = var539;
                        var10001 = false;
                        break label4679;
                     }
                  }

                  var550 = var5;
                  var549 = var547;
                  var555 = var541;
                  var542 = var6;
                  var548 = var550;
                  var551 = var555;
               } else {
                  ResultKt.throwOnFailure(var13);
                  var551 = new Ref.ObjectRef();
                  var551.element = null;
                  var549 = new Ref.BooleanRef();
                  var549.element = false;
                  Throwable var552 = (Throwable)null;

                  try {
                     var554 = var0.iterator();
                  } catch (Throwable var518) {
                     var545 = var0;
                     var540 = var518;
                     break label4670;
                  }

                  var13 = null;
                  var7 = var0;
                  var10 = var1;
                  ReceiveChannel var543 = var0;
                  var0 = var0;
                  var8 = var546;
                  var9 = var543;
                  var12 = var543;
                  var548 = (Throwable)var13;
                  var542 = var8;
                  var8 = var544;
               }

               while(true) {
                  var545 = var0;

                  try {
                     ((<undefinedtype>)var8).L$0 = var12;
                  } catch (Throwable var529) {
                     var10000 = var529;
                     var10001 = false;
                     break label4679;
                  }

                  var545 = var0;

                  try {
                     ((<undefinedtype>)var8).L$1 = var10;
                  } catch (Throwable var528) {
                     var10000 = var528;
                     var10001 = false;
                     break label4679;
                  }

                  var545 = var0;

                  try {
                     ((<undefinedtype>)var8).L$2 = var551;
                  } catch (Throwable var527) {
                     var10000 = var527;
                     var10001 = false;
                     break label4679;
                  }

                  var545 = var0;

                  try {
                     ((<undefinedtype>)var8).L$3 = var549;
                  } catch (Throwable var526) {
                     var10000 = var526;
                     var10001 = false;
                     break label4679;
                  }

                  var545 = var0;

                  try {
                     ((<undefinedtype>)var8).L$4 = var7;
                  } catch (Throwable var525) {
                     var10000 = var525;
                     var10001 = false;
                     break label4679;
                  }

                  var545 = var0;

                  try {
                     ((<undefinedtype>)var8).L$5 = var0;
                  } catch (Throwable var524) {
                     var10000 = var524;
                     var10001 = false;
                     break label4679;
                  }

                  var545 = var0;

                  try {
                     ((<undefinedtype>)var8).L$6 = var548;
                  } catch (Throwable var523) {
                     var10000 = var523;
                     var10001 = false;
                     break label4679;
                  }

                  var545 = var0;

                  try {
                     ((<undefinedtype>)var8).L$7 = var9;
                  } catch (Throwable var522) {
                     var10000 = var522;
                     var10001 = false;
                     break label4679;
                  }

                  var545 = var0;

                  try {
                     ((<undefinedtype>)var8).L$8 = var554;
                  } catch (Throwable var521) {
                     var10000 = var521;
                     var10001 = false;
                     break label4679;
                  }

                  var545 = var0;

                  try {
                     ((<undefinedtype>)var8).label = 1;
                  } catch (Throwable var520) {
                     var10000 = var520;
                     var10001 = false;
                     break label4679;
                  }

                  var545 = var0;

                  try {
                     var13 = var554.hasNext((Continuation)var8);
                  } catch (Throwable var519) {
                     var10000 = var519;
                     var10001 = false;
                     break label4679;
                  }

                  if (var13 == var542) {
                     return var542;
                  }

                  Ref.BooleanRef var556 = var549;
                  var5 = var548;
                  var544 = var542;
                  var541 = var551;
                  var547 = var556;
                  var6 = var544;
                  var545 = var0;

                  try {
                     if (!(Boolean)var13) {
                        break;
                     }
                  } catch (Throwable var534) {
                     var10000 = var534;
                     var10001 = false;
                     break label4679;
                  }

                  var545 = var0;

                  try {
                     var13 = var554.next();
                  } catch (Throwable var532) {
                     var10000 = var532;
                     var10001 = false;
                     break label4679;
                  }

                  var545 = var0;

                  label4684: {
                     try {
                        if (!(Boolean)var10.invoke(var13)) {
                           break label4684;
                        }
                     } catch (Throwable var533) {
                        var10000 = var533;
                        var10001 = false;
                        break label4679;
                     }

                     var545 = var0;

                     try {
                        var541.element = var13;
                     } catch (Throwable var531) {
                        var10000 = var531;
                        var10001 = false;
                        break label4679;
                     }

                     var545 = var0;

                     try {
                        var547.element = true;
                     } catch (Throwable var530) {
                        var10000 = var530;
                        var10001 = false;
                        break label4679;
                     }
                  }

                  var550 = var5;
                  var549 = var556;
                  var555 = var541;
                  var542 = var6;
                  var548 = var550;
                  var551 = var555;
               }
            }

            var545 = var0;

            try {
               Unit var553 = Unit.INSTANCE;
            } catch (Throwable var516) {
               var10000 = var516;
               var10001 = false;
               break label4679;
            }

            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, var5);
            InlineMarker.finallyEnd(1);
            if (var547.element) {
               return var541.element;
            }

            throw (Throwable)(new NoSuchElementException("ReceiveChannel contains no element matching the predicate."));
         }

         var540 = var10000;
      }

      try {
         throw var540;
      } finally {
         InlineMarker.finallyStart(1);
         ChannelsKt.cancelConsumed(var545, var540);
         InlineMarker.finallyEnd(1);
      }
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   private static final Object last$$forInline(ReceiveChannel var0, Function1 var1, Continuation var2) {
      Throwable var4 = (Throwable)null;

      boolean var3;
      Object var29;
      label229: {
         Throwable var10000;
         label230: {
            ChannelIterator var6;
            boolean var10001;
            try {
               var6 = var0.iterator();
            } catch (Throwable var26) {
               var10000 = var26;
               var10001 = false;
               break label230;
            }

            var29 = null;
            var3 = false;

            while(true) {
               Object var5;
               try {
                  InlineMarker.mark(0);
                  var5 = var6.hasNext(var2);
                  InlineMarker.mark(1);
                  if (!(Boolean)var5) {
                     break;
                  }

                  var5 = var6.next();
                  if (!(Boolean)var1.invoke(var5)) {
                     continue;
                  }
               } catch (Throwable var25) {
                  var10000 = var25;
                  var10001 = false;
                  break label230;
               }

               var3 = true;
               var29 = var5;
            }

            label211:
            try {
               Unit var27 = Unit.INSTANCE;
               break label229;
            } catch (Throwable var24) {
               var10000 = var24;
               var10001 = false;
               break label211;
            }
         }

         Throwable var28 = var10000;

         try {
            throw var28;
         } finally {
            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, var28);
            InlineMarker.finallyEnd(1);
         }
      }

      InlineMarker.finallyStart(1);
      ChannelsKt.cancelConsumed(var0, (Throwable)null);
      InlineMarker.finallyEnd(1);
      if (var3) {
         return var29;
      } else {
         throw (Throwable)(new NoSuchElementException("ReceiveChannel contains no element matching the predicate."));
      }
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object lastIndexOf(ReceiveChannel var0, Object var1, Continuation var2) {
      Object var478;
      label4068: {
         if (var2 instanceof <undefinedtype>) {
            <undefinedtype> var4 = (<undefinedtype>)var2;
            if ((var4.label & Integer.MIN_VALUE) != 0) {
               var4.label += Integer.MIN_VALUE;
               var478 = var4;
               break label4068;
            }
         }

         var478 = new ContinuationImpl(var2) {
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            Object L$8;
            int label;
            Object result;

            public final Object invokeSuspend(Object var1) {
               this.result = var1;
               this.label |= Integer.MIN_VALUE;
               return ChannelsKt.lastIndexOf((ReceiveChannel)null, (Object)null, this);
            }
         };
      }

      Throwable var475;
      ReceiveChannel var479;
      label4062: {
         Throwable var10000;
         label4071: {
            boolean var10001;
            Ref.IntRef var476;
            Throwable var481;
            label4060: {
               Object var13 = ((<undefinedtype>)var478).result;
               Object var480 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
               int var3 = ((<undefinedtype>)var478).label;
               ReceiveChannel var7;
               Object var8;
               Object var9;
               ReceiveChannel var10;
               ReceiveChannel var12;
               Ref.IntRef var483;
               Ref.IntRef var484;
               ChannelIterator var487;
               if (var3 != 0) {
                  if (var3 != 1) {
                     throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                  }

                  ChannelIterator var14 = (ChannelIterator)((<undefinedtype>)var478).L$8;
                  var10 = (ReceiveChannel)((<undefinedtype>)var478).L$7;
                  Throwable var5 = (Throwable)((<undefinedtype>)var478).L$6;
                  var0 = (ReceiveChannel)((<undefinedtype>)var478).L$5;
                  var7 = (ReceiveChannel)((<undefinedtype>)var478).L$4;
                  Ref.IntRef var11 = (Ref.IntRef)((<undefinedtype>)var478).L$3;
                  var476 = (Ref.IntRef)((<undefinedtype>)var478).L$2;
                  var8 = ((<undefinedtype>)var478).L$1;
                  var12 = (ReceiveChannel)((<undefinedtype>)var478).L$0;

                  try {
                     ResultKt.throwOnFailure(var13);
                  } catch (Throwable var454) {
                     var479 = var0;
                     var475 = var454;
                     break label4062;
                  }

                  var9 = var478;
                  var481 = var5;
                  var483 = var11;
                  var487 = var14;
                  var479 = var0;

                  try {
                     if (!(Boolean)var13) {
                        break label4060;
                     }
                  } catch (Throwable var471) {
                     var10000 = var471;
                     var10001 = false;
                     break label4071;
                  }

                  var479 = var0;

                  label4073: {
                     try {
                        if (!Intrinsics.areEqual(var8, var487.next())) {
                           break label4073;
                        }
                     } catch (Throwable var472) {
                        var10000 = var472;
                        var10001 = false;
                        break label4071;
                     }

                     var479 = var0;

                     try {
                        var476.element = var483.element;
                     } catch (Throwable var473) {
                        var10000 = var473;
                        var10001 = false;
                        break label4071;
                     }
                  }

                  var479 = var0;

                  try {
                     ++var483.element;
                  } catch (Throwable var474) {
                     var10000 = var474;
                     var10001 = false;
                     break label4071;
                  }

                  var1 = var480;
                  var484 = var476;
               } else {
                  ResultKt.throwOnFailure(var13);
                  var484 = new Ref.IntRef();
                  var484.element = -1;
                  var483 = new Ref.IntRef();
                  var483.element = 0;
                  Throwable var486 = (Throwable)null;

                  try {
                     var487 = var0.iterator();
                  } catch (Throwable var455) {
                     var479 = var0;
                     var475 = var455;
                     break label4062;
                  }

                  var13 = null;
                  var7 = var0;
                  var8 = var1;
                  ReceiveChannel var477 = var0;
                  var0 = var0;
                  var10 = var477;
                  var12 = var477;
                  var481 = (Throwable)var13;
                  var1 = var480;
                  var9 = var478;
               }

               while(true) {
                  var479 = var0;

                  try {
                     ((<undefinedtype>)var9).L$0 = var12;
                  } catch (Throwable var466) {
                     var10000 = var466;
                     var10001 = false;
                     break label4071;
                  }

                  var479 = var0;

                  try {
                     ((<undefinedtype>)var9).L$1 = var8;
                  } catch (Throwable var465) {
                     var10000 = var465;
                     var10001 = false;
                     break label4071;
                  }

                  var479 = var0;

                  try {
                     ((<undefinedtype>)var9).L$2 = var484;
                  } catch (Throwable var464) {
                     var10000 = var464;
                     var10001 = false;
                     break label4071;
                  }

                  var479 = var0;

                  try {
                     ((<undefinedtype>)var9).L$3 = var483;
                  } catch (Throwable var463) {
                     var10000 = var463;
                     var10001 = false;
                     break label4071;
                  }

                  var479 = var0;

                  try {
                     ((<undefinedtype>)var9).L$4 = var7;
                  } catch (Throwable var462) {
                     var10000 = var462;
                     var10001 = false;
                     break label4071;
                  }

                  var479 = var0;

                  try {
                     ((<undefinedtype>)var9).L$5 = var0;
                  } catch (Throwable var461) {
                     var10000 = var461;
                     var10001 = false;
                     break label4071;
                  }

                  var479 = var0;

                  try {
                     ((<undefinedtype>)var9).L$6 = var481;
                  } catch (Throwable var460) {
                     var10000 = var460;
                     var10001 = false;
                     break label4071;
                  }

                  var479 = var0;

                  try {
                     ((<undefinedtype>)var9).L$7 = var10;
                  } catch (Throwable var459) {
                     var10000 = var459;
                     var10001 = false;
                     break label4071;
                  }

                  var479 = var0;

                  try {
                     ((<undefinedtype>)var9).L$8 = var487;
                  } catch (Throwable var458) {
                     var10000 = var458;
                     var10001 = false;
                     break label4071;
                  }

                  var479 = var0;

                  try {
                     ((<undefinedtype>)var9).label = 1;
                  } catch (Throwable var457) {
                     var10000 = var457;
                     var10001 = false;
                     break label4071;
                  }

                  var479 = var0;

                  try {
                     var13 = var487.hasNext((Continuation)var9);
                  } catch (Throwable var456) {
                     var10000 = var456;
                     var10001 = false;
                     break label4071;
                  }

                  if (var13 == var1) {
                     return var1;
                  }

                  var476 = var484;
                  var479 = var0;

                  try {
                     if (!(Boolean)var13) {
                        break;
                     }
                  } catch (Throwable var470) {
                     var10000 = var470;
                     var10001 = false;
                     break label4071;
                  }

                  var479 = var0;

                  label4076: {
                     try {
                        if (!Intrinsics.areEqual(var8, var487.next())) {
                           break label4076;
                        }
                     } catch (Throwable var469) {
                        var10000 = var469;
                        var10001 = false;
                        break label4071;
                     }

                     var479 = var0;

                     try {
                        var476.element = var483.element;
                     } catch (Throwable var468) {
                        var10000 = var468;
                        var10001 = false;
                        break label4071;
                     }
                  }

                  var479 = var0;

                  try {
                     ++var483.element;
                  } catch (Throwable var467) {
                     var10000 = var467;
                     var10001 = false;
                     break label4071;
                  }

                  var1 = var1;
                  var484 = var484;
               }
            }

            var479 = var0;

            try {
               Unit var485 = Unit.INSTANCE;
            } catch (Throwable var453) {
               var10000 = var453;
               var10001 = false;
               break label4071;
            }

            ChannelsKt.cancelConsumed(var0, var481);
            return Boxing.boxInt(var476.element);
         }

         var475 = var10000;
      }

      try {
         throw var475;
      } finally {
         ChannelsKt.cancelConsumed(var479, var475);
      }
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object lastOrNull(ReceiveChannel var0, Continuation var1) {
      Object var613;
      label5346: {
         if (var1 instanceof <undefinedtype>) {
            <undefinedtype> var4 = (<undefinedtype>)var1;
            if ((var4.label & Integer.MIN_VALUE) != 0) {
               var4.label += Integer.MIN_VALUE;
               var613 = var4;
               break label5346;
            }
         }

         var613 = new ContinuationImpl(var1) {
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            int label;
            Object result;

            public final Object invokeSuspend(Object var1) {
               this.result = var1;
               this.label |= Integer.MIN_VALUE;
               return ChannelsKt.lastOrNull((ReceiveChannel)null, this);
            }
         };
      }

      Throwable var5;
      Object var11;
      ReceiveChannel var615;
      label5340: {
         Throwable var617;
         ReceiveChannel var618;
         label5357: {
            Throwable var10000;
            label5337: {
               label5336: {
                  ReceiveChannel var6;
                  Object var12;
                  boolean var10001;
                  Object var614;
                  ChannelIterator var619;
                  ReceiveChannel var621;
                  Object var622;
                  ChannelIterator var623;
                  Object var624;
                  label5349: {
                     Object var9 = ((<undefinedtype>)var613).result;
                     var12 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                     int var2 = ((<undefinedtype>)var613).label;
                     ChannelIterator var7;
                     ReceiveChannel var8;
                     if (var2 != 0) {
                        if (var2 != 1) {
                           if (var2 != 2) {
                              throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                           }

                           var11 = ((<undefinedtype>)var613).L$5;
                           var619 = (ChannelIterator)((<undefinedtype>)var613).L$4;
                           var621 = (ReceiveChannel)((<undefinedtype>)var613).L$3;
                           var5 = (Throwable)((<undefinedtype>)var613).L$2;
                           var6 = (ReceiveChannel)((<undefinedtype>)var613).L$1;
                           ReceiveChannel var10 = (ReceiveChannel)((<undefinedtype>)var613).L$0;
                           var0 = var6;

                           try {
                              ResultKt.throwOnFailure(var9);
                           } catch (Throwable var610) {
                              var10000 = var610;
                              var10001 = false;
                              break label5336;
                           }

                           var622 = var613;
                           var615 = var6;
                           var6 = var10;
                           var624 = var9;
                           var0 = var615;

                           try {
                              if (!(Boolean)var624) {
                                 break label5340;
                              }
                           } catch (Throwable var606) {
                              var10000 = var606;
                              var10001 = false;
                              break label5336;
                           }

                           var0 = var615;

                           try {
                              var624 = var619.next();
                           } catch (Throwable var605) {
                              var10000 = var605;
                              var10001 = false;
                              break label5336;
                           }

                           var623 = var619;
                           var618 = var615;
                           var614 = var624;
                           break label5349;
                        }

                        var7 = (ChannelIterator)((<undefinedtype>)var613).L$4;
                        var8 = (ReceiveChannel)((<undefinedtype>)var613).L$3;
                        var5 = (Throwable)((<undefinedtype>)var613).L$2;
                        var618 = (ReceiveChannel)((<undefinedtype>)var613).L$1;
                        var6 = (ReceiveChannel)((<undefinedtype>)var613).L$0;
                        var0 = var618;

                        try {
                           ResultKt.throwOnFailure(var9);
                        } catch (Throwable var609) {
                           var10000 = var609;
                           var10001 = false;
                           break label5336;
                        }
                     } else {
                        ResultKt.throwOnFailure(var9);
                        Throwable var620 = (Throwable)null;
                        var618 = var0;

                        try {
                           var7 = var0.iterator();
                        } catch (Throwable var604) {
                           var10000 = var604;
                           var10001 = false;
                           break label5337;
                        }

                        var618 = var0;

                        try {
                           ((<undefinedtype>)var613).L$0 = var0;
                        } catch (Throwable var603) {
                           var10000 = var603;
                           var10001 = false;
                           break label5337;
                        }

                        var618 = var0;

                        try {
                           ((<undefinedtype>)var613).L$1 = var0;
                        } catch (Throwable var602) {
                           var10000 = var602;
                           var10001 = false;
                           break label5337;
                        }

                        var618 = var0;

                        try {
                           ((<undefinedtype>)var613).L$2 = null;
                        } catch (Throwable var601) {
                           var10000 = var601;
                           var10001 = false;
                           break label5337;
                        }

                        var618 = var0;

                        try {
                           ((<undefinedtype>)var613).L$3 = var0;
                        } catch (Throwable var600) {
                           var10000 = var600;
                           var10001 = false;
                           break label5337;
                        }

                        var618 = var0;

                        try {
                           ((<undefinedtype>)var613).L$4 = var7;
                        } catch (Throwable var599) {
                           var10000 = var599;
                           var10001 = false;
                           break label5337;
                        }

                        var618 = var0;

                        try {
                           ((<undefinedtype>)var613).label = 1;
                        } catch (Throwable var598) {
                           var10000 = var598;
                           var10001 = false;
                           break label5337;
                        }

                        var618 = var0;

                        try {
                           var9 = var7.hasNext((Continuation)var613);
                        } catch (Throwable var597) {
                           var10000 = var597;
                           var10001 = false;
                           break label5337;
                        }

                        if (var9 == var12) {
                           return var12;
                        }

                        var6 = var0;
                        var5 = null;
                        var8 = var0;
                        var618 = var0;
                     }

                     var0 = var618;

                     boolean var3;
                     try {
                        var3 = (Boolean)var9;
                     } catch (Throwable var608) {
                        var10000 = var608;
                        var10001 = false;
                        break label5336;
                     }

                     if (!var3) {
                        ChannelsKt.cancelConsumed(var618, var5);
                        return null;
                     }

                     var0 = var618;

                     try {
                        var624 = var7.next();
                     } catch (Throwable var607) {
                        var10000 = var607;
                        var10001 = false;
                        break label5336;
                     }

                     var623 = var7;
                     var614 = var624;
                     var621 = var8;
                     var622 = var613;
                  }

                  while(true) {
                     var615 = var618;
                     var618 = var618;

                     try {
                        ((<undefinedtype>)var622).L$0 = var6;
                     } catch (Throwable var596) {
                        var10000 = var596;
                        var10001 = false;
                        break label5337;
                     }

                     var618 = var615;

                     try {
                        ((<undefinedtype>)var622).L$1 = var615;
                     } catch (Throwable var595) {
                        var10000 = var595;
                        var10001 = false;
                        break label5337;
                     }

                     var618 = var615;

                     try {
                        ((<undefinedtype>)var622).L$2 = var5;
                     } catch (Throwable var594) {
                        var10000 = var594;
                        var10001 = false;
                        break label5337;
                     }

                     var618 = var615;

                     try {
                        ((<undefinedtype>)var622).L$3 = var621;
                     } catch (Throwable var593) {
                        var10000 = var593;
                        var10001 = false;
                        break label5337;
                     }

                     var618 = var615;

                     try {
                        ((<undefinedtype>)var622).L$4 = var623;
                     } catch (Throwable var592) {
                        var10000 = var592;
                        var10001 = false;
                        break label5337;
                     }

                     var618 = var615;

                     try {
                        ((<undefinedtype>)var622).L$5 = var614;
                     } catch (Throwable var591) {
                        var10000 = var591;
                        var10001 = false;
                        break label5337;
                     }

                     var618 = var615;

                     try {
                        ((<undefinedtype>)var622).label = 2;
                     } catch (Throwable var590) {
                        var10000 = var590;
                        var10001 = false;
                        break label5337;
                     }

                     var618 = var615;

                     try {
                        var624 = var623.hasNext((Continuation)var622);
                     } catch (Throwable var589) {
                        var10000 = var589;
                        var10001 = false;
                        break label5337;
                     }

                     if (var624 == var12) {
                        return var12;
                     }

                     var11 = var614;
                     var619 = var623;
                     var0 = var615;

                     try {
                        if (!(Boolean)var624) {
                           break label5340;
                        }
                     } catch (Throwable var611) {
                        var10000 = var611;
                        var10001 = false;
                        break;
                     }

                     var0 = var615;

                     try {
                        var624 = var619.next();
                     } catch (Throwable var612) {
                        var10000 = var612;
                        var10001 = false;
                        break;
                     }

                     var623 = var623;
                     var618 = var615;
                     var614 = var624;
                  }
               }

               Throwable var616 = var10000;
               var618 = var0;
               var617 = var616;
               break label5357;
            }

            var617 = var10000;
         }

         try {
            throw var617;
         } finally {
            ChannelsKt.cancelConsumed(var618, var617);
         }
      }

      ChannelsKt.cancelConsumed(var615, var5);
      return var11;
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object lastOrNull(ReceiveChannel var0, Function1 var1, Continuation var2) {
      Object var435;
      label3747: {
         if (var2 instanceof <undefinedtype>) {
            <undefinedtype> var4 = (<undefinedtype>)var2;
            if ((var4.label & Integer.MIN_VALUE) != 0) {
               var4.label += Integer.MIN_VALUE;
               var435 = var4;
               break label3747;
            }
         }

         var435 = new ContinuationImpl(var2) {
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            int label;
            Object result;

            public final Object invokeSuspend(Object var1) {
               this.result = var1;
               this.label |= Integer.MIN_VALUE;
               return ChannelsKt.lastOrNull((ReceiveChannel)null, (Function1)null, this);
            }
         };
      }

      Throwable var432;
      ReceiveChannel var434;
      label3741: {
         Throwable var10000;
         label3750: {
            boolean var10001;
            Ref.ObjectRef var437;
            Throwable var439;
            label3739: {
               Object var13 = ((<undefinedtype>)var435).result;
               Object var438 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
               int var3 = ((<undefinedtype>)var435).label;
               ReceiveChannel var6;
               ChannelIterator var7;
               Object var8;
               Function1 var9;
               ReceiveChannel var10;
               ReceiveChannel var11;
               Object var12;
               Ref.ObjectRef var433;
               Object var440;
               Ref.ObjectRef var441;
               ChannelIterator var446;
               if (var3 != 0) {
                  if (var3 != 1) {
                     throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                  }

                  var7 = (ChannelIterator)((<undefinedtype>)var435).L$7;
                  var10 = (ReceiveChannel)((<undefinedtype>)var435).L$6;
                  Throwable var5 = (Throwable)((<undefinedtype>)var435).L$5;
                  var0 = (ReceiveChannel)((<undefinedtype>)var435).L$4;
                  var6 = (ReceiveChannel)((<undefinedtype>)var435).L$3;
                  var433 = (Ref.ObjectRef)((<undefinedtype>)var435).L$2;
                  var9 = (Function1)((<undefinedtype>)var435).L$1;
                  var11 = (ReceiveChannel)((<undefinedtype>)var435).L$0;

                  try {
                     ResultKt.throwOnFailure(var13);
                  } catch (Throwable var413) {
                     var434 = var0;
                     var432 = var413;
                     break label3741;
                  }

                  var8 = var435;
                  Throwable var436 = var5;
                  var440 = var438;
                  var439 = var436;
                  var437 = var433;
                  var434 = var0;

                  try {
                     if (!(Boolean)var13) {
                        break label3739;
                     }
                  } catch (Throwable var428) {
                     var10000 = var428;
                     var10001 = false;
                     break label3750;
                  }

                  var434 = var0;

                  try {
                     var12 = var7.next();
                  } catch (Throwable var429) {
                     var10000 = var429;
                     var10001 = false;
                     break label3750;
                  }

                  var434 = var0;

                  label3752: {
                     try {
                        if (!(Boolean)var9.invoke(var12)) {
                           break label3752;
                        }
                     } catch (Throwable var430) {
                        var10000 = var430;
                        var10001 = false;
                        break label3750;
                     }

                     var434 = var0;

                     try {
                        var437.element = var12;
                     } catch (Throwable var431) {
                        var10000 = var431;
                        var10001 = false;
                        break label3750;
                     }
                  }

                  var433 = var437;
                  var435 = var440;
                  var441 = var433;
                  var446 = var7;
               } else {
                  ResultKt.throwOnFailure(var13);
                  var441 = new Ref.ObjectRef();
                  var441.element = null;
                  Throwable var442 = (Throwable)null;

                  try {
                     var446 = var0.iterator();
                  } catch (Throwable var412) {
                     var434 = var0;
                     var432 = var412;
                     break label3741;
                  }

                  var8 = var438;
                  var439 = null;
                  var6 = var0;
                  Object var445 = var435;
                  var11 = var0;
                  var435 = var8;
                  var8 = var445;
                  var9 = var1;
                  var10 = var0;
                  var0 = var0;
               }

               while(true) {
                  var434 = var0;

                  try {
                     ((<undefinedtype>)var8).L$0 = var11;
                  } catch (Throwable var423) {
                     var10000 = var423;
                     var10001 = false;
                     break label3750;
                  }

                  var434 = var0;

                  try {
                     ((<undefinedtype>)var8).L$1 = var9;
                  } catch (Throwable var422) {
                     var10000 = var422;
                     var10001 = false;
                     break label3750;
                  }

                  var434 = var0;

                  try {
                     ((<undefinedtype>)var8).L$2 = var441;
                  } catch (Throwable var421) {
                     var10000 = var421;
                     var10001 = false;
                     break label3750;
                  }

                  var434 = var0;

                  try {
                     ((<undefinedtype>)var8).L$3 = var6;
                  } catch (Throwable var420) {
                     var10000 = var420;
                     var10001 = false;
                     break label3750;
                  }

                  var434 = var0;

                  try {
                     ((<undefinedtype>)var8).L$4 = var0;
                  } catch (Throwable var419) {
                     var10000 = var419;
                     var10001 = false;
                     break label3750;
                  }

                  var434 = var0;

                  try {
                     ((<undefinedtype>)var8).L$5 = var439;
                  } catch (Throwable var418) {
                     var10000 = var418;
                     var10001 = false;
                     break label3750;
                  }

                  var434 = var0;

                  try {
                     ((<undefinedtype>)var8).L$6 = var10;
                  } catch (Throwable var417) {
                     var10000 = var417;
                     var10001 = false;
                     break label3750;
                  }

                  var434 = var0;

                  try {
                     ((<undefinedtype>)var8).L$7 = var446;
                  } catch (Throwable var416) {
                     var10000 = var416;
                     var10001 = false;
                     break label3750;
                  }

                  var434 = var0;

                  try {
                     ((<undefinedtype>)var8).label = 1;
                  } catch (Throwable var415) {
                     var10000 = var415;
                     var10001 = false;
                     break label3750;
                  }

                  var434 = var0;

                  try {
                     var13 = var446.hasNext((Continuation)var8);
                  } catch (Throwable var414) {
                     var10000 = var414;
                     var10001 = false;
                     break label3750;
                  }

                  if (var13 == var435) {
                     return var435;
                  }

                  Object var444 = var435;
                  var7 = var446;
                  var437 = var441;
                  var440 = var444;
                  var434 = var0;

                  try {
                     if (!(Boolean)var13) {
                        break;
                     }
                  } catch (Throwable var427) {
                     var10000 = var427;
                     var10001 = false;
                     break label3750;
                  }

                  var434 = var0;

                  try {
                     var12 = var7.next();
                  } catch (Throwable var425) {
                     var10000 = var425;
                     var10001 = false;
                     break label3750;
                  }

                  var434 = var0;

                  label3755: {
                     try {
                        if (!(Boolean)var9.invoke(var12)) {
                           break label3755;
                        }
                     } catch (Throwable var426) {
                        var10000 = var426;
                        var10001 = false;
                        break label3750;
                     }

                     var434 = var0;

                     try {
                        var437.element = var12;
                     } catch (Throwable var424) {
                        var10000 = var424;
                        var10001 = false;
                        break label3750;
                     }
                  }

                  var433 = var437;
                  var435 = var440;
                  var441 = var433;
                  var446 = var7;
               }
            }

            var434 = var0;

            try {
               Unit var443 = Unit.INSTANCE;
            } catch (Throwable var411) {
               var10000 = var411;
               var10001 = false;
               break label3750;
            }

            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, var439);
            InlineMarker.finallyEnd(1);
            return var437.element;
         }

         var432 = var10000;
      }

      try {
         throw var432;
      } finally {
         InlineMarker.finallyStart(1);
         ChannelsKt.cancelConsumed(var434, var432);
         InlineMarker.finallyEnd(1);
      }
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   private static final Object lastOrNull$$forInline(ReceiveChannel var0, Function1 var1, Continuation var2) {
      Throwable var3 = (Throwable)null;

      Object var28;
      label209: {
         Throwable var10000;
         label210: {
            ChannelIterator var5;
            boolean var10001;
            try {
               var5 = var0.iterator();
            } catch (Throwable var25) {
               var10000 = var25;
               var10001 = false;
               break label210;
            }

            var28 = null;

            while(true) {
               Object var4;
               try {
                  InlineMarker.mark(0);
                  var4 = var5.hasNext(var2);
                  InlineMarker.mark(1);
                  if (!(Boolean)var4) {
                     break;
                  }

                  var4 = var5.next();
                  if (!(Boolean)var1.invoke(var4)) {
                     continue;
                  }
               } catch (Throwable var24) {
                  var10000 = var24;
                  var10001 = false;
                  break label210;
               }

               var28 = var4;
            }

            label191:
            try {
               Unit var27 = Unit.INSTANCE;
               break label209;
            } catch (Throwable var23) {
               var10000 = var23;
               var10001 = false;
               break label191;
            }
         }

         Throwable var26 = var10000;

         try {
            throw var26;
         } finally {
            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, var26);
            InlineMarker.finallyEnd(1);
         }
      }

      InlineMarker.finallyStart(1);
      ChannelsKt.cancelConsumed(var0, (Throwable)null);
      InlineMarker.finallyEnd(1);
      return var28;
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final ReceiveChannel map(ReceiveChannel var0, CoroutineContext var1, Function2 var2) {
      return ProduceKt.produce$default((CoroutineScope)GlobalScope.INSTANCE, var1, 0, (CoroutineStart)null, ChannelsKt.consumes(var0), (Function2)(new Function2(var0, var2, (Continuation)null) {
         final ReceiveChannel $this_map;
         final Function2 $transform;
         Object L$0;
         Object L$1;
         Object L$2;
         Object L$3;
         Object L$4;
         Object L$5;
         Object L$6;
         Object L$7;
         Object L$8;
         Object L$9;
         int label;
         private ProducerScope p$;

         {
            this.$this_map = var1;
            this.$transform = var2;
         }

         public final Continuation create(Object var1, Continuation var2) {
            Function2 var3 = new <anonymous constructor>(this.$this_map, this.$transform, var2);
            var3.p$ = (ProducerScope)var1;
            return var3;
         }

         public final Object invoke(Object var1, Object var2) {
            return ((<undefinedtype>)this.create(var1, (Continuation)var2)).invokeSuspend(Unit.INSTANCE);
         }

         public final Object invokeSuspend(Object var1) {
            ReceiveChannel var3;
            Throwable var3185;
            label26611: {
               Throwable var10000;
               ReceiveChannel var3192;
               label26614: {
                  boolean var10001;
                  ReceiveChannel var3184;
                  Throwable var3186;
                  label26609: {
                     label26608: {
                        ReceiveChannel var8;
                        label26607: {
                           Object var15 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                           int var2 = this.label;
                           <undefinedtype> var4;
                           ReceiveChannel var5;
                           ProducerScope var6;
                           <undefinedtype> var9;
                           ReceiveChannel var10;
                           ChannelIterator var11;
                           ProducerScope var12;
                           Object var14;
                           ChannelIterator var3187;
                           <undefinedtype> var3189;
                           <undefinedtype> var3191;
                           ReceiveChannel var3194;
                           ChannelIterator var3195;
                           Object var3197;
                           Object var3198;
                           Object var3201;
                           if (var2 != 0) {
                              if (var2 != 1) {
                                 if (var2 != 2) {
                                    if (var2 != 3) {
                                       throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                                    }

                                    var11 = (ChannelIterator)this.L$6;
                                    var8 = (ReceiveChannel)this.L$5;
                                    Throwable var7 = (Throwable)this.L$4;
                                    var5 = (ReceiveChannel)this.L$3;
                                    var4 = (<undefinedtype>)this.L$2;
                                    var10 = (ReceiveChannel)this.L$1;
                                    var6 = (ProducerScope)this.L$0;
                                    var3 = var5;

                                    try {
                                       ResultKt.throwOnFailure(var1);
                                    } catch (Throwable var3142) {
                                       var10000 = var3142;
                                       var10001 = false;
                                       break label26608;
                                    }

                                    var9 = this;
                                    var3184 = var5;
                                    var3186 = var7;
                                    var3189 = var4;
                                 } else {
                                    var12 = (ProducerScope)this.L$9;
                                    var3197 = this.L$8;
                                    var14 = this.L$7;
                                    var3195 = (ChannelIterator)this.L$6;
                                    var5 = (ReceiveChannel)this.L$5;
                                    var3186 = (Throwable)this.L$4;
                                    var3194 = (ReceiveChannel)this.L$3;
                                    var4 = (<undefinedtype>)this.L$2;
                                    ReceiveChannel var13 = (ReceiveChannel)this.L$1;
                                    var6 = (ProducerScope)this.L$0;
                                    var8 = var3194;

                                    try {
                                       ResultKt.throwOnFailure(var1);
                                    } catch (Throwable var3154) {
                                       var10000 = var3154;
                                       var10001 = false;
                                       break label26607;
                                    }

                                    var3191 = this;
                                    Object var3193 = var1;
                                    var3184 = var3194;
                                    var3194 = var13;
                                    var3201 = var3193;
                                    var8 = var3184;

                                    try {
                                       var3191.L$0 = var6;
                                    } catch (Throwable var3153) {
                                       var10000 = var3153;
                                       var10001 = false;
                                       break label26607;
                                    }

                                    var8 = var3184;

                                    try {
                                       var3191.L$1 = var3194;
                                    } catch (Throwable var3152) {
                                       var10000 = var3152;
                                       var10001 = false;
                                       break label26607;
                                    }

                                    var8 = var3184;

                                    try {
                                       var3191.L$2 = var4;
                                    } catch (Throwable var3151) {
                                       var10000 = var3151;
                                       var10001 = false;
                                       break label26607;
                                    }

                                    var8 = var3184;

                                    try {
                                       var3191.L$3 = var3184;
                                    } catch (Throwable var3150) {
                                       var10000 = var3150;
                                       var10001 = false;
                                       break label26607;
                                    }

                                    var8 = var3184;

                                    try {
                                       var3191.L$4 = var3186;
                                    } catch (Throwable var3149) {
                                       var10000 = var3149;
                                       var10001 = false;
                                       break label26607;
                                    }

                                    var8 = var3184;

                                    try {
                                       var3191.L$5 = var5;
                                    } catch (Throwable var3148) {
                                       var10000 = var3148;
                                       var10001 = false;
                                       break label26607;
                                    }

                                    var8 = var3184;

                                    try {
                                       var3191.L$6 = var3195;
                                    } catch (Throwable var3147) {
                                       var10000 = var3147;
                                       var10001 = false;
                                       break label26607;
                                    }

                                    var8 = var3184;

                                    try {
                                       var3191.L$7 = var14;
                                    } catch (Throwable var3146) {
                                       var10000 = var3146;
                                       var10001 = false;
                                       break label26607;
                                    }

                                    var8 = var3184;

                                    try {
                                       var3191.L$8 = var3197;
                                    } catch (Throwable var3145) {
                                       var10000 = var3145;
                                       var10001 = false;
                                       break label26607;
                                    }

                                    var8 = var3184;

                                    try {
                                       var3191.label = 3;
                                    } catch (Throwable var3144) {
                                       var10000 = var3144;
                                       var10001 = false;
                                       break label26607;
                                    }

                                    var8 = var3184;

                                    try {
                                       var3197 = var12.send(var3201, var3191);
                                    } catch (Throwable var3143) {
                                       var10000 = var3143;
                                       var10001 = false;
                                       break label26607;
                                    }

                                    if (var3197 == var15) {
                                       return var15;
                                    }

                                    var11 = var3195;
                                    var10 = var3194;
                                    var9 = this;
                                    var8 = var5;
                                    var3189 = var4;
                                 }

                                 var3192 = var3184;

                                 try {
                                    var9.L$0 = var6;
                                 } catch (Throwable var3122) {
                                    var10000 = var3122;
                                    var10001 = false;
                                    break label26614;
                                 }

                                 var3192 = var3184;

                                 try {
                                    var9.L$1 = var10;
                                 } catch (Throwable var3121) {
                                    var10000 = var3121;
                                    var10001 = false;
                                    break label26614;
                                 }

                                 var3192 = var3184;

                                 try {
                                    var9.L$2 = var3189;
                                 } catch (Throwable var3120) {
                                    var10000 = var3120;
                                    var10001 = false;
                                    break label26614;
                                 }

                                 var3192 = var3184;

                                 try {
                                    var9.L$3 = var3184;
                                 } catch (Throwable var3119) {
                                    var10000 = var3119;
                                    var10001 = false;
                                    break label26614;
                                 }

                                 var3192 = var3184;

                                 try {
                                    var9.L$4 = var3186;
                                 } catch (Throwable var3118) {
                                    var10000 = var3118;
                                    var10001 = false;
                                    break label26614;
                                 }

                                 var3192 = var3184;

                                 try {
                                    var9.L$5 = var8;
                                 } catch (Throwable var3117) {
                                    var10000 = var3117;
                                    var10001 = false;
                                    break label26614;
                                 }

                                 var3192 = var3184;

                                 try {
                                    var9.L$6 = var11;
                                 } catch (Throwable var3116) {
                                    var10000 = var3116;
                                    var10001 = false;
                                    break label26614;
                                 }

                                 var3192 = var3184;

                                 try {
                                    var9.label = 1;
                                 } catch (Throwable var3115) {
                                    var10000 = var3115;
                                    var10001 = false;
                                    break label26614;
                                 }

                                 var3192 = var3184;

                                 try {
                                    var3198 = var11.hasNext(var3189);
                                 } catch (Throwable var3114) {
                                    var10000 = var3114;
                                    var10001 = false;
                                    break label26614;
                                 }

                                 var3187 = var11;
                                 var3197 = var3198;
                                 if (var3198 == var15) {
                                    return var15;
                                 }
                              } else {
                                 ChannelIterator var3199 = (ChannelIterator)this.L$6;
                                 var8 = (ReceiveChannel)this.L$5;
                                 Throwable var3200 = (Throwable)this.L$4;
                                 ReceiveChannel var3188 = (ReceiveChannel)this.L$3;
                                 var3189 = (<undefinedtype>)this.L$2;
                                 var10 = (ReceiveChannel)this.L$1;
                                 var6 = (ProducerScope)this.L$0;
                                 var3 = var3188;

                                 try {
                                    ResultKt.throwOnFailure(var1);
                                 } catch (Throwable var3141) {
                                    var10000 = var3141;
                                    var10001 = false;
                                    break label26608;
                                 }

                                 Object var3196 = var1;
                                 var9 = this;
                                 var3184 = var3188;
                                 var3187 = var3199;
                                 var3186 = var3200;
                                 var3197 = var3196;
                              }
                           } else {
                              ResultKt.throwOnFailure(var1);
                              var6 = this.p$;
                              var8 = this.$this_map;
                              var3185 = (Throwable)null;
                              var3 = var8;

                              try {
                                 var11 = var8.iterator();
                              } catch (Throwable var3140) {
                                 var10000 = var3140;
                                 var10001 = false;
                                 break label26608;
                              }

                              var3189 = this;
                              var9 = this;
                              var3184 = var8;
                              var10 = var8;
                              var3186 = null;
                              var3192 = var8;

                              try {
                                 var9.L$0 = var6;
                              } catch (Throwable var3166) {
                                 var10000 = var3166;
                                 var10001 = false;
                                 break label26614;
                              }

                              var3192 = var8;

                              try {
                                 var9.L$1 = var10;
                              } catch (Throwable var3167) {
                                 var10000 = var3167;
                                 var10001 = false;
                                 break label26614;
                              }

                              var3192 = var8;

                              try {
                                 var9.L$2 = var3189;
                              } catch (Throwable var3168) {
                                 var10000 = var3168;
                                 var10001 = false;
                                 break label26614;
                              }

                              var3192 = var8;

                              try {
                                 var9.L$3 = var3184;
                              } catch (Throwable var3169) {
                                 var10000 = var3169;
                                 var10001 = false;
                                 break label26614;
                              }

                              var3192 = var8;

                              try {
                                 var9.L$4 = var3186;
                              } catch (Throwable var3170) {
                                 var10000 = var3170;
                                 var10001 = false;
                                 break label26614;
                              }

                              var3192 = var8;

                              try {
                                 var9.L$5 = var8;
                              } catch (Throwable var3171) {
                                 var10000 = var3171;
                                 var10001 = false;
                                 break label26614;
                              }

                              var3192 = var8;

                              try {
                                 var9.L$6 = var11;
                              } catch (Throwable var3172) {
                                 var10000 = var3172;
                                 var10001 = false;
                                 break label26614;
                              }

                              var3192 = var8;

                              try {
                                 var9.label = 1;
                              } catch (Throwable var3173) {
                                 var10000 = var3173;
                                 var10001 = false;
                                 break label26614;
                              }

                              var3192 = var8;

                              try {
                                 var3198 = var11.hasNext(var3189);
                              } catch (Throwable var3174) {
                                 var10000 = var3174;
                                 var10001 = false;
                                 break label26614;
                              }

                              var3187 = var11;
                              var3197 = var3198;
                              if (var3198 == var15) {
                                 return var15;
                              }
                           }

                           while(true) {
                              var3192 = var3184;

                              try {
                                 if (!(Boolean)var3197) {
                                    break label26609;
                                 }
                              } catch (Throwable var3139) {
                                 var10000 = var3139;
                                 var10001 = false;
                                 break label26614;
                              }

                              var3192 = var3184;

                              try {
                                 var3197 = var3187.next();
                              } catch (Throwable var3138) {
                                 var10000 = var3138;
                                 var10001 = false;
                                 break label26614;
                              }

                              var3192 = var3184;

                              Function2 var3202;
                              try {
                                 var3202 = var9.$transform;
                              } catch (Throwable var3137) {
                                 var10000 = var3137;
                                 var10001 = false;
                                 break label26614;
                              }

                              var3192 = var3184;

                              try {
                                 var9.L$0 = var6;
                              } catch (Throwable var3136) {
                                 var10000 = var3136;
                                 var10001 = false;
                                 break label26614;
                              }

                              var3192 = var3184;

                              try {
                                 var9.L$1 = var10;
                              } catch (Throwable var3135) {
                                 var10000 = var3135;
                                 var10001 = false;
                                 break label26614;
                              }

                              var3192 = var3184;

                              try {
                                 var9.L$2 = var3189;
                              } catch (Throwable var3134) {
                                 var10000 = var3134;
                                 var10001 = false;
                                 break label26614;
                              }

                              var3192 = var3184;

                              try {
                                 var9.L$3 = var3184;
                              } catch (Throwable var3133) {
                                 var10000 = var3133;
                                 var10001 = false;
                                 break label26614;
                              }

                              var3192 = var3184;

                              try {
                                 var9.L$4 = var3186;
                              } catch (Throwable var3132) {
                                 var10000 = var3132;
                                 var10001 = false;
                                 break label26614;
                              }

                              var3192 = var3184;

                              try {
                                 var9.L$5 = var8;
                              } catch (Throwable var3131) {
                                 var10000 = var3131;
                                 var10001 = false;
                                 break label26614;
                              }

                              var3192 = var3184;

                              try {
                                 var9.L$6 = var3187;
                              } catch (Throwable var3130) {
                                 var10000 = var3130;
                                 var10001 = false;
                                 break label26614;
                              }

                              var3192 = var3184;

                              try {
                                 var9.L$7 = var3197;
                              } catch (Throwable var3129) {
                                 var10000 = var3129;
                                 var10001 = false;
                                 break label26614;
                              }

                              var3192 = var3184;

                              try {
                                 var9.L$8 = var3197;
                              } catch (Throwable var3128) {
                                 var10000 = var3128;
                                 var10001 = false;
                                 break label26614;
                              }

                              var3192 = var3184;

                              try {
                                 var9.L$9 = var6;
                              } catch (Throwable var3127) {
                                 var10000 = var3127;
                                 var10001 = false;
                                 break label26614;
                              }

                              var3192 = var3184;

                              try {
                                 var9.label = 2;
                              } catch (Throwable var3126) {
                                 var10000 = var3126;
                                 var10001 = false;
                                 break label26614;
                              }

                              var3192 = var3184;

                              try {
                                 InlineMarker.mark(6);
                              } catch (Throwable var3125) {
                                 var10000 = var3125;
                                 var10001 = false;
                                 break label26614;
                              }

                              var3192 = var3184;

                              try {
                                 var3201 = var3202.invoke(var3197, var9);
                              } catch (Throwable var3124) {
                                 var10000 = var3124;
                                 var10001 = false;
                                 break label26614;
                              }

                              var3192 = var3184;

                              try {
                                 InlineMarker.mark(7);
                              } catch (Throwable var3123) {
                                 var10000 = var3123;
                                 var10001 = false;
                                 break label26614;
                              }

                              if (var3201 == var15) {
                                 return var15;
                              }

                              var3191 = var9;
                              var3194 = var10;
                              var3195 = var3187;
                              var14 = var3197;
                              var4 = var3189;
                              var5 = var8;
                              var12 = var6;
                              var8 = var3184;

                              try {
                                 var3191.L$0 = var6;
                              } catch (Throwable var3155) {
                                 var10000 = var3155;
                                 var10001 = false;
                                 break;
                              }

                              var8 = var3184;

                              try {
                                 var3191.L$1 = var3194;
                              } catch (Throwable var3156) {
                                 var10000 = var3156;
                                 var10001 = false;
                                 break;
                              }

                              var8 = var3184;

                              try {
                                 var3191.L$2 = var4;
                              } catch (Throwable var3157) {
                                 var10000 = var3157;
                                 var10001 = false;
                                 break;
                              }

                              var8 = var3184;

                              try {
                                 var3191.L$3 = var3184;
                              } catch (Throwable var3158) {
                                 var10000 = var3158;
                                 var10001 = false;
                                 break;
                              }

                              var8 = var3184;

                              try {
                                 var3191.L$4 = var3186;
                              } catch (Throwable var3159) {
                                 var10000 = var3159;
                                 var10001 = false;
                                 break;
                              }

                              var8 = var3184;

                              try {
                                 var3191.L$5 = var5;
                              } catch (Throwable var3160) {
                                 var10000 = var3160;
                                 var10001 = false;
                                 break;
                              }

                              var8 = var3184;

                              try {
                                 var3191.L$6 = var3195;
                              } catch (Throwable var3161) {
                                 var10000 = var3161;
                                 var10001 = false;
                                 break;
                              }

                              var8 = var3184;

                              try {
                                 var3191.L$7 = var14;
                              } catch (Throwable var3162) {
                                 var10000 = var3162;
                                 var10001 = false;
                                 break;
                              }

                              var8 = var3184;

                              try {
                                 var3191.L$8 = var3197;
                              } catch (Throwable var3163) {
                                 var10000 = var3163;
                                 var10001 = false;
                                 break;
                              }

                              var8 = var3184;

                              try {
                                 var3191.label = 3;
                              } catch (Throwable var3164) {
                                 var10000 = var3164;
                                 var10001 = false;
                                 break;
                              }

                              var8 = var3184;

                              try {
                                 var3197 = var12.send(var3201, var3191);
                              } catch (Throwable var3165) {
                                 var10000 = var3165;
                                 var10001 = false;
                                 break;
                              }

                              if (var3197 == var15) {
                                 return var15;
                              }

                              var11 = var3195;
                              var10 = var3194;
                              var9 = var3191;
                              var8 = var5;
                              var3189 = var4;
                              var3192 = var3184;

                              try {
                                 var9.L$0 = var6;
                              } catch (Throwable var3175) {
                                 var10000 = var3175;
                                 var10001 = false;
                                 break label26614;
                              }

                              var3192 = var3184;

                              try {
                                 var9.L$1 = var10;
                              } catch (Throwable var3176) {
                                 var10000 = var3176;
                                 var10001 = false;
                                 break label26614;
                              }

                              var3192 = var3184;

                              try {
                                 var9.L$2 = var3189;
                              } catch (Throwable var3177) {
                                 var10000 = var3177;
                                 var10001 = false;
                                 break label26614;
                              }

                              var3192 = var3184;

                              try {
                                 var9.L$3 = var3184;
                              } catch (Throwable var3178) {
                                 var10000 = var3178;
                                 var10001 = false;
                                 break label26614;
                              }

                              var3192 = var3184;

                              try {
                                 var9.L$4 = var3186;
                              } catch (Throwable var3179) {
                                 var10000 = var3179;
                                 var10001 = false;
                                 break label26614;
                              }

                              var3192 = var3184;

                              try {
                                 var9.L$5 = var8;
                              } catch (Throwable var3180) {
                                 var10000 = var3180;
                                 var10001 = false;
                                 break label26614;
                              }

                              var3192 = var3184;

                              try {
                                 var9.L$6 = var11;
                              } catch (Throwable var3181) {
                                 var10000 = var3181;
                                 var10001 = false;
                                 break label26614;
                              }

                              var3192 = var3184;

                              try {
                                 var9.label = 1;
                              } catch (Throwable var3182) {
                                 var10000 = var3182;
                                 var10001 = false;
                                 break label26614;
                              }

                              var3192 = var3184;

                              try {
                                 var3198 = var11.hasNext(var3189);
                              } catch (Throwable var3183) {
                                 var10000 = var3183;
                                 var10001 = false;
                                 break label26614;
                              }

                              var3187 = var11;
                              var3197 = var3198;
                              if (var3198 == var15) {
                                 return var15;
                              }
                           }
                        }

                        var3185 = var10000;
                        var3 = var8;
                        break label26611;
                     }

                     var3185 = var10000;
                     break label26611;
                  }

                  var3192 = var3184;

                  try {
                     Unit var3190 = Unit.INSTANCE;
                  } catch (Throwable var3113) {
                     var10000 = var3113;
                     var10001 = false;
                     break label26614;
                  }

                  ChannelsKt.cancelConsumed(var3184, var3186);
                  return Unit.INSTANCE;
               }

               var3185 = var10000;
               var3 = var3192;
            }

            try {
               throw var3185;
            } finally {
               ChannelsKt.cancelConsumed(var3, var3185);
            }
         }
      }), 6, (Object)null);
   }

   // $FF: synthetic method
   public static ReceiveChannel map$default(ReceiveChannel var0, CoroutineContext var1, Function2 var2, int var3, Object var4) {
      if ((var3 & 1) != 0) {
         var1 = (CoroutineContext)Dispatchers.getUnconfined();
      }

      return ChannelsKt.map(var0, var1, var2);
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final ReceiveChannel mapIndexed(ReceiveChannel var0, CoroutineContext var1, Function3 var2) {
      return ProduceKt.produce$default((CoroutineScope)GlobalScope.INSTANCE, var1, 0, (CoroutineStart)null, ChannelsKt.consumes(var0), (Function2)(new Function2(var0, var2, (Continuation)null) {
         final ReceiveChannel $this_mapIndexed;
         final Function3 $transform;
         int I$0;
         Object L$0;
         Object L$1;
         Object L$2;
         Object L$3;
         int label;
         private ProducerScope p$;

         {
            this.$this_mapIndexed = var1;
            this.$transform = var2;
         }

         public final Continuation create(Object var1, Continuation var2) {
            Function2 var3 = new <anonymous constructor>(this.$this_mapIndexed, this.$transform, var2);
            var3.p$ = (ProducerScope)var1;
            return var3;
         }

         public final Object invoke(Object var1, Object var2) {
            return ((<undefinedtype>)this.create(var1, (Continuation)var2)).invokeSuspend(Unit.INSTANCE);
         }

         public final Object invokeSuspend(Object var1) {
            Object var9 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
            int var2 = this.label;
            ProducerScope var4;
            Object var6;
            ChannelIterator var10;
            ProducerScope var12;
            ChannelIterator var13;
            <undefinedtype> var15;
            if (var2 != 0) {
               if (var2 != 1) {
                  <undefinedtype> var3;
                  ChannelIterator var5;
                  if (var2 != 2) {
                     if (var2 != 3) {
                        throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                     }

                     var5 = (ChannelIterator)this.L$2;
                     var2 = this.I$0;
                     var4 = (ProducerScope)this.L$0;
                     ResultKt.throwOnFailure(var1);
                     var3 = this;
                     var10 = var5;
                  } else {
                     ProducerScope var8 = (ProducerScope)this.L$3;
                     var5 = (ChannelIterator)this.L$2;
                     var6 = this.L$1;
                     var2 = this.I$0;
                     var12 = (ProducerScope)this.L$0;
                     ResultKt.throwOnFailure(var1);
                     this.L$0 = var12;
                     this.I$0 = var2;
                     this.L$1 = var6;
                     this.L$2 = var5;
                     this.label = 3;
                     if (var8.send(var1, this) == var9) {
                        return var9;
                     }

                     var10 = var5;
                     var3 = this;
                     var4 = var12;
                  }

                  var3.L$0 = var4;
                  var3.I$0 = var2;
                  var3.L$1 = var10;
                  var3.label = 1;
                  var6 = var10.hasNext(var3);
                  if (var6 == var9) {
                     return var9;
                  }

                  var15 = var3;
                  var12 = var4;
                  var13 = var10;
               } else {
                  var13 = (ChannelIterator)this.L$1;
                  var2 = this.I$0;
                  var12 = (ProducerScope)this.L$0;
                  ResultKt.throwOnFailure(var1);
                  var15 = this;
                  var6 = var1;
               }
            } else {
               ResultKt.throwOnFailure(var1);
               var4 = this.p$;
               var10 = this.$this_mapIndexed.iterator();
               var2 = 0;
               this.L$0 = var4;
               this.I$0 = var2;
               this.L$1 = var10;
               this.label = 1;
               var6 = var10.hasNext(this);
               if (var6 == var9) {
                  return var9;
               }

               var15 = this;
               var12 = var4;
               var13 = var10;
            }

            while((Boolean)var6) {
               Object var18 = var13.next();
               Function3 var16 = var15.$transform;
               Integer var11 = Boxing.boxInt(var2);
               ++var2;
               var15.L$0 = var12;
               var15.I$0 = var2;
               var15.L$1 = var18;
               var15.L$2 = var13;
               var15.L$3 = var12;
               var15.label = 2;
               Object var7 = var16.invoke(var11, var18, var15);
               if (var7 == var9) {
                  return var9;
               }

               var15.L$0 = var12;
               var15.I$0 = var2;
               var15.L$1 = var18;
               var15.L$2 = var13;
               var15.label = 3;
               if (var12.send(var7, var15) == var9) {
                  return var9;
               }

               var15.L$0 = var12;
               var15.I$0 = var2;
               var15.L$1 = var13;
               var15.label = 1;
               var6 = var13.hasNext(var15);
               if (var6 == var9) {
                  return var9;
               }

               var15 = var15;
               var12 = var12;
               var13 = var13;
            }

            return Unit.INSTANCE;
         }
      }), 6, (Object)null);
   }

   // $FF: synthetic method
   public static ReceiveChannel mapIndexed$default(ReceiveChannel var0, CoroutineContext var1, Function3 var2, int var3, Object var4) {
      if ((var3 & 1) != 0) {
         var1 = (CoroutineContext)Dispatchers.getUnconfined();
      }

      return ChannelsKt.mapIndexed(var0, var1, var2);
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final ReceiveChannel mapIndexedNotNull(ReceiveChannel var0, CoroutineContext var1, Function3 var2) {
      return ChannelsKt.filterNotNull(ChannelsKt.mapIndexed(var0, var1, var2));
   }

   // $FF: synthetic method
   public static ReceiveChannel mapIndexedNotNull$default(ReceiveChannel var0, CoroutineContext var1, Function3 var2, int var3, Object var4) {
      if ((var3 & 1) != 0) {
         var1 = (CoroutineContext)Dispatchers.getUnconfined();
      }

      return ChannelsKt.mapIndexedNotNull(var0, var1, var2);
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object mapIndexedNotNullTo(ReceiveChannel var0, Collection var1, Function2 var2, Continuation var3) {
      Object var993;
      label8056: {
         if (var3 instanceof <undefinedtype>) {
            <undefinedtype> var5 = (<undefinedtype>)var3;
            if ((var5.label & Integer.MIN_VALUE) != 0) {
               var5.label += Integer.MIN_VALUE;
               var993 = var5;
               break label8056;
            }
         }

         var993 = new ContinuationImpl(var3) {
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            Object L$8;
            Object L$9;
            int label;
            Object result;

            public final Object invokeSuspend(Object var1) {
               this.result = var1;
               this.label |= Integer.MIN_VALUE;
               return ChannelsKt.mapIndexedNotNullTo((ReceiveChannel)null, (Collection)null, (Function2)null, this);
            }
         };
      }

      label8051: {
         Throwable var10000;
         label8059: {
            boolean var10001;
            ReceiveChannel var989;
            Throwable var994;
            Collection var996;
            label8049: {
               Object var14 = ((<undefinedtype>)var993).result;
               Object var995 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
               int var4 = ((<undefinedtype>)var993).label;
               ReceiveChannel var6;
               Object var7;
               ReceiveChannel var8;
               ChannelIterator var9;
               Ref.IntRef var10;
               Function2 var11;
               ReceiveChannel var12;
               Object var13;
               ReceiveChannel var991;
               IndexedValue var999;
               Throwable var1000;
               if (var4 != 0) {
                  if (var4 != 1) {
                     throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                  }

                  var9 = (ChannelIterator)((<undefinedtype>)var993).L$9;
                  var12 = (ReceiveChannel)((<undefinedtype>)var993).L$8;
                  Throwable var988 = (Throwable)((<undefinedtype>)var993).L$7;
                  var989 = (ReceiveChannel)((<undefinedtype>)var993).L$6;
                  var8 = (ReceiveChannel)((<undefinedtype>)var993).L$5;
                  var10 = (Ref.IntRef)((<undefinedtype>)var993).L$4;
                  var6 = (ReceiveChannel)((<undefinedtype>)var993).L$3;
                  var11 = (Function2)((<undefinedtype>)var993).L$2;
                  Collection var990 = (Collection)((<undefinedtype>)var993).L$1;
                  ReceiveChannel var15 = (ReceiveChannel)((<undefinedtype>)var993).L$0;

                  try {
                     ResultKt.throwOnFailure(var14);
                  } catch (Throwable var955) {
                     var0 = var989;
                     var1 = var955;
                     break label8051;
                  }

                  var13 = var995;
                  var996 = var990;
                  var7 = var993;
                  var994 = var988;
                  var991 = var15;
                  var0 = var989;

                  try {
                     if (!(Boolean)var14) {
                        break label8049;
                     }
                  } catch (Throwable var978) {
                     var10000 = var978;
                     var10001 = false;
                     break label8059;
                  }

                  var0 = var989;

                  try {
                     var14 = var9.next();
                  } catch (Throwable var979) {
                     var10000 = var979;
                     var10001 = false;
                     break label8059;
                  }

                  var0 = var989;

                  try {
                     var999 = new IndexedValue;
                  } catch (Throwable var980) {
                     var10000 = var980;
                     var10001 = false;
                     break label8059;
                  }

                  var0 = var989;

                  try {
                     var4 = var10.element;
                  } catch (Throwable var981) {
                     var10000 = var981;
                     var10001 = false;
                     break label8059;
                  }

                  var0 = var989;

                  try {
                     var10.element = var4 + 1;
                  } catch (Throwable var982) {
                     var10000 = var982;
                     var10001 = false;
                     break label8059;
                  }

                  var0 = var989;

                  try {
                     var999.<init>(var4, var14);
                  } catch (Throwable var983) {
                     var10000 = var983;
                     var10001 = false;
                     break label8059;
                  }

                  var0 = var989;

                  try {
                     var4 = var999.component1();
                  } catch (Throwable var984) {
                     var10000 = var984;
                     var10001 = false;
                     break label8059;
                  }

                  var0 = var989;

                  try {
                     var14 = var999.component2();
                  } catch (Throwable var985) {
                     var10000 = var985;
                     var10001 = false;
                     break label8059;
                  }

                  var0 = var989;

                  try {
                     var14 = var11.invoke(Boxing.boxInt(var4), var14);
                  } catch (Throwable var986) {
                     var10000 = var986;
                     var10001 = false;
                     break label8059;
                  }

                  if (var14 != null) {
                     var0 = var989;

                     try {
                        var996.add(var14);
                     } catch (Throwable var987) {
                        var10000 = var987;
                        var10001 = false;
                        break label8059;
                     }
                  }

                  var1000 = var994;
               } else {
                  ResultKt.throwOnFailure(var14);
                  var10 = new Ref.IntRef();
                  var10.element = 0;
                  Throwable var997 = (Throwable)null;

                  try {
                     var9 = var0.iterator();
                  } finally {
                     break label8051;
                  }

               }

               while(true) {
                  var0 = var989;

                  try {
                     ((<undefinedtype>)var7).L$0 = var991;
                  } catch (Throwable var967) {
                     var10000 = var967;
                     var10001 = false;
                     break label8059;
                  }

                  var0 = var989;

                  try {
                     ((<undefinedtype>)var7).L$1 = var996;
                  } catch (Throwable var966) {
                     var10000 = var966;
                     var10001 = false;
                     break label8059;
                  }

                  var0 = var989;

                  try {
                     ((<undefinedtype>)var7).L$2 = var11;
                  } catch (Throwable var965) {
                     var10000 = var965;
                     var10001 = false;
                     break label8059;
                  }

                  var0 = var989;

                  try {
                     ((<undefinedtype>)var7).L$3 = var6;
                  } catch (Throwable var964) {
                     var10000 = var964;
                     var10001 = false;
                     break label8059;
                  }

                  var0 = var989;

                  try {
                     ((<undefinedtype>)var7).L$4 = var10;
                  } catch (Throwable var963) {
                     var10000 = var963;
                     var10001 = false;
                     break label8059;
                  }

                  var0 = var989;

                  try {
                     ((<undefinedtype>)var7).L$5 = var8;
                  } catch (Throwable var962) {
                     var10000 = var962;
                     var10001 = false;
                     break label8059;
                  }

                  var0 = var989;

                  try {
                     ((<undefinedtype>)var7).L$6 = var989;
                  } catch (Throwable var961) {
                     var10000 = var961;
                     var10001 = false;
                     break label8059;
                  }

                  var0 = var989;

                  try {
                     ((<undefinedtype>)var7).L$7 = var1000;
                  } catch (Throwable var960) {
                     var10000 = var960;
                     var10001 = false;
                     break label8059;
                  }

                  var0 = var989;

                  try {
                     ((<undefinedtype>)var7).L$8 = var12;
                  } catch (Throwable var959) {
                     var10000 = var959;
                     var10001 = false;
                     break label8059;
                  }

                  var0 = var989;

                  try {
                     ((<undefinedtype>)var7).L$9 = var9;
                  } catch (Throwable var958) {
                     var10000 = var958;
                     var10001 = false;
                     break label8059;
                  }

                  var0 = var989;

                  try {
                     ((<undefinedtype>)var7).label = 1;
                  } catch (Throwable var957) {
                     var10000 = var957;
                     var10001 = false;
                     break label8059;
                  }

                  var0 = var989;

                  try {
                     var993 = var9.hasNext((Continuation)var7);
                  } catch (Throwable var956) {
                     var10000 = var956;
                     var10001 = false;
                     break label8059;
                  }

                  if (var993 == var13) {
                     return var13;
                  }

                  Object var998 = var993;
                  var994 = var1000;
                  var14 = var998;
                  var0 = var989;

                  try {
                     if (!(Boolean)var14) {
                        break;
                     }
                  } catch (Throwable var977) {
                     var10000 = var977;
                     var10001 = false;
                     break label8059;
                  }

                  var0 = var989;

                  try {
                     var14 = var9.next();
                  } catch (Throwable var976) {
                     var10000 = var976;
                     var10001 = false;
                     break label8059;
                  }

                  var0 = var989;

                  try {
                     var999 = new IndexedValue;
                  } catch (Throwable var975) {
                     var10000 = var975;
                     var10001 = false;
                     break label8059;
                  }

                  var0 = var989;

                  try {
                     var4 = var10.element;
                  } catch (Throwable var974) {
                     var10000 = var974;
                     var10001 = false;
                     break label8059;
                  }

                  var0 = var989;

                  try {
                     var10.element = var4 + 1;
                  } catch (Throwable var973) {
                     var10000 = var973;
                     var10001 = false;
                     break label8059;
                  }

                  var0 = var989;

                  try {
                     var999.<init>(var4, var14);
                  } catch (Throwable var972) {
                     var10000 = var972;
                     var10001 = false;
                     break label8059;
                  }

                  var0 = var989;

                  try {
                     var4 = var999.component1();
                  } catch (Throwable var971) {
                     var10000 = var971;
                     var10001 = false;
                     break label8059;
                  }

                  var0 = var989;

                  try {
                     var14 = var999.component2();
                  } catch (Throwable var970) {
                     var10000 = var970;
                     var10001 = false;
                     break label8059;
                  }

                  var0 = var989;

                  try {
                     var14 = var11.invoke(Boxing.boxInt(var4), var14);
                  } catch (Throwable var969) {
                     var10000 = var969;
                     var10001 = false;
                     break label8059;
                  }

                  if (var14 != null) {
                     var0 = var989;

                     try {
                        var996.add(var14);
                     } catch (Throwable var968) {
                        var10000 = var968;
                        var10001 = false;
                        break label8059;
                     }
                  }

                  var1000 = var994;
               }
            }

            var0 = var989;

            try {
               Unit var992 = Unit.INSTANCE;
            } catch (Throwable var953) {
               var10000 = var953;
               var10001 = false;
               break label8059;
            }

            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var989, var994);
            InlineMarker.finallyEnd(1);
            return var996;
         }

         var1 = var10000;
      }

      try {
         throw var1;
      } finally {
         InlineMarker.finallyStart(1);
         ChannelsKt.cancelConsumed(var0, (Throwable)var1);
         InlineMarker.finallyEnd(1);
      }
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object mapIndexedNotNullTo(ReceiveChannel param0, SendChannel param1, Function2 param2, Continuation param3) {
      // $FF: Couldn't be decompiled
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   private static final Object mapIndexedNotNullTo$$forInline(ReceiveChannel var0, Collection var1, Function2 var2, Continuation var3) {
      Throwable var5 = (Throwable)null;

      label286: {
         Throwable var10000;
         label287: {
            ChannelIterator var40;
            boolean var10001;
            try {
               var40 = var0.iterator();
            } catch (Throwable var37) {
               var10000 = var37;
               var10001 = false;
               break label287;
            }

            int var4 = 0;

            while(true) {
               Object var6;
               try {
                  InlineMarker.mark(0);
                  var6 = var40.hasNext(var3);
                  InlineMarker.mark(1);
                  if (!(Boolean)var6) {
                     break;
                  }

                  Object var7 = var40.next();
                  IndexedValue var41 = new IndexedValue(var4, var7);
                  var6 = var2.invoke(var41.component1(), var41.component2());
               } catch (Throwable var36) {
                  var10000 = var36;
                  var10001 = false;
                  break label287;
               }

               if (var6 != null) {
                  try {
                     var1.add(var6);
                  } catch (Throwable var35) {
                     var10000 = var35;
                     var10001 = false;
                     break label287;
                  }
               }

               ++var4;
            }

            label266:
            try {
               Unit var39 = Unit.INSTANCE;
               break label286;
            } catch (Throwable var34) {
               var10000 = var34;
               var10001 = false;
               break label266;
            }
         }

         Throwable var38 = var10000;

         try {
            throw var38;
         } finally {
            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, var38);
            InlineMarker.finallyEnd(1);
         }
      }

      InlineMarker.finallyStart(1);
      ChannelsKt.cancelConsumed(var0, (Throwable)null);
      InlineMarker.finallyEnd(1);
      return var1;
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   private static final Object mapIndexedNotNullTo$$forInline(ReceiveChannel var0, SendChannel var1, Function2 var2, Continuation var3) {
      Throwable var5 = (Throwable)null;

      label286: {
         Throwable var10000;
         label287: {
            ChannelIterator var40;
            boolean var10001;
            try {
               var40 = var0.iterator();
            } catch (Throwable var37) {
               var10000 = var37;
               var10001 = false;
               break label287;
            }

            int var4 = 0;

            while(true) {
               Object var6;
               try {
                  InlineMarker.mark(0);
                  var6 = var40.hasNext(var3);
                  InlineMarker.mark(1);
                  if (!(Boolean)var6) {
                     break;
                  }

                  var6 = var40.next();
                  IndexedValue var7 = new IndexedValue(var4, var6);
                  var6 = var2.invoke(var7.component1(), var7.component2());
               } catch (Throwable var36) {
                  var10000 = var36;
                  var10001 = false;
                  break label287;
               }

               if (var6 != null) {
                  try {
                     InlineMarker.mark(0);
                     var1.send(var6, var3);
                     InlineMarker.mark(2);
                     InlineMarker.mark(1);
                  } catch (Throwable var35) {
                     var10000 = var35;
                     var10001 = false;
                     break label287;
                  }
               }

               ++var4;
            }

            label266:
            try {
               Unit var39 = Unit.INSTANCE;
               break label286;
            } catch (Throwable var34) {
               var10000 = var34;
               var10001 = false;
               break label266;
            }
         }

         Throwable var38 = var10000;

         try {
            throw var38;
         } finally {
            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, var38);
            InlineMarker.finallyEnd(1);
         }
      }

      InlineMarker.finallyStart(1);
      ChannelsKt.cancelConsumed(var0, (Throwable)null);
      InlineMarker.finallyEnd(1);
      return var1;
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object mapIndexedTo(ReceiveChannel var0, Collection var1, Function2 var2, Continuation var3) {
      Object var543;
      label4454: {
         if (var3 instanceof <undefinedtype>) {
            <undefinedtype> var5 = (<undefinedtype>)var3;
            if ((var5.label & Integer.MIN_VALUE) != 0) {
               var5.label += Integer.MIN_VALUE;
               var543 = var5;
               break label4454;
            }
         }

         var543 = new ContinuationImpl(var3) {
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            Object L$8;
            int label;
            Object result;

            public final Object invokeSuspend(Object var1) {
               this.result = var1;
               this.label |= Integer.MIN_VALUE;
               return ChannelsKt.mapIndexedTo((ReceiveChannel)null, (Collection)null, (Function2)null, this);
            }
         };
      }

      label4449: {
         Throwable var10000;
         label4457: {
            boolean var10001;
            ReceiveChannel var540;
            Throwable var544;
            Collection var545;
            label4447: {
               Object var13 = ((<undefinedtype>)var543).result;
               Object var12 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
               int var4 = ((<undefinedtype>)var543).label;
               ReceiveChannel var6;
               Function2 var7;
               Ref.IntRef var8;
               Object var9;
               ChannelIterator var10;
               ReceiveChannel var11;
               ReceiveChannel var541;
               Throwable var547;
               ReceiveChannel var549;
               if (var4 != 0) {
                  if (var4 != 1) {
                     throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                  }

                  var10 = (ChannelIterator)((<undefinedtype>)var543).L$8;
                  var11 = (ReceiveChannel)((<undefinedtype>)var543).L$7;
                  Throwable var539 = (Throwable)((<undefinedtype>)var543).L$6;
                  var540 = (ReceiveChannel)((<undefinedtype>)var543).L$5;
                  var6 = (ReceiveChannel)((<undefinedtype>)var543).L$4;
                  var8 = (Ref.IntRef)((<undefinedtype>)var543).L$3;
                  var7 = (Function2)((<undefinedtype>)var543).L$2;
                  var545 = (Collection)((<undefinedtype>)var543).L$1;
                  var541 = (ReceiveChannel)((<undefinedtype>)var543).L$0;

                  try {
                     ResultKt.throwOnFailure(var13);
                  } catch (Throwable var517) {
                     var0 = var540;
                     var1 = var517;
                     break label4449;
                  }

                  var9 = var543;
                  var544 = var539;
                  var0 = var540;

                  try {
                     if (!(Boolean)var13) {
                        break label4447;
                     }
                  } catch (Throwable var534) {
                     var10000 = var534;
                     var10001 = false;
                     break label4457;
                  }

                  var0 = var540;

                  try {
                     var13 = var10.next();
                  } catch (Throwable var535) {
                     var10000 = var535;
                     var10001 = false;
                     break label4457;
                  }

                  var0 = var540;

                  try {
                     var4 = var8.element;
                  } catch (Throwable var536) {
                     var10000 = var536;
                     var10001 = false;
                     break label4457;
                  }

                  var0 = var540;

                  try {
                     var8.element = var4 + 1;
                  } catch (Throwable var537) {
                     var10000 = var537;
                     var10001 = false;
                     break label4457;
                  }

                  var0 = var540;

                  try {
                     var545.add(var7.invoke(Boxing.boxInt(var4), var13));
                  } catch (Throwable var538) {
                     var10000 = var538;
                     var10001 = false;
                     break label4457;
                  }

                  var549 = var6;
                  var547 = var544;
               } else {
                  ResultKt.throwOnFailure(var13);
                  var8 = new Ref.IntRef();
                  var8.element = 0;
                  Throwable var546 = (Throwable)null;

                  try {
                     var10 = var0.iterator();
                  } finally {
                     break label4449;
                  }

               }

               while(true) {
                  var0 = var540;

                  try {
                     ((<undefinedtype>)var9).L$0 = var541;
                  } catch (Throwable var528) {
                     var10000 = var528;
                     var10001 = false;
                     break label4457;
                  }

                  var0 = var540;

                  try {
                     ((<undefinedtype>)var9).L$1 = var545;
                  } catch (Throwable var527) {
                     var10000 = var527;
                     var10001 = false;
                     break label4457;
                  }

                  var0 = var540;

                  try {
                     ((<undefinedtype>)var9).L$2 = var7;
                  } catch (Throwable var526) {
                     var10000 = var526;
                     var10001 = false;
                     break label4457;
                  }

                  var0 = var540;

                  try {
                     ((<undefinedtype>)var9).L$3 = var8;
                  } catch (Throwable var525) {
                     var10000 = var525;
                     var10001 = false;
                     break label4457;
                  }

                  var0 = var540;

                  try {
                     ((<undefinedtype>)var9).L$4 = var549;
                  } catch (Throwable var524) {
                     var10000 = var524;
                     var10001 = false;
                     break label4457;
                  }

                  var0 = var540;

                  try {
                     ((<undefinedtype>)var9).L$5 = var540;
                  } catch (Throwable var523) {
                     var10000 = var523;
                     var10001 = false;
                     break label4457;
                  }

                  var0 = var540;

                  try {
                     ((<undefinedtype>)var9).L$6 = var547;
                  } catch (Throwable var522) {
                     var10000 = var522;
                     var10001 = false;
                     break label4457;
                  }

                  var0 = var540;

                  try {
                     ((<undefinedtype>)var9).L$7 = var11;
                  } catch (Throwable var521) {
                     var10000 = var521;
                     var10001 = false;
                     break label4457;
                  }

                  var0 = var540;

                  try {
                     ((<undefinedtype>)var9).L$8 = var10;
                  } catch (Throwable var520) {
                     var10000 = var520;
                     var10001 = false;
                     break label4457;
                  }

                  var0 = var540;

                  try {
                     ((<undefinedtype>)var9).label = 1;
                  } catch (Throwable var519) {
                     var10000 = var519;
                     var10001 = false;
                     break label4457;
                  }

                  var0 = var540;

                  try {
                     var543 = var10.hasNext((Continuation)var9);
                  } catch (Throwable var518) {
                     var10000 = var518;
                     var10001 = false;
                     break label4457;
                  }

                  if (var543 == var12) {
                     return var12;
                  }

                  Object var548 = var543;
                  var544 = var547;
                  var6 = var549;
                  var13 = var548;
                  var0 = var540;

                  try {
                     if (!(Boolean)var13) {
                        break;
                     }
                  } catch (Throwable var533) {
                     var10000 = var533;
                     var10001 = false;
                     break label4457;
                  }

                  var0 = var540;

                  try {
                     var13 = var10.next();
                  } catch (Throwable var532) {
                     var10000 = var532;
                     var10001 = false;
                     break label4457;
                  }

                  var0 = var540;

                  try {
                     var4 = var8.element;
                  } catch (Throwable var531) {
                     var10000 = var531;
                     var10001 = false;
                     break label4457;
                  }

                  var0 = var540;

                  try {
                     var8.element = var4 + 1;
                  } catch (Throwable var530) {
                     var10000 = var530;
                     var10001 = false;
                     break label4457;
                  }

                  var0 = var540;

                  try {
                     var545.add(var7.invoke(Boxing.boxInt(var4), var13));
                  } catch (Throwable var529) {
                     var10000 = var529;
                     var10001 = false;
                     break label4457;
                  }

                  var549 = var6;
                  var547 = var544;
               }
            }

            var0 = var540;

            try {
               Unit var542 = Unit.INSTANCE;
            } catch (Throwable var515) {
               var10000 = var515;
               var10001 = false;
               break label4457;
            }

            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var540, var544);
            InlineMarker.finallyEnd(1);
            return var545;
         }

         var1 = var10000;
      }

      try {
         throw var1;
      } finally {
         InlineMarker.finallyStart(1);
         ChannelsKt.cancelConsumed(var0, (Throwable)var1);
         InlineMarker.finallyEnd(1);
      }
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object mapIndexedTo(ReceiveChannel var0, SendChannel var1, Function2 var2, Continuation var3) {
      Object var1879;
      label15567: {
         if (var3 instanceof <undefinedtype>) {
            <undefinedtype> var5 = (<undefinedtype>)var3;
            if ((var5.label & Integer.MIN_VALUE) != 0) {
               var5.label += Integer.MIN_VALUE;
               var1879 = var5;
               break label15567;
            }
         }

         var1879 = new ContinuationImpl(var3) {
            Object L$0;
            Object L$1;
            Object L$10;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            Object L$8;
            Object L$9;
            int label;
            Object result;

            public final Object invokeSuspend(Object var1) {
               this.result = var1;
               this.label |= Integer.MIN_VALUE;
               return ChannelsKt.mapIndexedTo((ReceiveChannel)null, (SendChannel)null, (Function2)null, this);
            }
         };
      }

      Throwable var1876;
      ReceiveChannel var1890;
      label15577: {
         Throwable var10000;
         label15560: {
            label15559: {
               Object var13 = ((<undefinedtype>)var1879).result;
               Object var1882 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
               int var4 = ((<undefinedtype>)var1879).label;
               ReceiveChannel var6;
               Throwable var7;
               Object var8;
               ChannelIterator var9;
               Ref.IntRef var10;
               ReceiveChannel var14;
               ReceiveChannel var15;
               boolean var10001;
               Function2 var1873;
               SendChannel var1874;
               Throwable var1877;
               Unit var1878;
               ReceiveChannel var1880;
               SendChannel var1881;
               ReceiveChannel var1883;
               ChannelIterator var1884;
               ReceiveChannel var1886;
               ReceiveChannel var1887;
               Object var1888;
               SendChannel var1889;
               SendChannel var1891;
               Object var1894;
               if (var4 != 0) {
                  ReceiveChannel var1872;
                  if (var4 != 1) {
                     if (var4 != 2) {
                        throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                     }

                     Object var1871 = ((<undefinedtype>)var1879).L$10;
                     var1871 = ((<undefinedtype>)var1879).L$9;
                     var9 = (ChannelIterator)((<undefinedtype>)var1879).L$8;
                     var14 = (ReceiveChannel)((<undefinedtype>)var1879).L$7;
                     var7 = (Throwable)((<undefinedtype>)var1879).L$6;
                     var1872 = (ReceiveChannel)((<undefinedtype>)var1879).L$5;
                     ReceiveChannel var11 = (ReceiveChannel)((<undefinedtype>)var1879).L$4;
                     var10 = (Ref.IntRef)((<undefinedtype>)var1879).L$3;
                     Function2 var12 = (Function2)((<undefinedtype>)var1879).L$2;
                     var1874 = (SendChannel)((<undefinedtype>)var1879).L$1;
                     var6 = (ReceiveChannel)((<undefinedtype>)var1879).L$0;
                     var0 = var1872;

                     try {
                        ResultKt.throwOnFailure(var13);
                     } catch (Throwable var1850) {
                        var10000 = var1850;
                        var10001 = false;
                        break label15559;
                     }

                     var8 = var1879;
                     var0 = var11;
                     var1888 = var1882;
                     var1880 = var14;
                     var1883 = var0;
                     var0 = var1872;
                     var1873 = var12;
                  } else {
                     var1884 = (ChannelIterator)((<undefinedtype>)var1879).L$8;
                     var15 = (ReceiveChannel)((<undefinedtype>)var1879).L$7;
                     var1877 = (Throwable)((<undefinedtype>)var1879).L$6;
                     var1872 = (ReceiveChannel)((<undefinedtype>)var1879).L$5;
                     var1886 = (ReceiveChannel)((<undefinedtype>)var1879).L$4;
                     var10 = (Ref.IntRef)((<undefinedtype>)var1879).L$3;
                     Function2 var1892 = (Function2)((<undefinedtype>)var1879).L$2;
                     var1889 = (SendChannel)((<undefinedtype>)var1879).L$1;
                     var1887 = (ReceiveChannel)((<undefinedtype>)var1879).L$0;
                     var0 = var1872;

                     try {
                        ResultKt.throwOnFailure(var13);
                     } catch (Throwable var1851) {
                        var10000 = var1851;
                        var10001 = false;
                        break label15559;
                     }

                     var1888 = var1882;
                     var0 = var1872;
                     var8 = var1879;
                     var1883 = var15;
                     var1873 = var1892;
                     var1881 = var1889;
                     var1890 = var0;

                     label15572: {
                        try {
                           if ((Boolean)var13) {
                              break label15572;
                           }
                        } catch (Throwable var1849) {
                           var10000 = var1849;
                           var10001 = false;
                           break label15560;
                        }

                        var1890 = var0;

                        try {
                           var1878 = Unit.INSTANCE;
                        } catch (Throwable var1819) {
                           var10000 = var1819;
                           var10001 = false;
                           break label15560;
                        }

                        InlineMarker.finallyStart(1);
                        ChannelsKt.cancelConsumed(var0, var1877);
                        InlineMarker.finallyEnd(1);
                        return var1881;
                     }

                     var1890 = var0;

                     try {
                        var1894 = var1884.next();
                     } catch (Throwable var1847) {
                        var10000 = var1847;
                        var10001 = false;
                        break label15560;
                     }

                     var1890 = var0;

                     try {
                        var4 = var10.element;
                     } catch (Throwable var1846) {
                        var10000 = var1846;
                        var10001 = false;
                        break label15560;
                     }

                     var1890 = var0;

                     try {
                        var10.element = var4 + 1;
                     } catch (Throwable var1845) {
                        var10000 = var1845;
                        var10001 = false;
                        break label15560;
                     }

                     var1890 = var0;

                     try {
                        var13 = var1873.invoke(Boxing.boxInt(var4), var1894);
                     } catch (Throwable var1844) {
                        var10000 = var1844;
                        var10001 = false;
                        break label15560;
                     }

                     var1890 = var0;

                     try {
                        ((<undefinedtype>)var8).L$0 = var1887;
                     } catch (Throwable var1843) {
                        var10000 = var1843;
                        var10001 = false;
                        break label15560;
                     }

                     var1890 = var0;

                     try {
                        ((<undefinedtype>)var8).L$1 = var1881;
                     } catch (Throwable var1842) {
                        var10000 = var1842;
                        var10001 = false;
                        break label15560;
                     }

                     var1890 = var0;

                     try {
                        ((<undefinedtype>)var8).L$2 = var1873;
                     } catch (Throwable var1841) {
                        var10000 = var1841;
                        var10001 = false;
                        break label15560;
                     }

                     var1890 = var0;

                     try {
                        ((<undefinedtype>)var8).L$3 = var10;
                     } catch (Throwable var1840) {
                        var10000 = var1840;
                        var10001 = false;
                        break label15560;
                     }

                     var1890 = var0;

                     try {
                        ((<undefinedtype>)var8).L$4 = var1886;
                     } catch (Throwable var1839) {
                        var10000 = var1839;
                        var10001 = false;
                        break label15560;
                     }

                     var1890 = var0;

                     try {
                        ((<undefinedtype>)var8).L$5 = var0;
                     } catch (Throwable var1838) {
                        var10000 = var1838;
                        var10001 = false;
                        break label15560;
                     }

                     var1890 = var0;

                     try {
                        ((<undefinedtype>)var8).L$6 = var1877;
                     } catch (Throwable var1837) {
                        var10000 = var1837;
                        var10001 = false;
                        break label15560;
                     }

                     var1890 = var0;

                     try {
                        ((<undefinedtype>)var8).L$7 = var1883;
                     } catch (Throwable var1836) {
                        var10000 = var1836;
                        var10001 = false;
                        break label15560;
                     }

                     var1890 = var0;

                     try {
                        ((<undefinedtype>)var8).L$8 = var1884;
                     } catch (Throwable var1835) {
                        var10000 = var1835;
                        var10001 = false;
                        break label15560;
                     }

                     var1890 = var0;

                     try {
                        ((<undefinedtype>)var8).L$9 = var1894;
                     } catch (Throwable var1834) {
                        var10000 = var1834;
                        var10001 = false;
                        break label15560;
                     }

                     var1890 = var0;

                     try {
                        ((<undefinedtype>)var8).L$10 = var1894;
                     } catch (Throwable var1833) {
                        var10000 = var1833;
                        var10001 = false;
                        break label15560;
                     }

                     var1890 = var0;

                     try {
                        ((<undefinedtype>)var8).label = 2;
                     } catch (Throwable var1832) {
                        var10000 = var1832;
                        var10001 = false;
                        break label15560;
                     }

                     var1890 = var0;

                     try {
                        if (var1881.send(var13, (Continuation)var8) == var1888) {
                           return var1888;
                        }
                     } catch (Throwable var1848) {
                        var10000 = var1848;
                        var10001 = false;
                        break label15560;
                     }

                     var1890 = var1887;
                     var14 = var1886;
                     var9 = var1884;
                     var1891 = var1881;
                     var7 = var1877;
                     var6 = var1890;
                     var1883 = var14;
                     var1880 = var15;
                     var1874 = var1891;
                  }
               } else {
                  ResultKt.throwOnFailure(var13);
                  var10 = new Ref.IntRef();
                  var10.element = 0;
                  Throwable var1885 = (Throwable)null;

                  try {
                     var9 = var0.iterator();
                  } catch (Throwable var1820) {
                     var1890 = var0;
                     var1876 = var1820;
                     break label15577;
                  }

                  var8 = var1879;
                  var1888 = var1882;
                  var7 = null;
                  var6 = var0;
                  var1883 = var0;
                  var0 = var0;
                  var1880 = var0;
                  var1889 = var1;
                  var1873 = var2;
                  var1874 = var1889;
               }

               while(true) {
                  var1890 = var0;

                  try {
                     ((<undefinedtype>)var8).L$0 = var6;
                  } catch (Throwable var1831) {
                     var10000 = var1831;
                     var10001 = false;
                     break label15560;
                  }

                  var1890 = var0;

                  try {
                     ((<undefinedtype>)var8).L$1 = var1874;
                  } catch (Throwable var1830) {
                     var10000 = var1830;
                     var10001 = false;
                     break label15560;
                  }

                  var1890 = var0;

                  try {
                     ((<undefinedtype>)var8).L$2 = var1873;
                  } catch (Throwable var1829) {
                     var10000 = var1829;
                     var10001 = false;
                     break label15560;
                  }

                  var1890 = var0;

                  try {
                     ((<undefinedtype>)var8).L$3 = var10;
                  } catch (Throwable var1828) {
                     var10000 = var1828;
                     var10001 = false;
                     break label15560;
                  }

                  var1890 = var0;

                  try {
                     ((<undefinedtype>)var8).L$4 = var1883;
                  } catch (Throwable var1827) {
                     var10000 = var1827;
                     var10001 = false;
                     break label15560;
                  }

                  var1890 = var0;

                  try {
                     ((<undefinedtype>)var8).L$5 = var0;
                  } catch (Throwable var1826) {
                     var10000 = var1826;
                     var10001 = false;
                     break label15560;
                  }

                  var1890 = var0;

                  try {
                     ((<undefinedtype>)var8).L$6 = var7;
                  } catch (Throwable var1825) {
                     var10000 = var1825;
                     var10001 = false;
                     break label15560;
                  }

                  var1890 = var0;

                  try {
                     ((<undefinedtype>)var8).L$7 = var1880;
                  } catch (Throwable var1824) {
                     var10000 = var1824;
                     var10001 = false;
                     break label15560;
                  }

                  var1890 = var0;

                  try {
                     ((<undefinedtype>)var8).L$8 = var9;
                  } catch (Throwable var1823) {
                     var10000 = var1823;
                     var10001 = false;
                     break label15560;
                  }

                  var1890 = var0;

                  try {
                     ((<undefinedtype>)var8).label = 1;
                  } catch (Throwable var1822) {
                     var10000 = var1822;
                     var10001 = false;
                     break label15560;
                  }

                  var1890 = var0;

                  try {
                     var13 = var9.hasNext((Continuation)var8);
                  } catch (Throwable var1821) {
                     var10000 = var1821;
                     var10001 = false;
                     break label15560;
                  }

                  if (var13 == var1888) {
                     return var1888;
                  }

                  var14 = var6;
                  Object var1895 = var13;
                  ReceiveChannel var1893 = var1883;
                  var1883 = var1880;
                  var1884 = var9;
                  var1881 = var1874;
                  var1877 = var7;
                  var1887 = var14;
                  var1886 = var1893;
                  var13 = var1895;
                  var1890 = var0;

                  label15575: {
                     try {
                        if ((Boolean)var13) {
                           break label15575;
                        }
                     } catch (Throwable var1852) {
                        var10000 = var1852;
                        var10001 = false;
                        break label15560;
                     }

                     var1890 = var0;

                     try {
                        var1878 = Unit.INSTANCE;
                     } catch (Throwable var1853) {
                        var10000 = var1853;
                        var10001 = false;
                        break label15560;
                     }

                     InlineMarker.finallyStart(1);
                     ChannelsKt.cancelConsumed(var0, var1877);
                     InlineMarker.finallyEnd(1);
                     return var1881;
                  }

                  var1890 = var0;

                  try {
                     var1894 = var1884.next();
                  } catch (Throwable var1854) {
                     var10000 = var1854;
                     var10001 = false;
                     break label15560;
                  }

                  var1890 = var0;

                  try {
                     var4 = var10.element;
                  } catch (Throwable var1855) {
                     var10000 = var1855;
                     var10001 = false;
                     break label15560;
                  }

                  var1890 = var0;

                  try {
                     var10.element = var4 + 1;
                  } catch (Throwable var1856) {
                     var10000 = var1856;
                     var10001 = false;
                     break label15560;
                  }

                  var1890 = var0;

                  try {
                     var13 = var1873.invoke(Boxing.boxInt(var4), var1894);
                  } catch (Throwable var1857) {
                     var10000 = var1857;
                     var10001 = false;
                     break label15560;
                  }

                  var1890 = var0;

                  try {
                     ((<undefinedtype>)var8).L$0 = var1887;
                  } catch (Throwable var1858) {
                     var10000 = var1858;
                     var10001 = false;
                     break label15560;
                  }

                  var1890 = var0;

                  try {
                     ((<undefinedtype>)var8).L$1 = var1881;
                  } catch (Throwable var1859) {
                     var10000 = var1859;
                     var10001 = false;
                     break label15560;
                  }

                  var1890 = var0;

                  try {
                     ((<undefinedtype>)var8).L$2 = var1873;
                  } catch (Throwable var1860) {
                     var10000 = var1860;
                     var10001 = false;
                     break label15560;
                  }

                  var1890 = var0;

                  try {
                     ((<undefinedtype>)var8).L$3 = var10;
                  } catch (Throwable var1861) {
                     var10000 = var1861;
                     var10001 = false;
                     break label15560;
                  }

                  var1890 = var0;

                  try {
                     ((<undefinedtype>)var8).L$4 = var1886;
                  } catch (Throwable var1862) {
                     var10000 = var1862;
                     var10001 = false;
                     break label15560;
                  }

                  var1890 = var0;

                  try {
                     ((<undefinedtype>)var8).L$5 = var0;
                  } catch (Throwable var1863) {
                     var10000 = var1863;
                     var10001 = false;
                     break label15560;
                  }

                  var1890 = var0;

                  try {
                     ((<undefinedtype>)var8).L$6 = var1877;
                  } catch (Throwable var1864) {
                     var10000 = var1864;
                     var10001 = false;
                     break label15560;
                  }

                  var1890 = var0;

                  try {
                     ((<undefinedtype>)var8).L$7 = var1883;
                  } catch (Throwable var1865) {
                     var10000 = var1865;
                     var10001 = false;
                     break label15560;
                  }

                  var1890 = var0;

                  try {
                     ((<undefinedtype>)var8).L$8 = var1884;
                  } catch (Throwable var1866) {
                     var10000 = var1866;
                     var10001 = false;
                     break label15560;
                  }

                  var1890 = var0;

                  try {
                     ((<undefinedtype>)var8).L$9 = var1894;
                  } catch (Throwable var1867) {
                     var10000 = var1867;
                     var10001 = false;
                     break label15560;
                  }

                  var1890 = var0;

                  try {
                     ((<undefinedtype>)var8).L$10 = var1894;
                  } catch (Throwable var1868) {
                     var10000 = var1868;
                     var10001 = false;
                     break label15560;
                  }

                  var1890 = var0;

                  try {
                     ((<undefinedtype>)var8).label = 2;
                  } catch (Throwable var1869) {
                     var10000 = var1869;
                     var10001 = false;
                     break label15560;
                  }

                  var1890 = var0;

                  try {
                     if (var1881.send(var13, (Continuation)var8) == var1888) {
                        return var1888;
                     }
                  } catch (Throwable var1870) {
                     var10000 = var1870;
                     var10001 = false;
                     break label15560;
                  }

                  var1890 = var1887;
                  var14 = var1886;
                  var9 = var1884;
                  var15 = var1883;
                  var1891 = var1881;
                  var7 = var1877;
                  var6 = var1890;
                  var1883 = var14;
                  var1880 = var15;
                  var1874 = var1891;
               }
            }

            Throwable var1875 = var10000;
            var1890 = var0;
            var1876 = var1875;
            break label15577;
         }

         var1876 = var10000;
      }

      try {
         throw var1876;
      } finally {
         InlineMarker.finallyStart(1);
         ChannelsKt.cancelConsumed(var1890, var1876);
         InlineMarker.finallyEnd(1);
      }
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   private static final Object mapIndexedTo$$forInline(ReceiveChannel var0, Collection var1, Function2 var2, Continuation var3) {
      Throwable var5 = (Throwable)null;

      label204: {
         Throwable var10000;
         label205: {
            boolean var10001;
            ChannelIterator var29;
            try {
               var29 = var0.iterator();
            } catch (Throwable var26) {
               var10000 = var26;
               var10001 = false;
               break label205;
            }

            int var4 = 0;

            while(true) {
               try {
                  InlineMarker.mark(0);
                  Object var6 = var29.hasNext(var3);
                  InlineMarker.mark(1);
                  if (!(Boolean)var6) {
                     break;
                  }

                  var1.add(var2.invoke(var4, var29.next()));
               } catch (Throwable var25) {
                  var10000 = var25;
                  var10001 = false;
                  break label205;
               }

               ++var4;
            }

            label187:
            try {
               Unit var28 = Unit.INSTANCE;
               break label204;
            } catch (Throwable var24) {
               var10000 = var24;
               var10001 = false;
               break label187;
            }
         }

         Throwable var27 = var10000;

         try {
            throw var27;
         } finally {
            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, var27);
            InlineMarker.finallyEnd(1);
         }
      }

      InlineMarker.finallyStart(1);
      ChannelsKt.cancelConsumed(var0, (Throwable)null);
      InlineMarker.finallyEnd(1);
      return var1;
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   private static final Object mapIndexedTo$$forInline(ReceiveChannel var0, SendChannel var1, Function2 var2, Continuation var3) {
      Throwable var5 = (Throwable)null;

      label204: {
         Throwable var10000;
         label205: {
            boolean var10001;
            ChannelIterator var29;
            try {
               var29 = var0.iterator();
            } catch (Throwable var26) {
               var10000 = var26;
               var10001 = false;
               break label205;
            }

            int var4 = 0;

            while(true) {
               try {
                  InlineMarker.mark(0);
                  Object var6 = var29.hasNext(var3);
                  InlineMarker.mark(1);
                  if (!(Boolean)var6) {
                     break;
                  }

                  var6 = var2.invoke(var4, var29.next());
                  InlineMarker.mark(0);
                  var1.send(var6, var3);
                  InlineMarker.mark(2);
                  InlineMarker.mark(1);
               } catch (Throwable var25) {
                  var10000 = var25;
                  var10001 = false;
                  break label205;
               }

               ++var4;
            }

            label187:
            try {
               Unit var28 = Unit.INSTANCE;
               break label204;
            } catch (Throwable var24) {
               var10000 = var24;
               var10001 = false;
               break label187;
            }
         }

         Throwable var27 = var10000;

         try {
            throw var27;
         } finally {
            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, var27);
            InlineMarker.finallyEnd(1);
         }
      }

      InlineMarker.finallyStart(1);
      ChannelsKt.cancelConsumed(var0, (Throwable)null);
      InlineMarker.finallyEnd(1);
      return var1;
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final ReceiveChannel mapNotNull(ReceiveChannel var0, CoroutineContext var1, Function2 var2) {
      return ChannelsKt.filterNotNull(ChannelsKt.map(var0, var1, var2));
   }

   // $FF: synthetic method
   public static ReceiveChannel mapNotNull$default(ReceiveChannel var0, CoroutineContext var1, Function2 var2, int var3, Object var4) {
      if ((var3 & 1) != 0) {
         var1 = (CoroutineContext)Dispatchers.getUnconfined();
      }

      return ChannelsKt.mapNotNull(var0, var1, var2);
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object mapNotNullTo(ReceiveChannel param0, Collection param1, Function1 param2, Continuation param3) {
      // $FF: Couldn't be decompiled
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object mapNotNullTo(ReceiveChannel var0, SendChannel var1, Function1 var2, Continuation var3) {
      Object var1525;
      label12919: {
         if (var3 instanceof <undefinedtype>) {
            <undefinedtype> var5 = (<undefinedtype>)var3;
            if ((var5.label & Integer.MIN_VALUE) != 0) {
               var5.label += Integer.MIN_VALUE;
               var1525 = var5;
               break label12919;
            }
         }

         var1525 = new ContinuationImpl(var3) {
            Object L$0;
            Object L$1;
            Object L$10;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            Object L$8;
            Object L$9;
            int label;
            Object result;

            public final Object invokeSuspend(Object var1) {
               this.result = var1;
               this.label |= Integer.MIN_VALUE;
               return ChannelsKt.mapNotNullTo((ReceiveChannel)null, (SendChannel)null, (Function1)null, this);
            }
         };
      }

      Throwable var1524;
      ReceiveChannel var1534;
      label12914: {
         Throwable var10000;
         label12930: {
            Throwable var10;
            boolean var10001;
            ReceiveChannel var1520;
            SendChannel var1528;
            label12911: {
               label12910: {
                  Object var13 = ((<undefinedtype>)var1525).result;
                  Object var1527 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                  int var4 = ((<undefinedtype>)var1525).label;
                  ReceiveChannel var6;
                  ReceiveChannel var7;
                  ChannelIterator var8;
                  ReceiveChannel var9;
                  Object var12;
                  Object var1519;
                  Function1 var1521;
                  Object var1523;
                  SendChannel var1526;
                  Object var1531;
                  if (var4 != 0) {
                     SendChannel var11;
                     if (var4 != 1) {
                        if (var4 != 2) {
                           throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }

                        var1519 = ((<undefinedtype>)var1525).L$10;
                        var1519 = ((<undefinedtype>)var1525).L$9;
                        var1519 = ((<undefinedtype>)var1525).L$8;
                        var8 = (ChannelIterator)((<undefinedtype>)var1525).L$7;
                        var9 = (ReceiveChannel)((<undefinedtype>)var1525).L$6;
                        var10 = (Throwable)((<undefinedtype>)var1525).L$5;
                        var1520 = (ReceiveChannel)((<undefinedtype>)var1525).L$4;
                        var7 = (ReceiveChannel)((<undefinedtype>)var1525).L$3;
                        var2 = (Function1)((<undefinedtype>)var1525).L$2;
                        var11 = (SendChannel)((<undefinedtype>)var1525).L$1;
                        var6 = (ReceiveChannel)((<undefinedtype>)var1525).L$0;
                        var0 = var1520;

                        try {
                           ResultKt.throwOnFailure(var13);
                        } catch (Throwable var1502) {
                           var10000 = var1502;
                           var10001 = false;
                           break label12910;
                        }

                        var1519 = var1527;
                        var1528 = var11;
                        var1534 = var9;
                        var1531 = var1525;
                        var1526 = var1528;
                        var12 = var1519;
                        var1521 = var2;
                        var1527 = var1531;
                        var1523 = var12;
                        var9 = var6;
                        var6 = var7;
                        var7 = var1534;
                     } else {
                        var8 = (ChannelIterator)((<undefinedtype>)var1525).L$7;
                        var9 = (ReceiveChannel)((<undefinedtype>)var1525).L$6;
                        var10 = (Throwable)((<undefinedtype>)var1525).L$5;
                        var1520 = (ReceiveChannel)((<undefinedtype>)var1525).L$4;
                        var7 = (ReceiveChannel)((<undefinedtype>)var1525).L$3;
                        var2 = (Function1)((<undefinedtype>)var1525).L$2;
                        var11 = (SendChannel)((<undefinedtype>)var1525).L$1;
                        var6 = (ReceiveChannel)((<undefinedtype>)var1525).L$0;
                        var0 = var1520;

                        try {
                           ResultKt.throwOnFailure(var13);
                        } catch (Throwable var1501) {
                           var10000 = var1501;
                           var10001 = false;
                           break label12910;
                        }

                        var1519 = var1527;
                        var1528 = var11;
                        var1534 = var1520;

                        try {
                           if (!(Boolean)var13) {
                              break label12911;
                           }
                        } catch (Throwable var1500) {
                           var10000 = var1500;
                           var10001 = false;
                           break label12930;
                        }

                        var1534 = var1520;

                        try {
                           var12 = var8.next();
                        } catch (Throwable var1499) {
                           var10000 = var1499;
                           var10001 = false;
                           break label12930;
                        }

                        var1534 = var1520;

                        try {
                           var13 = var2.invoke(var12);
                        } catch (Throwable var1498) {
                           var10000 = var1498;
                           var10001 = false;
                           break label12930;
                        }

                        if (var13 != null) {
                           var1534 = var1520;

                           try {
                              ((<undefinedtype>)var1525).L$0 = var6;
                           } catch (Throwable var1497) {
                              var10000 = var1497;
                              var10001 = false;
                              break label12930;
                           }

                           var1534 = var1520;

                           try {
                              ((<undefinedtype>)var1525).L$1 = var1528;
                           } catch (Throwable var1496) {
                              var10000 = var1496;
                              var10001 = false;
                              break label12930;
                           }

                           var1534 = var1520;

                           try {
                              ((<undefinedtype>)var1525).L$2 = var2;
                           } catch (Throwable var1495) {
                              var10000 = var1495;
                              var10001 = false;
                              break label12930;
                           }

                           var1534 = var1520;

                           try {
                              ((<undefinedtype>)var1525).L$3 = var7;
                           } catch (Throwable var1494) {
                              var10000 = var1494;
                              var10001 = false;
                              break label12930;
                           }

                           var1534 = var1520;

                           try {
                              ((<undefinedtype>)var1525).L$4 = var1520;
                           } catch (Throwable var1493) {
                              var10000 = var1493;
                              var10001 = false;
                              break label12930;
                           }

                           var1534 = var1520;

                           try {
                              ((<undefinedtype>)var1525).L$5 = var10;
                           } catch (Throwable var1492) {
                              var10000 = var1492;
                              var10001 = false;
                              break label12930;
                           }

                           var1534 = var1520;

                           try {
                              ((<undefinedtype>)var1525).L$6 = var9;
                           } catch (Throwable var1491) {
                              var10000 = var1491;
                              var10001 = false;
                              break label12930;
                           }

                           var1534 = var1520;

                           try {
                              ((<undefinedtype>)var1525).L$7 = var8;
                           } catch (Throwable var1490) {
                              var10000 = var1490;
                              var10001 = false;
                              break label12930;
                           }

                           var1534 = var1520;

                           try {
                              ((<undefinedtype>)var1525).L$8 = var12;
                           } catch (Throwable var1489) {
                              var10000 = var1489;
                              var10001 = false;
                              break label12930;
                           }

                           var1534 = var1520;

                           try {
                              ((<undefinedtype>)var1525).L$9 = var12;
                           } catch (Throwable var1488) {
                              var10000 = var1488;
                              var10001 = false;
                              break label12930;
                           }

                           var1534 = var1520;

                           try {
                              ((<undefinedtype>)var1525).L$10 = var13;
                           } catch (Throwable var1487) {
                              var10000 = var1487;
                              var10001 = false;
                              break label12930;
                           }

                           var1534 = var1520;

                           try {
                              ((<undefinedtype>)var1525).label = 2;
                           } catch (Throwable var1486) {
                              var10000 = var1486;
                              var10001 = false;
                              break label12930;
                           }

                           var1534 = var1520;

                           try {
                              if (var1528.send(var13, (Continuation)var1525) == var1519) {
                                 return var1519;
                              }
                           } catch (Throwable var1485) {
                              var10000 = var1485;
                              var10001 = false;
                              break label12930;
                           }

                           var1534 = var9;
                           var1531 = var1525;
                           var1526 = var1528;
                           var12 = var1519;
                           var1521 = var2;
                           var1527 = var1531;
                           var1523 = var12;
                           var9 = var6;
                           var6 = var7;
                           var7 = var1534;
                        } else {
                           var1534 = var9;
                           var1531 = var1525;
                           var1526 = var1528;
                           var12 = var1519;
                           var1521 = var2;
                           var1527 = var1531;
                           var1523 = var12;
                           var9 = var6;
                           var6 = var7;
                           var7 = var1534;
                        }
                     }
                  } else {
                     ResultKt.throwOnFailure(var13);
                     Throwable var1530 = (Throwable)null;

                     try {
                        var8 = var0.iterator();
                     } catch (Throwable var1474) {
                        var1534 = var0;
                        var1524 = var1474;
                        break label12914;
                     }

                     Object var1533 = var1525;
                     var1526 = var1;
                     Function1 var1536 = var2;
                     var12 = null;
                     var6 = var0;
                     var1520 = var0;
                     var7 = var0;
                     var9 = var0;
                     var1523 = var1527;
                     var1527 = var1533;
                     var10 = (Throwable)var12;
                     var1521 = var1536;
                  }

                  while(true) {
                     var1534 = var1520;

                     try {
                        ((<undefinedtype>)var1527).L$0 = var9;
                     } catch (Throwable var1484) {
                        var10000 = var1484;
                        var10001 = false;
                        break label12930;
                     }

                     var1534 = var1520;

                     try {
                        ((<undefinedtype>)var1527).L$1 = var1526;
                     } catch (Throwable var1483) {
                        var10000 = var1483;
                        var10001 = false;
                        break label12930;
                     }

                     var1534 = var1520;

                     try {
                        ((<undefinedtype>)var1527).L$2 = var1521;
                     } catch (Throwable var1482) {
                        var10000 = var1482;
                        var10001 = false;
                        break label12930;
                     }

                     var1534 = var1520;

                     try {
                        ((<undefinedtype>)var1527).L$3 = var6;
                     } catch (Throwable var1481) {
                        var10000 = var1481;
                        var10001 = false;
                        break label12930;
                     }

                     var1534 = var1520;

                     try {
                        ((<undefinedtype>)var1527).L$4 = var1520;
                     } catch (Throwable var1480) {
                        var10000 = var1480;
                        var10001 = false;
                        break label12930;
                     }

                     var1534 = var1520;

                     try {
                        ((<undefinedtype>)var1527).L$5 = var10;
                     } catch (Throwable var1479) {
                        var10000 = var1479;
                        var10001 = false;
                        break label12930;
                     }

                     var1534 = var1520;

                     try {
                        ((<undefinedtype>)var1527).L$6 = var7;
                     } catch (Throwable var1478) {
                        var10000 = var1478;
                        var10001 = false;
                        break label12930;
                     }

                     var1534 = var1520;

                     try {
                        ((<undefinedtype>)var1527).L$7 = var8;
                     } catch (Throwable var1477) {
                        var10000 = var1477;
                        var10001 = false;
                        break label12930;
                     }

                     var1534 = var1520;

                     try {
                        ((<undefinedtype>)var1527).label = 1;
                     } catch (Throwable var1476) {
                        var10000 = var1476;
                        var10001 = false;
                        break label12930;
                     }

                     var1534 = var1520;

                     try {
                        var13 = var8.hasNext((Continuation)var1527);
                     } catch (Throwable var1475) {
                        var10000 = var1475;
                        var10001 = false;
                        break label12930;
                     }

                     if (var13 == var1523) {
                        return var1523;
                     }

                     var1534 = var9;
                     SendChannel var14 = var1526;
                     var1525 = var1527;
                     ReceiveChannel var1535 = var6;
                     var9 = var7;
                     Function1 var1532 = var1521;
                     var1519 = var1523;
                     var6 = var1534;
                     var1528 = var14;
                     var2 = var1532;
                     var7 = var1535;
                     var1534 = var1520;

                     try {
                        if (!(Boolean)var13) {
                           break label12911;
                        }
                     } catch (Throwable var1503) {
                        var10000 = var1503;
                        var10001 = false;
                        break label12930;
                     }

                     var1534 = var1520;

                     try {
                        var12 = var8.next();
                     } catch (Throwable var1504) {
                        var10000 = var1504;
                        var10001 = false;
                        break label12930;
                     }

                     var1534 = var1520;

                     try {
                        var13 = var2.invoke(var12);
                     } catch (Throwable var1505) {
                        var10000 = var1505;
                        var10001 = false;
                        break label12930;
                     }

                     if (var13 != null) {
                        var1534 = var1520;

                        try {
                           ((<undefinedtype>)var1525).L$0 = var6;
                        } catch (Throwable var1506) {
                           var10000 = var1506;
                           var10001 = false;
                           break label12930;
                        }

                        var1534 = var1520;

                        try {
                           ((<undefinedtype>)var1525).L$1 = var1528;
                        } catch (Throwable var1507) {
                           var10000 = var1507;
                           var10001 = false;
                           break label12930;
                        }

                        var1534 = var1520;

                        try {
                           ((<undefinedtype>)var1525).L$2 = var2;
                        } catch (Throwable var1508) {
                           var10000 = var1508;
                           var10001 = false;
                           break label12930;
                        }

                        var1534 = var1520;

                        try {
                           ((<undefinedtype>)var1525).L$3 = var7;
                        } catch (Throwable var1509) {
                           var10000 = var1509;
                           var10001 = false;
                           break label12930;
                        }

                        var1534 = var1520;

                        try {
                           ((<undefinedtype>)var1525).L$4 = var1520;
                        } catch (Throwable var1510) {
                           var10000 = var1510;
                           var10001 = false;
                           break label12930;
                        }

                        var1534 = var1520;

                        try {
                           ((<undefinedtype>)var1525).L$5 = var10;
                        } catch (Throwable var1511) {
                           var10000 = var1511;
                           var10001 = false;
                           break label12930;
                        }

                        var1534 = var1520;

                        try {
                           ((<undefinedtype>)var1525).L$6 = var9;
                        } catch (Throwable var1512) {
                           var10000 = var1512;
                           var10001 = false;
                           break label12930;
                        }

                        var1534 = var1520;

                        try {
                           ((<undefinedtype>)var1525).L$7 = var8;
                        } catch (Throwable var1513) {
                           var10000 = var1513;
                           var10001 = false;
                           break label12930;
                        }

                        var1534 = var1520;

                        try {
                           ((<undefinedtype>)var1525).L$8 = var12;
                        } catch (Throwable var1514) {
                           var10000 = var1514;
                           var10001 = false;
                           break label12930;
                        }

                        var1534 = var1520;

                        try {
                           ((<undefinedtype>)var1525).L$9 = var12;
                        } catch (Throwable var1515) {
                           var10000 = var1515;
                           var10001 = false;
                           break label12930;
                        }

                        var1534 = var1520;

                        try {
                           ((<undefinedtype>)var1525).L$10 = var13;
                        } catch (Throwable var1516) {
                           var10000 = var1516;
                           var10001 = false;
                           break label12930;
                        }

                        var1534 = var1520;

                        try {
                           ((<undefinedtype>)var1525).label = 2;
                        } catch (Throwable var1517) {
                           var10000 = var1517;
                           var10001 = false;
                           break label12930;
                        }

                        var1534 = var1520;

                        try {
                           if (var1528.send(var13, (Continuation)var1525) == var1519) {
                              return var1519;
                           }
                        } catch (Throwable var1518) {
                           var10000 = var1518;
                           var10001 = false;
                           break label12930;
                        }

                        var1534 = var9;
                        var1531 = var1525;
                        var1526 = var14;
                        var12 = var1519;
                        var1521 = var2;
                        var1527 = var1531;
                        var1523 = var12;
                        var9 = var6;
                        var6 = var7;
                        var7 = var1534;
                     } else {
                        var1534 = var9;
                        var1531 = var1525;
                        var1526 = var14;
                        var12 = var1519;
                        var1521 = var2;
                        var1527 = var1531;
                        var1523 = var12;
                        var9 = var6;
                        var6 = var7;
                        var7 = var1534;
                     }
                  }
               }

               Throwable var1522 = var10000;
               var1534 = var0;
               var1524 = var1522;
               break label12914;
            }

            var1534 = var1520;

            try {
               Unit var1529 = Unit.INSTANCE;
            } catch (Throwable var1473) {
               var10000 = var1473;
               var10001 = false;
               break label12930;
            }

            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var1520, var10);
            InlineMarker.finallyEnd(1);
            return var1528;
         }

         var1524 = var10000;
      }

      try {
         throw var1524;
      } finally {
         InlineMarker.finallyStart(1);
         ChannelsKt.cancelConsumed(var1534, var1524);
         InlineMarker.finallyEnd(1);
      }
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   private static final Object mapNotNullTo$$forInline(ReceiveChannel var0, Collection var1, Function1 var2, Continuation var3) {
      Throwable var4 = (Throwable)null;

      label259: {
         Throwable var10000;
         label260: {
            ChannelIterator var38;
            boolean var10001;
            try {
               var38 = var0.iterator();
            } catch (Throwable var34) {
               var10000 = var34;
               var10001 = false;
               break label260;
            }

            while(true) {
               Object var5;
               try {
                  InlineMarker.mark(0);
                  var5 = var38.hasNext(var3);
                  InlineMarker.mark(1);
                  if (!(Boolean)var5) {
                     break;
                  }

                  var5 = var2.invoke(var38.next());
               } catch (Throwable var35) {
                  var10000 = var35;
                  var10001 = false;
                  break label260;
               }

               if (var5 != null) {
                  try {
                     var1.add(var5);
                  } catch (Throwable var33) {
                     var10000 = var33;
                     var10001 = false;
                     break label260;
                  }
               }
            }

            label241:
            try {
               Unit var37 = Unit.INSTANCE;
               break label259;
            } catch (Throwable var32) {
               var10000 = var32;
               var10001 = false;
               break label241;
            }
         }

         Throwable var36 = var10000;

         try {
            throw var36;
         } finally {
            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, var36);
            InlineMarker.finallyEnd(1);
         }
      }

      InlineMarker.finallyStart(1);
      ChannelsKt.cancelConsumed(var0, (Throwable)null);
      InlineMarker.finallyEnd(1);
      return var1;
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   private static final Object mapNotNullTo$$forInline(ReceiveChannel var0, SendChannel var1, Function1 var2, Continuation var3) {
      Throwable var4 = (Throwable)null;

      label259: {
         Throwable var10000;
         label260: {
            ChannelIterator var38;
            boolean var10001;
            try {
               var38 = var0.iterator();
            } catch (Throwable var34) {
               var10000 = var34;
               var10001 = false;
               break label260;
            }

            while(true) {
               Object var5;
               try {
                  InlineMarker.mark(0);
                  var5 = var38.hasNext(var3);
                  InlineMarker.mark(1);
                  if (!(Boolean)var5) {
                     break;
                  }

                  var5 = var2.invoke(var38.next());
               } catch (Throwable var35) {
                  var10000 = var35;
                  var10001 = false;
                  break label260;
               }

               if (var5 != null) {
                  try {
                     InlineMarker.mark(0);
                     var1.send(var5, var3);
                     InlineMarker.mark(2);
                     InlineMarker.mark(1);
                  } catch (Throwable var33) {
                     var10000 = var33;
                     var10001 = false;
                     break label260;
                  }
               }
            }

            label241:
            try {
               Unit var37 = Unit.INSTANCE;
               break label259;
            } catch (Throwable var32) {
               var10000 = var32;
               var10001 = false;
               break label241;
            }
         }

         Throwable var36 = var10000;

         try {
            throw var36;
         } finally {
            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, var36);
            InlineMarker.finallyEnd(1);
         }
      }

      InlineMarker.finallyStart(1);
      ChannelsKt.cancelConsumed(var0, (Throwable)null);
      InlineMarker.finallyEnd(1);
      return var1;
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object mapTo(ReceiveChannel param0, Collection param1, Function1 param2, Continuation param3) {
      // $FF: Couldn't be decompiled
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object mapTo(ReceiveChannel var0, SendChannel var1, Function1 var2, Continuation var3) {
      Object var1450;
      label12206: {
         if (var3 instanceof <undefinedtype>) {
            <undefinedtype> var5 = (<undefinedtype>)var3;
            if ((var5.label & Integer.MIN_VALUE) != 0) {
               var5.label += Integer.MIN_VALUE;
               var1450 = var5;
               break label12206;
            }
         }

         var1450 = new ContinuationImpl(var3) {
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            Object L$8;
            Object L$9;
            int label;
            Object result;

            public final Object invokeSuspend(Object var1) {
               this.result = var1;
               this.label |= Integer.MIN_VALUE;
               return ChannelsKt.mapTo((ReceiveChannel)null, (SendChannel)null, (Function1)null, this);
            }
         };
      }

      Throwable var1446;
      ReceiveChannel var1462;
      label12200: {
         Throwable var10000;
         label12199: {
            label12198: {
               Object var13 = ((<undefinedtype>)var1450).result;
               Object var1453 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
               int var4 = ((<undefinedtype>)var1450).label;
               ReceiveChannel var6;
               ChannelIterator var7;
               ReceiveChannel var8;
               ReceiveChannel var9;
               Throwable var10;
               Function1 var12;
               boolean var10001;
               Function1 var1443;
               Object var1444;
               ReceiveChannel var1445;
               ReceiveChannel var1447;
               Unit var1449;
               SendChannel var1451;
               ChannelIterator var1452;
               SendChannel var1454;
               Object var1458;
               Object var1463;
               SendChannel var1464;
               if (var4 != 0) {
                  if (var4 != 1) {
                     if (var4 != 2) {
                        throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                     }

                     Object var1442 = ((<undefinedtype>)var1450).L$9;
                     var1442 = ((<undefinedtype>)var1450).L$8;
                     var7 = (ChannelIterator)((<undefinedtype>)var1450).L$7;
                     var8 = (ReceiveChannel)((<undefinedtype>)var1450).L$6;
                     var10 = (Throwable)((<undefinedtype>)var1450).L$5;
                     var1447 = (ReceiveChannel)((<undefinedtype>)var1450).L$4;
                     var6 = (ReceiveChannel)((<undefinedtype>)var1450).L$3;
                     var12 = (Function1)((<undefinedtype>)var1450).L$2;
                     SendChannel var11 = (SendChannel)((<undefinedtype>)var1450).L$1;
                     var9 = (ReceiveChannel)((<undefinedtype>)var1450).L$0;
                     var0 = var1447;

                     try {
                        ResultKt.throwOnFailure(var13);
                     } catch (Throwable var1424) {
                        var10000 = var1424;
                        var10001 = false;
                        break label12198;
                     }

                     var1444 = var1450;
                     var1451 = var11;
                     Object var1460 = var1453;
                     var1443 = var12;
                     var1453 = var1444;
                     var1444 = var1460;
                  } else {
                     label12210: {
                        ChannelIterator var1461 = (ChannelIterator)((<undefinedtype>)var1450).L$7;
                        var9 = (ReceiveChannel)((<undefinedtype>)var1450).L$6;
                        var10 = (Throwable)((<undefinedtype>)var1450).L$5;
                        var1447 = (ReceiveChannel)((<undefinedtype>)var1450).L$4;
                        var8 = (ReceiveChannel)((<undefinedtype>)var1450).L$3;
                        var12 = (Function1)((<undefinedtype>)var1450).L$2;
                        var1454 = (SendChannel)((<undefinedtype>)var1450).L$1;
                        var1445 = (ReceiveChannel)((<undefinedtype>)var1450).L$0;
                        var0 = var1447;

                        try {
                           ResultKt.throwOnFailure(var13);
                        } catch (Throwable var1425) {
                           var10000 = var1425;
                           var10001 = false;
                           break label12198;
                        }

                        var1458 = var1450;
                        var1443 = var12;
                        var1452 = var1461;
                        var1462 = var1447;

                        label12211: {
                           try {
                              if (!(Boolean)var13) {
                                 break label12211;
                              }
                           } catch (Throwable var1423) {
                              var10000 = var1423;
                              var10001 = false;
                              break label12199;
                           }

                           var1462 = var1447;

                           try {
                              var1463 = var1452.next();
                           } catch (Throwable var1421) {
                              var10000 = var1421;
                              var10001 = false;
                              break label12199;
                           }

                           var1462 = var1447;

                           try {
                              var13 = var1443.invoke(var1463);
                           } catch (Throwable var1420) {
                              var10000 = var1420;
                              var10001 = false;
                              break label12199;
                           }

                           var1462 = var1447;

                           try {
                              ((<undefinedtype>)var1458).L$0 = var1445;
                           } catch (Throwable var1419) {
                              var10000 = var1419;
                              var10001 = false;
                              break label12199;
                           }

                           var1462 = var1447;

                           try {
                              ((<undefinedtype>)var1458).L$1 = var1454;
                           } catch (Throwable var1418) {
                              var10000 = var1418;
                              var10001 = false;
                              break label12199;
                           }

                           var1462 = var1447;

                           try {
                              ((<undefinedtype>)var1458).L$2 = var1443;
                           } catch (Throwable var1417) {
                              var10000 = var1417;
                              var10001 = false;
                              break label12199;
                           }

                           var1462 = var1447;

                           try {
                              ((<undefinedtype>)var1458).L$3 = var8;
                           } catch (Throwable var1416) {
                              var10000 = var1416;
                              var10001 = false;
                              break label12199;
                           }

                           var1462 = var1447;

                           try {
                              ((<undefinedtype>)var1458).L$4 = var1447;
                           } catch (Throwable var1415) {
                              var10000 = var1415;
                              var10001 = false;
                              break label12199;
                           }

                           var1462 = var1447;

                           try {
                              ((<undefinedtype>)var1458).L$5 = var10;
                           } catch (Throwable var1414) {
                              var10000 = var1414;
                              var10001 = false;
                              break label12199;
                           }

                           var1462 = var1447;

                           try {
                              ((<undefinedtype>)var1458).L$6 = var9;
                           } catch (Throwable var1413) {
                              var10000 = var1413;
                              var10001 = false;
                              break label12199;
                           }

                           var1462 = var1447;

                           try {
                              ((<undefinedtype>)var1458).L$7 = var1452;
                           } catch (Throwable var1412) {
                              var10000 = var1412;
                              var10001 = false;
                              break label12199;
                           }

                           var1462 = var1447;

                           try {
                              ((<undefinedtype>)var1458).L$8 = var1463;
                           } catch (Throwable var1411) {
                              var10000 = var1411;
                              var10001 = false;
                              break label12199;
                           }

                           var1462 = var1447;

                           try {
                              ((<undefinedtype>)var1458).L$9 = var1463;
                           } catch (Throwable var1410) {
                              var10000 = var1410;
                              var10001 = false;
                              break label12199;
                           }

                           var1462 = var1447;

                           try {
                              ((<undefinedtype>)var1458).label = 2;
                           } catch (Throwable var1409) {
                              var10000 = var1409;
                              var10001 = false;
                              break label12199;
                           }

                           var1462 = var1447;

                           try {
                              if (var1454.send(var13, (Continuation)var1458) == var1453) {
                                 return var1453;
                              }
                           } catch (Throwable var1422) {
                              var10000 = var1422;
                              var10001 = false;
                              break label12199;
                           }

                           var1462 = var9;
                           var1464 = var1454;
                           ChannelIterator var1455 = var1452;
                           var9 = var1445;
                           var1444 = var1453;
                           var1451 = var1464;
                           var1453 = var1458;
                           var7 = var1455;
                           var6 = var8;
                           var8 = var1462;
                           break label12210;
                        }

                        var1462 = var1447;

                        try {
                           var1449 = Unit.INSTANCE;
                        } catch (Throwable var1397) {
                           var10000 = var1397;
                           var10001 = false;
                           break label12199;
                        }

                        InlineMarker.finallyStart(1);
                        ChannelsKt.cancelConsumed(var1447, var10);
                        InlineMarker.finallyEnd(1);
                        return var1454;
                     }
                  }
               } else {
                  ResultKt.throwOnFailure(var13);
                  Throwable var1457 = (Throwable)null;

                  try {
                     var7 = var0.iterator();
                  } catch (Throwable var1398) {
                     var1462 = var0;
                     var1446 = var1398;
                     break label12200;
                  }

                  Object var1459 = var1450;
                  var1451 = var1;
                  Function1 var1465 = var2;
                  var12 = null;
                  var6 = var0;
                  var1447 = var0;
                  var8 = var0;
                  var9 = var0;
                  var1444 = var1453;
                  var1453 = var1459;
                  var10 = var12;
                  var1443 = var1465;
               }

               while(true) {
                  var1462 = var1447;

                  try {
                     ((<undefinedtype>)var1453).L$0 = var9;
                  } catch (Throwable var1408) {
                     var10000 = var1408;
                     var10001 = false;
                     break label12199;
                  }

                  var1462 = var1447;

                  try {
                     ((<undefinedtype>)var1453).L$1 = var1451;
                  } catch (Throwable var1407) {
                     var10000 = var1407;
                     var10001 = false;
                     break label12199;
                  }

                  var1462 = var1447;

                  try {
                     ((<undefinedtype>)var1453).L$2 = var1443;
                  } catch (Throwable var1406) {
                     var10000 = var1406;
                     var10001 = false;
                     break label12199;
                  }

                  var1462 = var1447;

                  try {
                     ((<undefinedtype>)var1453).L$3 = var6;
                  } catch (Throwable var1405) {
                     var10000 = var1405;
                     var10001 = false;
                     break label12199;
                  }

                  var1462 = var1447;

                  try {
                     ((<undefinedtype>)var1453).L$4 = var1447;
                  } catch (Throwable var1404) {
                     var10000 = var1404;
                     var10001 = false;
                     break label12199;
                  }

                  var1462 = var1447;

                  try {
                     ((<undefinedtype>)var1453).L$5 = var10;
                  } catch (Throwable var1403) {
                     var10000 = var1403;
                     var10001 = false;
                     break label12199;
                  }

                  var1462 = var1447;

                  try {
                     ((<undefinedtype>)var1453).L$6 = var8;
                  } catch (Throwable var1402) {
                     var10000 = var1402;
                     var10001 = false;
                     break label12199;
                  }

                  var1462 = var1447;

                  try {
                     ((<undefinedtype>)var1453).L$7 = var7;
                  } catch (Throwable var1401) {
                     var10000 = var1401;
                     var10001 = false;
                     break label12199;
                  }

                  var1462 = var1447;

                  try {
                     ((<undefinedtype>)var1453).label = 1;
                  } catch (Throwable var1400) {
                     var10000 = var1400;
                     var10001 = false;
                     break label12199;
                  }

                  var1462 = var1447;

                  try {
                     var13 = var7.hasNext((Continuation)var1453);
                  } catch (Throwable var1399) {
                     var10000 = var1399;
                     var10001 = false;
                     break label12199;
                  }

                  if (var13 == var1444) {
                     return var1444;
                  }

                  var1462 = var9;
                  ChannelIterator var14 = var7;
                  var1464 = var1451;
                  var1458 = var1453;
                  ReceiveChannel var1456 = var6;
                  Object var15 = var1444;
                  var9 = var8;
                  var1452 = var14;
                  var1445 = var1462;
                  var1454 = var1464;
                  var8 = var1456;
                  var1453 = var15;
                  var1462 = var1447;

                  label12214: {
                     try {
                        if (!(Boolean)var13) {
                           break label12214;
                        }
                     } catch (Throwable var1426) {
                        var10000 = var1426;
                        var10001 = false;
                        break label12199;
                     }

                     var1462 = var1447;

                     try {
                        var1463 = var1452.next();
                     } catch (Throwable var1427) {
                        var10000 = var1427;
                        var10001 = false;
                        break label12199;
                     }

                     var1462 = var1447;

                     try {
                        var13 = var1443.invoke(var1463);
                     } catch (Throwable var1428) {
                        var10000 = var1428;
                        var10001 = false;
                        break label12199;
                     }

                     var1462 = var1447;

                     try {
                        ((<undefinedtype>)var1458).L$0 = var1445;
                     } catch (Throwable var1429) {
                        var10000 = var1429;
                        var10001 = false;
                        break label12199;
                     }

                     var1462 = var1447;

                     try {
                        ((<undefinedtype>)var1458).L$1 = var1454;
                     } catch (Throwable var1430) {
                        var10000 = var1430;
                        var10001 = false;
                        break label12199;
                     }

                     var1462 = var1447;

                     try {
                        ((<undefinedtype>)var1458).L$2 = var1443;
                     } catch (Throwable var1431) {
                        var10000 = var1431;
                        var10001 = false;
                        break label12199;
                     }

                     var1462 = var1447;

                     try {
                        ((<undefinedtype>)var1458).L$3 = var8;
                     } catch (Throwable var1432) {
                        var10000 = var1432;
                        var10001 = false;
                        break label12199;
                     }

                     var1462 = var1447;

                     try {
                        ((<undefinedtype>)var1458).L$4 = var1447;
                     } catch (Throwable var1433) {
                        var10000 = var1433;
                        var10001 = false;
                        break label12199;
                     }

                     var1462 = var1447;

                     try {
                        ((<undefinedtype>)var1458).L$5 = var10;
                     } catch (Throwable var1434) {
                        var10000 = var1434;
                        var10001 = false;
                        break label12199;
                     }

                     var1462 = var1447;

                     try {
                        ((<undefinedtype>)var1458).L$6 = var9;
                     } catch (Throwable var1435) {
                        var10000 = var1435;
                        var10001 = false;
                        break label12199;
                     }

                     var1462 = var1447;

                     try {
                        ((<undefinedtype>)var1458).L$7 = var1452;
                     } catch (Throwable var1436) {
                        var10000 = var1436;
                        var10001 = false;
                        break label12199;
                     }

                     var1462 = var1447;

                     try {
                        ((<undefinedtype>)var1458).L$8 = var1463;
                     } catch (Throwable var1437) {
                        var10000 = var1437;
                        var10001 = false;
                        break label12199;
                     }

                     var1462 = var1447;

                     try {
                        ((<undefinedtype>)var1458).L$9 = var1463;
                     } catch (Throwable var1438) {
                        var10000 = var1438;
                        var10001 = false;
                        break label12199;
                     }

                     var1462 = var1447;

                     try {
                        ((<undefinedtype>)var1458).label = 2;
                     } catch (Throwable var1439) {
                        var10000 = var1439;
                        var10001 = false;
                        break label12199;
                     }

                     var1462 = var1447;

                     try {
                        if (var1454.send(var13, (Continuation)var1458) == var1453) {
                           return var1453;
                        }
                     } catch (Throwable var1440) {
                        var10000 = var1440;
                        var10001 = false;
                        break label12199;
                     }

                     var1462 = var9;
                     var9 = var1445;
                     var1444 = var15;
                     var1451 = var1454;
                     var1453 = var1458;
                     var7 = var14;
                     var6 = var8;
                     var8 = var1462;
                     continue;
                  }

                  var1462 = var1447;

                  try {
                     var1449 = Unit.INSTANCE;
                  } catch (Throwable var1441) {
                     var10000 = var1441;
                     var10001 = false;
                     break label12199;
                  }

                  InlineMarker.finallyStart(1);
                  ChannelsKt.cancelConsumed(var1447, var10);
                  InlineMarker.finallyEnd(1);
                  return var1464;
               }
            }

            Throwable var1448 = var10000;
            var1462 = var0;
            var1446 = var1448;
            break label12200;
         }

         var1446 = var10000;
      }

      try {
         throw var1446;
      } finally {
         InlineMarker.finallyStart(1);
         ChannelsKt.cancelConsumed(var1462, var1446);
         InlineMarker.finallyEnd(1);
      }
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   private static final Object mapTo$$forInline(ReceiveChannel var0, Collection var1, Function1 var2, Continuation var3) {
      Throwable var4 = (Throwable)null;

      label194: {
         Throwable var10000;
         label195: {
            ChannelIterator var5;
            boolean var10001;
            try {
               var5 = var0.iterator();
            } catch (Throwable var24) {
               var10000 = var24;
               var10001 = false;
               break label195;
            }

            while(true) {
               try {
                  InlineMarker.mark(0);
                  Object var28 = var5.hasNext(var3);
                  InlineMarker.mark(1);
                  if (!(Boolean)var28) {
                     break;
                  }

                  var1.add(var2.invoke(var5.next()));
               } catch (Throwable var25) {
                  var10000 = var25;
                  var10001 = false;
                  break label195;
               }
            }

            label178:
            try {
               Unit var27 = Unit.INSTANCE;
               break label194;
            } catch (Throwable var23) {
               var10000 = var23;
               var10001 = false;
               break label178;
            }
         }

         Throwable var26 = var10000;

         try {
            throw var26;
         } finally {
            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, var26);
            InlineMarker.finallyEnd(1);
         }
      }

      InlineMarker.finallyStart(1);
      ChannelsKt.cancelConsumed(var0, (Throwable)null);
      InlineMarker.finallyEnd(1);
      return var1;
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   private static final Object mapTo$$forInline(ReceiveChannel var0, SendChannel var1, Function1 var2, Continuation var3) {
      Throwable var4 = (Throwable)null;

      label194: {
         Throwable var10000;
         label195: {
            boolean var10001;
            ChannelIterator var28;
            try {
               var28 = var0.iterator();
            } catch (Throwable var24) {
               var10000 = var24;
               var10001 = false;
               break label195;
            }

            while(true) {
               try {
                  InlineMarker.mark(0);
                  Object var5 = var28.hasNext(var3);
                  InlineMarker.mark(1);
                  if (!(Boolean)var5) {
                     break;
                  }

                  var5 = var2.invoke(var28.next());
                  InlineMarker.mark(0);
                  var1.send(var5, var3);
                  InlineMarker.mark(2);
                  InlineMarker.mark(1);
               } catch (Throwable var25) {
                  var10000 = var25;
                  var10001 = false;
                  break label195;
               }
            }

            label178:
            try {
               Unit var27 = Unit.INSTANCE;
               break label194;
            } catch (Throwable var23) {
               var10000 = var23;
               var10001 = false;
               break label178;
            }
         }

         Throwable var26 = var10000;

         try {
            throw var26;
         } finally {
            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, var26);
            InlineMarker.finallyEnd(1);
         }
      }

      InlineMarker.finallyStart(1);
      ChannelsKt.cancelConsumed(var0, (Throwable)null);
      InlineMarker.finallyEnd(1);
      return var1;
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object maxBy(ReceiveChannel var0, Function1 var1, Continuation var2) {
      Object var5;
      ReceiveChannel var6;
      label8930: {
         var6 = var0;
         if (var2 instanceof <undefinedtype>) {
            var5 = (<undefinedtype>)var2;
            if ((((<undefinedtype>)var5).label & Integer.MIN_VALUE) != 0) {
               ((<undefinedtype>)var5).label += Integer.MIN_VALUE;
               break label8930;
            }
         }

         var5 = new ContinuationImpl(var2) {
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            int label;
            Object result;

            public final Object invokeSuspend(Object var1) {
               this.result = var1;
               this.label |= Integer.MIN_VALUE;
               return ChannelsKt.maxBy((ReceiveChannel)null, (Function1)null, this);
            }
         };
      }

      Throwable var1047;
      ReceiveChannel var1050;
      label8925: {
         Throwable var1048;
         Object var1061;
         label8924: {
            Throwable var10000;
            label8923: {
               int var3;
               ReceiveChannel var10;
               Function1 var11;
               Object var12;
               Object var13;
               Object var14;
               boolean var10001;
               ChannelIterator var1051;
               Comparable var1054;
               ChannelIterator var1055;
               ReceiveChannel var1056;
               Comparable var1057;
               ReceiveChannel var1058;
               Object var1059;
               Comparable var1060;
               ChannelIterator var1062;
               label8933: {
                  Object var1049 = ((<undefinedtype>)var5).result;
                  var14 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                  var3 = ((<undefinedtype>)var5).label;
                  ChannelIterator var7;
                  ReceiveChannel var8;
                  Function1 var9;
                  Object var1053;
                  if (var3 != 0) {
                     if (var3 != 1) {
                        if (var3 != 2) {
                           throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }

                        var1060 = (Comparable)((<undefinedtype>)var5).L$7;
                        var1061 = ((<undefinedtype>)var5).L$6;
                        var1055 = (ChannelIterator)((<undefinedtype>)var5).L$5;
                        var1058 = (ReceiveChannel)((<undefinedtype>)var5).L$4;
                        var1048 = (Throwable)((<undefinedtype>)var5).L$3;
                        var0 = (ReceiveChannel)((<undefinedtype>)var5).L$2;
                        var11 = (Function1)((<undefinedtype>)var5).L$1;
                        var10 = (ReceiveChannel)((<undefinedtype>)var5).L$0;

                        try {
                           ResultKt.throwOnFailure(var1049);
                        } catch (Throwable var1016) {
                           var1050 = var0;
                           var1047 = var1016;
                           break label8925;
                        }

                        var12 = var5;
                        var5 = var1049;
                        var1050 = var0;

                        try {
                           if (!(Boolean)var5) {
                              break label8924;
                           }
                        } catch (Throwable var1043) {
                           var10000 = var1043;
                           var10001 = false;
                           break label8923;
                        }

                        var1050 = var0;

                        try {
                           var13 = var1055.next();
                        } catch (Throwable var1044) {
                           var10000 = var1044;
                           var10001 = false;
                           break label8923;
                        }

                        var1050 = var0;

                        try {
                           var1054 = (Comparable)var11.invoke(var13);
                        } catch (Throwable var1045) {
                           var10000 = var1045;
                           var10001 = false;
                           break label8923;
                        }

                        var1050 = var0;

                        try {
                           var3 = var1060.compareTo(var1054);
                        } catch (Throwable var1046) {
                           var10000 = var1046;
                           var10001 = false;
                           break label8923;
                        }

                        if (var3 < 0) {
                           var1061 = var13;
                           var1060 = var1054;
                        }

                        var1056 = var1058;
                        var1051 = var1055;
                        var1059 = var1061;
                        var1057 = var1060;
                        var1062 = var1051;
                        break label8933;
                     }

                     var7 = (ChannelIterator)((<undefinedtype>)var5).L$5;
                     var8 = (ReceiveChannel)((<undefinedtype>)var5).L$4;
                     var1048 = (Throwable)((<undefinedtype>)var5).L$3;
                     var0 = (ReceiveChannel)((<undefinedtype>)var5).L$2;
                     var9 = (Function1)((<undefinedtype>)var5).L$1;
                     var10 = (ReceiveChannel)((<undefinedtype>)var5).L$0;

                     try {
                        ResultKt.throwOnFailure(var1049);
                     } catch (Throwable var1015) {
                        var1050 = var0;
                        var1047 = var1015;
                        break label8925;
                     }

                     var1053 = var1049;
                  } else {
                     ResultKt.throwOnFailure(var1049);
                     Throwable var1052 = (Throwable)null;
                     var1050 = var0;

                     try {
                        var7 = var0.iterator();
                     } catch (Throwable var1042) {
                        var10000 = var1042;
                        var10001 = false;
                        break label8923;
                     }

                     var1050 = var0;

                     try {
                        ((<undefinedtype>)var5).L$0 = var6;
                     } catch (Throwable var1041) {
                        var10000 = var1041;
                        var10001 = false;
                        break label8923;
                     }

                     var1050 = var0;

                     try {
                        ((<undefinedtype>)var5).L$1 = var1;
                     } catch (Throwable var1040) {
                        var10000 = var1040;
                        var10001 = false;
                        break label8923;
                     }

                     var1050 = var0;

                     try {
                        ((<undefinedtype>)var5).L$2 = var6;
                     } catch (Throwable var1039) {
                        var10000 = var1039;
                        var10001 = false;
                        break label8923;
                     }

                     var1050 = var0;

                     try {
                        ((<undefinedtype>)var5).L$3 = null;
                     } catch (Throwable var1038) {
                        var10000 = var1038;
                        var10001 = false;
                        break label8923;
                     }

                     var1050 = var0;

                     try {
                        ((<undefinedtype>)var5).L$4 = var6;
                     } catch (Throwable var1037) {
                        var10000 = var1037;
                        var10001 = false;
                        break label8923;
                     }

                     var1050 = var0;

                     try {
                        ((<undefinedtype>)var5).L$5 = var7;
                     } catch (Throwable var1036) {
                        var10000 = var1036;
                        var10001 = false;
                        break label8923;
                     }

                     var1050 = var0;

                     try {
                        ((<undefinedtype>)var5).label = 1;
                     } catch (Throwable var1035) {
                        var10000 = var1035;
                        var10001 = false;
                        break label8923;
                     }

                     var1050 = var0;

                     try {
                        var1061 = var7.hasNext((Continuation)var5);
                     } catch (Throwable var1034) {
                        var10000 = var1034;
                        var10001 = false;
                        break label8923;
                     }

                     if (var1061 == var14) {
                        return var14;
                     }

                     var10 = var0;
                     var0 = null;
                     var8 = var10;
                     var1049 = var1061;
                     var9 = var1;
                     var1048 = var0;
                     var0 = var6;
                     var1053 = var1049;
                  }

                  var1050 = var0;

                  boolean var4;
                  try {
                     var4 = (Boolean)var1053;
                  } catch (Throwable var1033) {
                     var10000 = var1033;
                     var10001 = false;
                     break label8923;
                  }

                  if (!var4) {
                     InlineMarker.finallyStart(3);
                     ChannelsKt.cancelConsumed(var0, var1048);
                     InlineMarker.finallyEnd(3);
                     return null;
                  }

                  var1050 = var0;

                  try {
                     var12 = var7.next();
                  } catch (Throwable var1032) {
                     var10000 = var1032;
                     var10001 = false;
                     break label8923;
                  }

                  var1050 = var0;

                  try {
                     var1057 = (Comparable)var9.invoke(var12);
                  } catch (Throwable var1031) {
                     var10000 = var1031;
                     var10001 = false;
                     break label8923;
                  }

                  var11 = var9;
                  var1050 = var8;
                  var1062 = var7;
                  var1059 = var12;
                  var12 = var5;
                  var1056 = var1050;
               }

               while(true) {
                  var1050 = var0;

                  try {
                     ((<undefinedtype>)var12).L$0 = var10;
                  } catch (Throwable var1030) {
                     var10000 = var1030;
                     var10001 = false;
                     break;
                  }

                  var1050 = var0;

                  try {
                     ((<undefinedtype>)var12).L$1 = var11;
                  } catch (Throwable var1029) {
                     var10000 = var1029;
                     var10001 = false;
                     break;
                  }

                  var1050 = var0;

                  try {
                     ((<undefinedtype>)var12).L$2 = var0;
                  } catch (Throwable var1028) {
                     var10000 = var1028;
                     var10001 = false;
                     break;
                  }

                  var1050 = var0;

                  try {
                     ((<undefinedtype>)var12).L$3 = var1048;
                  } catch (Throwable var1027) {
                     var10000 = var1027;
                     var10001 = false;
                     break;
                  }

                  var1050 = var0;

                  try {
                     ((<undefinedtype>)var12).L$4 = var1056;
                  } catch (Throwable var1026) {
                     var10000 = var1026;
                     var10001 = false;
                     break;
                  }

                  var1050 = var0;

                  try {
                     ((<undefinedtype>)var12).L$5 = var1062;
                  } catch (Throwable var1025) {
                     var10000 = var1025;
                     var10001 = false;
                     break;
                  }

                  var1050 = var0;

                  try {
                     ((<undefinedtype>)var12).L$6 = var1059;
                  } catch (Throwable var1024) {
                     var10000 = var1024;
                     var10001 = false;
                     break;
                  }

                  var1050 = var0;

                  try {
                     ((<undefinedtype>)var12).L$7 = var1057;
                  } catch (Throwable var1023) {
                     var10000 = var1023;
                     var10001 = false;
                     break;
                  }

                  var1050 = var0;

                  try {
                     ((<undefinedtype>)var12).label = 2;
                  } catch (Throwable var1022) {
                     var10000 = var1022;
                     var10001 = false;
                     break;
                  }

                  var1050 = var0;

                  try {
                     var1061 = var1062.hasNext((Continuation)var12);
                  } catch (Throwable var1021) {
                     var10000 = var1021;
                     var10001 = false;
                     break;
                  }

                  if (var1061 == var14) {
                     return var14;
                  }

                  var1051 = var1062;
                  ReceiveChannel var1063 = var1056;
                  var5 = var1061;
                  var1061 = var1059;
                  var1060 = var1057;
                  var1058 = var1063;
                  var1055 = var1051;
                  var1050 = var0;

                  try {
                     if (!(Boolean)var5) {
                        break label8924;
                     }
                  } catch (Throwable var1020) {
                     var10000 = var1020;
                     var10001 = false;
                     break;
                  }

                  var1050 = var0;

                  try {
                     var13 = var1055.next();
                  } catch (Throwable var1019) {
                     var10000 = var1019;
                     var10001 = false;
                     break;
                  }

                  var1050 = var0;

                  try {
                     var1054 = (Comparable)var11.invoke(var13);
                  } catch (Throwable var1018) {
                     var10000 = var1018;
                     var10001 = false;
                     break;
                  }

                  var1050 = var0;

                  try {
                     var3 = var1060.compareTo(var1054);
                  } catch (Throwable var1017) {
                     var10000 = var1017;
                     var10001 = false;
                     break;
                  }

                  if (var3 < 0) {
                     var1061 = var13;
                     var1060 = var1054;
                  }

                  var1056 = var1058;
                  var1051 = var1055;
                  var1059 = var1061;
                  var1057 = var1060;
                  var1062 = var1051;
               }
            }

            var1047 = var10000;
            break label8925;
         }

         InlineMarker.finallyStart(2);
         ChannelsKt.cancelConsumed(var0, var1048);
         InlineMarker.finallyEnd(2);
         return var1061;
      }

      try {
         throw var1047;
      } finally {
         InlineMarker.finallyStart(1);
         ChannelsKt.cancelConsumed(var1050, var1047);
         InlineMarker.finallyEnd(1);
      }
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   private static final Object maxBy$$forInline(ReceiveChannel var0, Function1 var1, Continuation var2) {
      Throwable var5 = (Throwable)null;

      Throwable var10000;
      label223: {
         boolean var4;
         ChannelIterator var9;
         boolean var10001;
         try {
            var9 = var0.iterator();
            InlineMarker.mark(0);
            Object var31 = var9.hasNext(var2);
            InlineMarker.mark(1);
            var4 = (Boolean)var31;
         } catch (Throwable var29) {
            var10000 = var29;
            var10001 = false;
            break label223;
         }

         if (!var4) {
            InlineMarker.finallyStart(3);
            ChannelsKt.cancelConsumed(var0, (Throwable)null);
            InlineMarker.finallyEnd(3);
            return null;
         }

         Comparable var32;
         Object var6;
         try {
            var6 = var9.next();
            var32 = (Comparable)var1.invoke(var6);
         } catch (Throwable var28) {
            var10000 = var28;
            var10001 = false;
            break label223;
         }

         while(true) {
            Comparable var33;
            int var3;
            Object var8;
            label209: {
               try {
                  InlineMarker.mark(0);
                  Object var7 = var9.hasNext(var2);
                  InlineMarker.mark(1);
                  if ((Boolean)var7) {
                     var8 = var9.next();
                     var33 = (Comparable)var1.invoke(var8);
                     var3 = var32.compareTo(var33);
                     break label209;
                  }
               } catch (Throwable var27) {
                  var10000 = var27;
                  var10001 = false;
                  break;
               }

               InlineMarker.finallyStart(2);
               ChannelsKt.cancelConsumed(var0, (Throwable)null);
               InlineMarker.finallyEnd(2);
               return var6;
            }

            if (var3 < 0) {
               var6 = var8;
               var32 = var33;
            }
         }
      }

      Throwable var30 = var10000;

      try {
         throw var30;
      } finally {
         InlineMarker.finallyStart(1);
         ChannelsKt.cancelConsumed(var0, var30);
         InlineMarker.finallyEnd(1);
      }
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object maxWith(ReceiveChannel var0, Comparator var1, Continuation var2) {
      Object var815;
      label7061: {
         if (var2 instanceof <undefinedtype>) {
            <undefinedtype> var5 = (<undefinedtype>)var2;
            if ((var5.label & Integer.MIN_VALUE) != 0) {
               var5.label += Integer.MIN_VALUE;
               var815 = var5;
               break label7061;
            }
         }

         var815 = new ContinuationImpl(var2) {
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            int label;
            Object result;

            public final Object invokeSuspend(Object var1) {
               this.result = var1;
               this.label |= Integer.MIN_VALUE;
               return ChannelsKt.maxWith((ReceiveChannel)null, (Comparator)null, this);
            }
         };
      }

      ReceiveChannel var813;
      Throwable var822;
      label7069: {
         Throwable var7;
         label7054: {
            Throwable var816;
            label7053: {
               Throwable var10000;
               ReceiveChannel var819;
               label7052: {
                  label7051: {
                     Object var10 = ((<undefinedtype>)var815).result;
                     Object var13 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                     int var3 = ((<undefinedtype>)var815).label;
                     boolean var4;
                     Object var6;
                     ReceiveChannel var8;
                     ReceiveChannel var9;
                     ChannelIterator var11;
                     Object var12;
                     boolean var10001;
                     Object var814;
                     Comparator var817;
                     ReceiveChannel var820;
                     ChannelIterator var821;
                     Comparator var823;
                     ReceiveChannel var824;
                     if (var3 != 0) {
                        if (var3 != 1) {
                           if (var3 != 2) {
                              throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                           }

                           var12 = ((<undefinedtype>)var815).L$6;
                           var11 = (ChannelIterator)((<undefinedtype>)var815).L$5;
                           var9 = (ReceiveChannel)((<undefinedtype>)var815).L$4;
                           var7 = (Throwable)((<undefinedtype>)var815).L$3;
                           var813 = (ReceiveChannel)((<undefinedtype>)var815).L$2;
                           var817 = (Comparator)((<undefinedtype>)var815).L$1;
                           var8 = (ReceiveChannel)((<undefinedtype>)var815).L$0;
                           var0 = var813;

                           try {
                              ResultKt.throwOnFailure(var10);
                           } catch (Throwable var807) {
                              var10000 = var807;
                              var10001 = false;
                              break label7051;
                           }

                           var6 = var815;
                           var815 = var12;
                           var12 = var10;
                           var0 = var813;

                           try {
                              if (!(Boolean)var12) {
                                 break label7054;
                              }
                           } catch (Throwable var803) {
                              var10000 = var803;
                              var10001 = false;
                              break label7051;
                           }

                           var0 = var813;

                           try {
                              var12 = var11.next();
                           } catch (Throwable var802) {
                              var10000 = var802;
                              var10001 = false;
                              break label7051;
                           }

                           var0 = var813;

                           try {
                              var3 = var817.compare(var815, var12);
                           } catch (Throwable var801) {
                              var10000 = var801;
                              var10001 = false;
                              break label7051;
                           }

                           if (var3 < 0) {
                              var823 = var817;
                              var814 = var12;
                           } else {
                              var814 = var815;
                              var823 = var817;
                           }
                        } else {
                           var821 = (ChannelIterator)((<undefinedtype>)var815).L$5;
                           var8 = (ReceiveChannel)((<undefinedtype>)var815).L$4;
                           var822 = (Throwable)((<undefinedtype>)var815).L$3;
                           var813 = (ReceiveChannel)((<undefinedtype>)var815).L$2;
                           var817 = (Comparator)((<undefinedtype>)var815).L$1;
                           var820 = (ReceiveChannel)((<undefinedtype>)var815).L$0;
                           var0 = var813;

                           try {
                              ResultKt.throwOnFailure(var10);
                           } catch (Throwable var806) {
                              var10000 = var806;
                              var10001 = false;
                              break label7051;
                           }

                           var0 = var813;

                           try {
                              var4 = (Boolean)var10;
                           } catch (Throwable var805) {
                              var10000 = var805;
                              var10001 = false;
                              break label7051;
                           }

                           if (!var4) {
                              break label7069;
                           }

                           var0 = var813;

                           try {
                              var10 = var821.next();
                           } catch (Throwable var804) {
                              var10000 = var804;
                              var10001 = false;
                              break label7051;
                           }

                           var824 = var8;
                           var814 = var10;
                           var11 = var821;
                           var8 = var820;
                           var823 = var817;
                           var7 = var822;
                           var9 = var824;
                           var6 = var815;
                        }
                     } else {
                        ResultKt.throwOnFailure(var10);
                        Throwable var818 = (Throwable)null;
                        var819 = var0;

                        try {
                           var821 = var0.iterator();
                        } catch (Throwable var800) {
                           var10000 = var800;
                           var10001 = false;
                           break label7052;
                        }

                        var819 = var0;

                        try {
                           ((<undefinedtype>)var815).L$0 = var0;
                        } catch (Throwable var799) {
                           var10000 = var799;
                           var10001 = false;
                           break label7052;
                        }

                        var819 = var0;

                        try {
                           ((<undefinedtype>)var815).L$1 = var1;
                        } catch (Throwable var798) {
                           var10000 = var798;
                           var10001 = false;
                           break label7052;
                        }

                        var819 = var0;

                        try {
                           ((<undefinedtype>)var815).L$2 = var0;
                        } catch (Throwable var797) {
                           var10000 = var797;
                           var10001 = false;
                           break label7052;
                        }

                        var819 = var0;

                        try {
                           ((<undefinedtype>)var815).L$3 = null;
                        } catch (Throwable var796) {
                           var10000 = var796;
                           var10001 = false;
                           break label7052;
                        }

                        var819 = var0;

                        try {
                           ((<undefinedtype>)var815).L$4 = var0;
                        } catch (Throwable var795) {
                           var10000 = var795;
                           var10001 = false;
                           break label7052;
                        }

                        var819 = var0;

                        try {
                           ((<undefinedtype>)var815).L$5 = var821;
                        } catch (Throwable var794) {
                           var10000 = var794;
                           var10001 = false;
                           break label7052;
                        }

                        var819 = var0;

                        try {
                           ((<undefinedtype>)var815).label = 1;
                        } catch (Throwable var793) {
                           var10000 = var793;
                           var10001 = false;
                           break label7052;
                        }

                        var819 = var0;

                        try {
                           var10 = var821.hasNext((Continuation)var815);
                        } catch (Throwable var792) {
                           var10000 = var792;
                           var10001 = false;
                           break label7052;
                        }

                        if (var10 == var13) {
                           return var13;
                        }

                        var820 = var0;
                        var8 = var0;
                        var822 = null;
                        var817 = var1;
                        var813 = var0;
                        var0 = var0;

                        try {
                           var4 = (Boolean)var10;
                        } catch (Throwable var808) {
                           var10000 = var808;
                           var10001 = false;
                           break label7051;
                        }

                        if (!var4) {
                           break label7069;
                        }

                        var0 = var813;

                        try {
                           var10 = var821.next();
                        } catch (Throwable var809) {
                           var10000 = var809;
                           var10001 = false;
                           break label7051;
                        }

                        var824 = var8;
                        var814 = var10;
                        var11 = var821;
                        var8 = var820;
                        var823 = var817;
                        var7 = var822;
                        var9 = var824;
                        var6 = var815;
                     }

                     while(true) {
                        var819 = var813;

                        try {
                           ((<undefinedtype>)var6).L$0 = var8;
                        } catch (Throwable var791) {
                           var10000 = var791;
                           var10001 = false;
                           break label7052;
                        }

                        var819 = var813;

                        try {
                           ((<undefinedtype>)var6).L$1 = var823;
                        } catch (Throwable var790) {
                           var10000 = var790;
                           var10001 = false;
                           break label7052;
                        }

                        var819 = var813;

                        try {
                           ((<undefinedtype>)var6).L$2 = var813;
                        } catch (Throwable var789) {
                           var10000 = var789;
                           var10001 = false;
                           break label7052;
                        }

                        var819 = var813;

                        try {
                           ((<undefinedtype>)var6).L$3 = var7;
                        } catch (Throwable var788) {
                           var10000 = var788;
                           var10001 = false;
                           break label7052;
                        }

                        var819 = var813;

                        try {
                           ((<undefinedtype>)var6).L$4 = var9;
                        } catch (Throwable var787) {
                           var10000 = var787;
                           var10001 = false;
                           break label7052;
                        }

                        var819 = var813;

                        try {
                           ((<undefinedtype>)var6).L$5 = var11;
                        } catch (Throwable var786) {
                           var10000 = var786;
                           var10001 = false;
                           break label7052;
                        }

                        var819 = var813;

                        try {
                           ((<undefinedtype>)var6).L$6 = var814;
                        } catch (Throwable var785) {
                           var10000 = var785;
                           var10001 = false;
                           break label7052;
                        }

                        var819 = var813;

                        try {
                           ((<undefinedtype>)var6).label = 2;
                        } catch (Throwable var784) {
                           var10000 = var784;
                           var10001 = false;
                           break label7052;
                        }

                        var819 = var813;

                        try {
                           var12 = var11.hasNext((Continuation)var6);
                        } catch (Throwable var783) {
                           var10000 = var783;
                           var10001 = false;
                           break label7052;
                        }

                        if (var12 == var13) {
                           return var13;
                        }

                        var815 = var814;
                        var817 = var823;
                        var0 = var813;

                        try {
                           if (!(Boolean)var12) {
                              break label7054;
                           }
                        } catch (Throwable var810) {
                           var10000 = var810;
                           var10001 = false;
                           break;
                        }

                        var0 = var813;

                        try {
                           var12 = var11.next();
                        } catch (Throwable var811) {
                           var10000 = var811;
                           var10001 = false;
                           break;
                        }

                        var0 = var813;

                        try {
                           var3 = var817.compare(var815, var12);
                        } catch (Throwable var812) {
                           var10000 = var812;
                           var10001 = false;
                           break;
                        }

                        if (var3 < 0) {
                           var823 = var823;
                           var814 = var12;
                        } else {
                           var814 = var815;
                           var823 = var823;
                        }
                     }
                  }

                  var816 = var10000;
                  break label7053;
               }

               var816 = var10000;
               var0 = var819;
            }

            try {
               throw var816;
            } finally {
               ChannelsKt.cancelConsumed(var0, var816);
            }
         }

         ChannelsKt.cancelConsumed(var813, var7);
         return var815;
      }

      ChannelsKt.cancelConsumed(var813, var822);
      return null;
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object minBy(ReceiveChannel var0, Function1 var1, Continuation var2) {
      Object var5;
      ReceiveChannel var6;
      label8930: {
         var6 = var0;
         if (var2 instanceof <undefinedtype>) {
            var5 = (<undefinedtype>)var2;
            if ((((<undefinedtype>)var5).label & Integer.MIN_VALUE) != 0) {
               ((<undefinedtype>)var5).label += Integer.MIN_VALUE;
               break label8930;
            }
         }

         var5 = new ContinuationImpl(var2) {
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            int label;
            Object result;

            public final Object invokeSuspend(Object var1) {
               this.result = var1;
               this.label |= Integer.MIN_VALUE;
               return ChannelsKt.minBy((ReceiveChannel)null, (Function1)null, this);
            }
         };
      }

      Throwable var1047;
      ReceiveChannel var1050;
      label8925: {
         Throwable var1048;
         Object var1061;
         label8924: {
            Throwable var10000;
            label8923: {
               int var3;
               ReceiveChannel var10;
               Function1 var11;
               Object var12;
               Object var13;
               Object var14;
               boolean var10001;
               ChannelIterator var1051;
               Comparable var1054;
               ChannelIterator var1055;
               ReceiveChannel var1056;
               Comparable var1057;
               ReceiveChannel var1058;
               Object var1059;
               Comparable var1060;
               ChannelIterator var1062;
               label8933: {
                  Object var1049 = ((<undefinedtype>)var5).result;
                  var14 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                  var3 = ((<undefinedtype>)var5).label;
                  ChannelIterator var7;
                  ReceiveChannel var8;
                  Function1 var9;
                  Object var1053;
                  if (var3 != 0) {
                     if (var3 != 1) {
                        if (var3 != 2) {
                           throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }

                        var1060 = (Comparable)((<undefinedtype>)var5).L$7;
                        var1061 = ((<undefinedtype>)var5).L$6;
                        var1055 = (ChannelIterator)((<undefinedtype>)var5).L$5;
                        var1058 = (ReceiveChannel)((<undefinedtype>)var5).L$4;
                        var1048 = (Throwable)((<undefinedtype>)var5).L$3;
                        var0 = (ReceiveChannel)((<undefinedtype>)var5).L$2;
                        var11 = (Function1)((<undefinedtype>)var5).L$1;
                        var10 = (ReceiveChannel)((<undefinedtype>)var5).L$0;

                        try {
                           ResultKt.throwOnFailure(var1049);
                        } catch (Throwable var1016) {
                           var1050 = var0;
                           var1047 = var1016;
                           break label8925;
                        }

                        var12 = var5;
                        var5 = var1049;
                        var1050 = var0;

                        try {
                           if (!(Boolean)var5) {
                              break label8924;
                           }
                        } catch (Throwable var1043) {
                           var10000 = var1043;
                           var10001 = false;
                           break label8923;
                        }

                        var1050 = var0;

                        try {
                           var13 = var1055.next();
                        } catch (Throwable var1044) {
                           var10000 = var1044;
                           var10001 = false;
                           break label8923;
                        }

                        var1050 = var0;

                        try {
                           var1054 = (Comparable)var11.invoke(var13);
                        } catch (Throwable var1045) {
                           var10000 = var1045;
                           var10001 = false;
                           break label8923;
                        }

                        var1050 = var0;

                        try {
                           var3 = var1060.compareTo(var1054);
                        } catch (Throwable var1046) {
                           var10000 = var1046;
                           var10001 = false;
                           break label8923;
                        }

                        if (var3 > 0) {
                           var1061 = var13;
                           var1060 = var1054;
                        }

                        var1056 = var1058;
                        var1051 = var1055;
                        var1059 = var1061;
                        var1057 = var1060;
                        var1062 = var1051;
                        break label8933;
                     }

                     var7 = (ChannelIterator)((<undefinedtype>)var5).L$5;
                     var8 = (ReceiveChannel)((<undefinedtype>)var5).L$4;
                     var1048 = (Throwable)((<undefinedtype>)var5).L$3;
                     var0 = (ReceiveChannel)((<undefinedtype>)var5).L$2;
                     var9 = (Function1)((<undefinedtype>)var5).L$1;
                     var10 = (ReceiveChannel)((<undefinedtype>)var5).L$0;

                     try {
                        ResultKt.throwOnFailure(var1049);
                     } catch (Throwable var1015) {
                        var1050 = var0;
                        var1047 = var1015;
                        break label8925;
                     }

                     var1053 = var1049;
                  } else {
                     ResultKt.throwOnFailure(var1049);
                     Throwable var1052 = (Throwable)null;
                     var1050 = var0;

                     try {
                        var7 = var0.iterator();
                     } catch (Throwable var1042) {
                        var10000 = var1042;
                        var10001 = false;
                        break label8923;
                     }

                     var1050 = var0;

                     try {
                        ((<undefinedtype>)var5).L$0 = var6;
                     } catch (Throwable var1041) {
                        var10000 = var1041;
                        var10001 = false;
                        break label8923;
                     }

                     var1050 = var0;

                     try {
                        ((<undefinedtype>)var5).L$1 = var1;
                     } catch (Throwable var1040) {
                        var10000 = var1040;
                        var10001 = false;
                        break label8923;
                     }

                     var1050 = var0;

                     try {
                        ((<undefinedtype>)var5).L$2 = var6;
                     } catch (Throwable var1039) {
                        var10000 = var1039;
                        var10001 = false;
                        break label8923;
                     }

                     var1050 = var0;

                     try {
                        ((<undefinedtype>)var5).L$3 = null;
                     } catch (Throwable var1038) {
                        var10000 = var1038;
                        var10001 = false;
                        break label8923;
                     }

                     var1050 = var0;

                     try {
                        ((<undefinedtype>)var5).L$4 = var6;
                     } catch (Throwable var1037) {
                        var10000 = var1037;
                        var10001 = false;
                        break label8923;
                     }

                     var1050 = var0;

                     try {
                        ((<undefinedtype>)var5).L$5 = var7;
                     } catch (Throwable var1036) {
                        var10000 = var1036;
                        var10001 = false;
                        break label8923;
                     }

                     var1050 = var0;

                     try {
                        ((<undefinedtype>)var5).label = 1;
                     } catch (Throwable var1035) {
                        var10000 = var1035;
                        var10001 = false;
                        break label8923;
                     }

                     var1050 = var0;

                     try {
                        var1061 = var7.hasNext((Continuation)var5);
                     } catch (Throwable var1034) {
                        var10000 = var1034;
                        var10001 = false;
                        break label8923;
                     }

                     if (var1061 == var14) {
                        return var14;
                     }

                     var10 = var0;
                     var0 = null;
                     var8 = var10;
                     var1049 = var1061;
                     var9 = var1;
                     var1048 = var0;
                     var0 = var6;
                     var1053 = var1049;
                  }

                  var1050 = var0;

                  boolean var4;
                  try {
                     var4 = (Boolean)var1053;
                  } catch (Throwable var1033) {
                     var10000 = var1033;
                     var10001 = false;
                     break label8923;
                  }

                  if (!var4) {
                     InlineMarker.finallyStart(3);
                     ChannelsKt.cancelConsumed(var0, var1048);
                     InlineMarker.finallyEnd(3);
                     return null;
                  }

                  var1050 = var0;

                  try {
                     var12 = var7.next();
                  } catch (Throwable var1032) {
                     var10000 = var1032;
                     var10001 = false;
                     break label8923;
                  }

                  var1050 = var0;

                  try {
                     var1057 = (Comparable)var9.invoke(var12);
                  } catch (Throwable var1031) {
                     var10000 = var1031;
                     var10001 = false;
                     break label8923;
                  }

                  var11 = var9;
                  var1050 = var8;
                  var1062 = var7;
                  var1059 = var12;
                  var12 = var5;
                  var1056 = var1050;
               }

               while(true) {
                  var1050 = var0;

                  try {
                     ((<undefinedtype>)var12).L$0 = var10;
                  } catch (Throwable var1030) {
                     var10000 = var1030;
                     var10001 = false;
                     break;
                  }

                  var1050 = var0;

                  try {
                     ((<undefinedtype>)var12).L$1 = var11;
                  } catch (Throwable var1029) {
                     var10000 = var1029;
                     var10001 = false;
                     break;
                  }

                  var1050 = var0;

                  try {
                     ((<undefinedtype>)var12).L$2 = var0;
                  } catch (Throwable var1028) {
                     var10000 = var1028;
                     var10001 = false;
                     break;
                  }

                  var1050 = var0;

                  try {
                     ((<undefinedtype>)var12).L$3 = var1048;
                  } catch (Throwable var1027) {
                     var10000 = var1027;
                     var10001 = false;
                     break;
                  }

                  var1050 = var0;

                  try {
                     ((<undefinedtype>)var12).L$4 = var1056;
                  } catch (Throwable var1026) {
                     var10000 = var1026;
                     var10001 = false;
                     break;
                  }

                  var1050 = var0;

                  try {
                     ((<undefinedtype>)var12).L$5 = var1062;
                  } catch (Throwable var1025) {
                     var10000 = var1025;
                     var10001 = false;
                     break;
                  }

                  var1050 = var0;

                  try {
                     ((<undefinedtype>)var12).L$6 = var1059;
                  } catch (Throwable var1024) {
                     var10000 = var1024;
                     var10001 = false;
                     break;
                  }

                  var1050 = var0;

                  try {
                     ((<undefinedtype>)var12).L$7 = var1057;
                  } catch (Throwable var1023) {
                     var10000 = var1023;
                     var10001 = false;
                     break;
                  }

                  var1050 = var0;

                  try {
                     ((<undefinedtype>)var12).label = 2;
                  } catch (Throwable var1022) {
                     var10000 = var1022;
                     var10001 = false;
                     break;
                  }

                  var1050 = var0;

                  try {
                     var1061 = var1062.hasNext((Continuation)var12);
                  } catch (Throwable var1021) {
                     var10000 = var1021;
                     var10001 = false;
                     break;
                  }

                  if (var1061 == var14) {
                     return var14;
                  }

                  var1051 = var1062;
                  ReceiveChannel var1063 = var1056;
                  var5 = var1061;
                  var1061 = var1059;
                  var1060 = var1057;
                  var1058 = var1063;
                  var1055 = var1051;
                  var1050 = var0;

                  try {
                     if (!(Boolean)var5) {
                        break label8924;
                     }
                  } catch (Throwable var1020) {
                     var10000 = var1020;
                     var10001 = false;
                     break;
                  }

                  var1050 = var0;

                  try {
                     var13 = var1055.next();
                  } catch (Throwable var1019) {
                     var10000 = var1019;
                     var10001 = false;
                     break;
                  }

                  var1050 = var0;

                  try {
                     var1054 = (Comparable)var11.invoke(var13);
                  } catch (Throwable var1018) {
                     var10000 = var1018;
                     var10001 = false;
                     break;
                  }

                  var1050 = var0;

                  try {
                     var3 = var1060.compareTo(var1054);
                  } catch (Throwable var1017) {
                     var10000 = var1017;
                     var10001 = false;
                     break;
                  }

                  if (var3 > 0) {
                     var1061 = var13;
                     var1060 = var1054;
                  }

                  var1056 = var1058;
                  var1051 = var1055;
                  var1059 = var1061;
                  var1057 = var1060;
                  var1062 = var1051;
               }
            }

            var1047 = var10000;
            break label8925;
         }

         InlineMarker.finallyStart(2);
         ChannelsKt.cancelConsumed(var0, var1048);
         InlineMarker.finallyEnd(2);
         return var1061;
      }

      try {
         throw var1047;
      } finally {
         InlineMarker.finallyStart(1);
         ChannelsKt.cancelConsumed(var1050, var1047);
         InlineMarker.finallyEnd(1);
      }
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   private static final Object minBy$$forInline(ReceiveChannel var0, Function1 var1, Continuation var2) {
      Throwable var5 = (Throwable)null;

      Throwable var10000;
      label223: {
         boolean var4;
         ChannelIterator var9;
         boolean var10001;
         Object var31;
         try {
            var9 = var0.iterator();
            InlineMarker.mark(0);
            var31 = var9.hasNext(var2);
            InlineMarker.mark(1);
            var4 = (Boolean)var31;
         } catch (Throwable var29) {
            var10000 = var29;
            var10001 = false;
            break label223;
         }

         if (!var4) {
            InlineMarker.finallyStart(3);
            ChannelsKt.cancelConsumed(var0, (Throwable)null);
            InlineMarker.finallyEnd(3);
            return null;
         }

         Comparable var6;
         try {
            var31 = var9.next();
            var6 = (Comparable)var1.invoke(var31);
         } catch (Throwable var28) {
            var10000 = var28;
            var10001 = false;
            break label223;
         }

         while(true) {
            Comparable var32;
            int var3;
            Object var8;
            label209: {
               try {
                  InlineMarker.mark(0);
                  Object var7 = var9.hasNext(var2);
                  InlineMarker.mark(1);
                  if ((Boolean)var7) {
                     var8 = var9.next();
                     var32 = (Comparable)var1.invoke(var8);
                     var3 = var6.compareTo(var32);
                     break label209;
                  }
               } catch (Throwable var27) {
                  var10000 = var27;
                  var10001 = false;
                  break;
               }

               InlineMarker.finallyStart(2);
               ChannelsKt.cancelConsumed(var0, (Throwable)null);
               InlineMarker.finallyEnd(2);
               return var31;
            }

            if (var3 > 0) {
               var31 = var8;
               var6 = var32;
            }
         }
      }

      Throwable var30 = var10000;

      try {
         throw var30;
      } finally {
         InlineMarker.finallyStart(1);
         ChannelsKt.cancelConsumed(var0, var30);
         InlineMarker.finallyEnd(1);
      }
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object minWith(ReceiveChannel var0, Comparator var1, Continuation var2) {
      Object var815;
      label7061: {
         if (var2 instanceof <undefinedtype>) {
            <undefinedtype> var5 = (<undefinedtype>)var2;
            if ((var5.label & Integer.MIN_VALUE) != 0) {
               var5.label += Integer.MIN_VALUE;
               var815 = var5;
               break label7061;
            }
         }

         var815 = new ContinuationImpl(var2) {
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            int label;
            Object result;

            public final Object invokeSuspend(Object var1) {
               this.result = var1;
               this.label |= Integer.MIN_VALUE;
               return ChannelsKt.minWith((ReceiveChannel)null, (Comparator)null, this);
            }
         };
      }

      ReceiveChannel var813;
      Throwable var823;
      label7069: {
         Throwable var6;
         label7054: {
            Throwable var816;
            label7053: {
               Throwable var10000;
               ReceiveChannel var820;
               label7052: {
                  label7051: {
                     Object var10 = ((<undefinedtype>)var815).result;
                     Object var13 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                     int var3 = ((<undefinedtype>)var815).label;
                     boolean var4;
                     Comparator var7;
                     ReceiveChannel var8;
                     ReceiveChannel var9;
                     ChannelIterator var11;
                     Object var12;
                     boolean var10001;
                     Object var814;
                     Comparator var818;
                     ReceiveChannel var821;
                     ChannelIterator var822;
                     Throwable var824;
                     Object var825;
                     if (var3 != 0) {
                        if (var3 != 1) {
                           if (var3 != 2) {
                              throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                           }

                           var12 = ((<undefinedtype>)var815).L$6;
                           var11 = (ChannelIterator)((<undefinedtype>)var815).L$5;
                           var8 = (ReceiveChannel)((<undefinedtype>)var815).L$4;
                           var6 = (Throwable)((<undefinedtype>)var815).L$3;
                           var813 = (ReceiveChannel)((<undefinedtype>)var815).L$2;
                           var7 = (Comparator)((<undefinedtype>)var815).L$1;
                           var9 = (ReceiveChannel)((<undefinedtype>)var815).L$0;
                           var0 = var813;

                           try {
                              ResultKt.throwOnFailure(var10);
                           } catch (Throwable var807) {
                              var10000 = var807;
                              var10001 = false;
                              break label7051;
                           }

                           Object var817 = var815;
                           var815 = var12;
                           var12 = var10;
                           var0 = var813;

                           try {
                              if (!(Boolean)var12) {
                                 break label7054;
                              }
                           } catch (Throwable var803) {
                              var10000 = var803;
                              var10001 = false;
                              break label7051;
                           }

                           var0 = var813;

                           try {
                              var12 = var11.next();
                           } catch (Throwable var802) {
                              var10000 = var802;
                              var10001 = false;
                              break label7051;
                           }

                           var0 = var813;

                           try {
                              var3 = var7.compare(var815, var12);
                           } catch (Throwable var801) {
                              var10000 = var801;
                              var10001 = false;
                              break label7051;
                           }

                           if (var3 > 0) {
                              var10 = var817;
                              var814 = var12;
                           } else {
                              var814 = var815;
                              var10 = var817;
                           }
                        } else {
                           var822 = (ChannelIterator)((<undefinedtype>)var815).L$5;
                           var8 = (ReceiveChannel)((<undefinedtype>)var815).L$4;
                           var823 = (Throwable)((<undefinedtype>)var815).L$3;
                           var813 = (ReceiveChannel)((<undefinedtype>)var815).L$2;
                           var818 = (Comparator)((<undefinedtype>)var815).L$1;
                           var821 = (ReceiveChannel)((<undefinedtype>)var815).L$0;
                           var0 = var813;

                           try {
                              ResultKt.throwOnFailure(var10);
                           } catch (Throwable var806) {
                              var10000 = var806;
                              var10001 = false;
                              break label7051;
                           }

                           var0 = var813;

                           try {
                              var4 = (Boolean)var10;
                           } catch (Throwable var805) {
                              var10000 = var805;
                              var10001 = false;
                              break label7051;
                           }

                           if (!var4) {
                              break label7069;
                           }

                           var0 = var813;

                           try {
                              var825 = var822.next();
                           } catch (Throwable var804) {
                              var10000 = var804;
                              var10001 = false;
                              break label7051;
                           }

                           var824 = var823;
                           var814 = var825;
                           var11 = var822;
                           var9 = var821;
                           var7 = var818;
                           var6 = var824;
                           var10 = var815;
                        }
                     } else {
                        ResultKt.throwOnFailure(var10);
                        Throwable var819 = (Throwable)null;
                        var820 = var0;

                        try {
                           var822 = var0.iterator();
                        } catch (Throwable var800) {
                           var10000 = var800;
                           var10001 = false;
                           break label7052;
                        }

                        var820 = var0;

                        try {
                           ((<undefinedtype>)var815).L$0 = var0;
                        } catch (Throwable var799) {
                           var10000 = var799;
                           var10001 = false;
                           break label7052;
                        }

                        var820 = var0;

                        try {
                           ((<undefinedtype>)var815).L$1 = var1;
                        } catch (Throwable var798) {
                           var10000 = var798;
                           var10001 = false;
                           break label7052;
                        }

                        var820 = var0;

                        try {
                           ((<undefinedtype>)var815).L$2 = var0;
                        } catch (Throwable var797) {
                           var10000 = var797;
                           var10001 = false;
                           break label7052;
                        }

                        var820 = var0;

                        try {
                           ((<undefinedtype>)var815).L$3 = null;
                        } catch (Throwable var796) {
                           var10000 = var796;
                           var10001 = false;
                           break label7052;
                        }

                        var820 = var0;

                        try {
                           ((<undefinedtype>)var815).L$4 = var0;
                        } catch (Throwable var795) {
                           var10000 = var795;
                           var10001 = false;
                           break label7052;
                        }

                        var820 = var0;

                        try {
                           ((<undefinedtype>)var815).L$5 = var822;
                        } catch (Throwable var794) {
                           var10000 = var794;
                           var10001 = false;
                           break label7052;
                        }

                        var820 = var0;

                        try {
                           ((<undefinedtype>)var815).label = 1;
                        } catch (Throwable var793) {
                           var10000 = var793;
                           var10001 = false;
                           break label7052;
                        }

                        var820 = var0;

                        try {
                           var10 = var822.hasNext((Continuation)var815);
                        } catch (Throwable var792) {
                           var10000 = var792;
                           var10001 = false;
                           break label7052;
                        }

                        if (var10 == var13) {
                           return var13;
                        }

                        var821 = var0;
                        var8 = var0;
                        var823 = null;
                        var818 = var1;
                        var813 = var0;
                        var0 = var0;

                        try {
                           var4 = (Boolean)var10;
                        } catch (Throwable var808) {
                           var10000 = var808;
                           var10001 = false;
                           break label7051;
                        }

                        if (!var4) {
                           break label7069;
                        }

                        var0 = var813;

                        try {
                           var825 = var822.next();
                        } catch (Throwable var809) {
                           var10000 = var809;
                           var10001 = false;
                           break label7051;
                        }

                        var824 = var823;
                        var814 = var825;
                        var11 = var822;
                        var9 = var821;
                        var7 = var818;
                        var6 = var824;
                        var10 = var815;
                     }

                     while(true) {
                        var820 = var813;

                        try {
                           ((<undefinedtype>)var10).L$0 = var9;
                        } catch (Throwable var791) {
                           var10000 = var791;
                           var10001 = false;
                           break label7052;
                        }

                        var820 = var813;

                        try {
                           ((<undefinedtype>)var10).L$1 = var7;
                        } catch (Throwable var790) {
                           var10000 = var790;
                           var10001 = false;
                           break label7052;
                        }

                        var820 = var813;

                        try {
                           ((<undefinedtype>)var10).L$2 = var813;
                        } catch (Throwable var789) {
                           var10000 = var789;
                           var10001 = false;
                           break label7052;
                        }

                        var820 = var813;

                        try {
                           ((<undefinedtype>)var10).L$3 = var6;
                        } catch (Throwable var788) {
                           var10000 = var788;
                           var10001 = false;
                           break label7052;
                        }

                        var820 = var813;

                        try {
                           ((<undefinedtype>)var10).L$4 = var8;
                        } catch (Throwable var787) {
                           var10000 = var787;
                           var10001 = false;
                           break label7052;
                        }

                        var820 = var813;

                        try {
                           ((<undefinedtype>)var10).L$5 = var11;
                        } catch (Throwable var786) {
                           var10000 = var786;
                           var10001 = false;
                           break label7052;
                        }

                        var820 = var813;

                        try {
                           ((<undefinedtype>)var10).L$6 = var814;
                        } catch (Throwable var785) {
                           var10000 = var785;
                           var10001 = false;
                           break label7052;
                        }

                        var820 = var813;

                        try {
                           ((<undefinedtype>)var10).label = 2;
                        } catch (Throwable var784) {
                           var10000 = var784;
                           var10001 = false;
                           break label7052;
                        }

                        var820 = var813;

                        try {
                           var12 = var11.hasNext((Continuation)var10);
                        } catch (Throwable var783) {
                           var10000 = var783;
                           var10001 = false;
                           break label7052;
                        }

                        if (var12 == var13) {
                           return var13;
                        }

                        var815 = var814;
                        var0 = var813;

                        try {
                           if (!(Boolean)var12) {
                              break label7054;
                           }
                        } catch (Throwable var810) {
                           var10000 = var810;
                           var10001 = false;
                           break;
                        }

                        var0 = var813;

                        try {
                           var12 = var11.next();
                        } catch (Throwable var811) {
                           var10000 = var811;
                           var10001 = false;
                           break;
                        }

                        var0 = var813;

                        try {
                           var3 = var7.compare(var815, var12);
                        } catch (Throwable var812) {
                           var10000 = var812;
                           var10001 = false;
                           break;
                        }

                        if (var3 > 0) {
                           var10 = var10;
                           var814 = var12;
                        } else {
                           var814 = var815;
                           var10 = var10;
                        }
                     }
                  }

                  var816 = var10000;
                  break label7053;
               }

               var816 = var10000;
               var0 = var820;
            }

            try {
               throw var816;
            } finally {
               ChannelsKt.cancelConsumed(var0, var816);
            }
         }

         ChannelsKt.cancelConsumed(var813, var6);
         return var815;
      }

      ChannelsKt.cancelConsumed(var813, var823);
      return null;
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object none(ReceiveChannel var0, Continuation var1) {
      Object var4;
      label1256: {
         if (var1 instanceof <undefinedtype>) {
            var4 = (<undefinedtype>)var1;
            if ((((<undefinedtype>)var4).label & Integer.MIN_VALUE) != 0) {
               ((<undefinedtype>)var4).label += Integer.MIN_VALUE;
               break label1256;
            }
         }

         var4 = new ContinuationImpl(var1) {
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            int label;
            Object result;

            public final Object invokeSuspend(Object var1) {
               this.result = var1;
               this.label |= Integer.MIN_VALUE;
               return ChannelsKt.none((ReceiveChannel)null, this);
            }
         };
      }

      label1251: {
         ReceiveChannel var142;
         Throwable var10000;
         label1259: {
            Object var140 = ((<undefinedtype>)var4).result;
            Object var7 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
            int var2 = ((<undefinedtype>)var4).label;
            boolean var3 = true;
            Throwable var5;
            boolean var10001;
            if (var2 != 0) {
               if (var2 != 1) {
                  throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
               }

               var0 = (ReceiveChannel)((<undefinedtype>)var4).L$3;
               var5 = (Throwable)((<undefinedtype>)var4).L$2;
               var0 = (ReceiveChannel)((<undefinedtype>)var4).L$1;
               var4 = (ReceiveChannel)((<undefinedtype>)var4).L$0;

               try {
                  ResultKt.throwOnFailure(var140);
               } finally {
                  break label1251;
               }

            } else {
               ResultKt.throwOnFailure(var140);
               var5 = null;
               Throwable var141 = (Throwable)null;
               var142 = var0;

               ChannelIterator var6;
               try {
                  var6 = var0.iterator();
               } catch (Throwable var138) {
                  var10000 = var138;
                  var10001 = false;
                  break label1259;
               }

               var142 = var0;

               try {
                  ((<undefinedtype>)var4).L$0 = var0;
               } catch (Throwable var137) {
                  var10000 = var137;
                  var10001 = false;
                  break label1259;
               }

               var142 = var0;

               try {
                  ((<undefinedtype>)var4).L$1 = var0;
               } catch (Throwable var136) {
                  var10000 = var136;
                  var10001 = false;
                  break label1259;
               }

               var142 = var0;

               try {
                  ((<undefinedtype>)var4).L$2 = null;
               } catch (Throwable var135) {
                  var10000 = var135;
                  var10001 = false;
                  break label1259;
               }

               var142 = var0;

               try {
                  ((<undefinedtype>)var4).L$3 = var0;
               } catch (Throwable var134) {
                  var10000 = var134;
                  var10001 = false;
                  break label1259;
               }

               var142 = var0;

               try {
                  ((<undefinedtype>)var4).label = 1;
               } catch (Throwable var133) {
                  var10000 = var133;
                  var10001 = false;
                  break label1259;
               }

               var142 = var0;

               Object var143;
               try {
                  var143 = var6.hasNext((Continuation)var4);
               } catch (Throwable var132) {
                  var10000 = var132;
                  var10001 = false;
                  break label1259;
               }

               var4 = var143;
               if (var143 == var7) {
                  return var7;
               }
            }

            var142 = var0;

            label1248: {
               try {
                  if (!(Boolean)var4) {
                     break label1248;
                  }
               } catch (Throwable var139) {
                  var10000 = var139;
                  var10001 = false;
                  break label1259;
               }

               var3 = false;
            }

            var142 = var0;

            Boolean var144;
            try {
               var144 = Boxing.boxBoolean(var3);
            } catch (Throwable var130) {
               var10000 = var130;
               var10001 = false;
               break label1259;
            }

            ChannelsKt.cancelConsumed(var0, var5);
            return var144;
         }

         var4 = var10000;
         var0 = var142;
      }

      try {
         throw var4;
      } finally {
         ChannelsKt.cancelConsumed(var0, (Throwable)var4);
      }
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object none(ReceiveChannel var0, Function1 var1, Continuation var2) {
      Object var355;
      label3307: {
         if (var2 instanceof <undefinedtype>) {
            <undefinedtype> var4 = (<undefinedtype>)var2;
            if ((var4.label & Integer.MIN_VALUE) != 0) {
               var4.label += Integer.MIN_VALUE;
               var355 = var4;
               break label3307;
            }
         }

         var355 = new ContinuationImpl(var2) {
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            int label;
            Object result;

            public final Object invokeSuspend(Object var1) {
               this.result = var1;
               this.label |= Integer.MIN_VALUE;
               return ChannelsKt.none((ReceiveChannel)null, (Function1)null, this);
            }
         };
      }

      Throwable var352;
      ReceiveChannel var354;
      label3302: {
         Throwable var10000;
         label3301: {
            Object var11 = ((<undefinedtype>)var355).result;
            Object var357 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
            int var3 = ((<undefinedtype>)var355).label;
            ReceiveChannel var5;
            ReceiveChannel var6;
            Function1 var7;
            Object var8;
            ReceiveChannel var9;
            ChannelIterator var10;
            boolean var10001;
            Throwable var353;
            Throwable var356;
            Unit var358;
            Throwable var359;
            Boolean var361;
            if (var3 != 0) {
               label3310: {
                  if (var3 != 1) {
                     throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                  }

                  var10 = (ChannelIterator)((<undefinedtype>)var355).L$6;
                  var6 = (ReceiveChannel)((<undefinedtype>)var355).L$5;
                  var353 = (Throwable)((<undefinedtype>)var355).L$4;
                  var0 = (ReceiveChannel)((<undefinedtype>)var355).L$3;
                  var5 = (ReceiveChannel)((<undefinedtype>)var355).L$2;
                  var7 = (Function1)((<undefinedtype>)var355).L$1;
                  var9 = (ReceiveChannel)((<undefinedtype>)var355).L$0;

                  try {
                     ResultKt.throwOnFailure(var11);
                  } catch (Throwable var335) {
                     var354 = var0;
                     var352 = var335;
                     break label3302;
                  }

                  var8 = var355;
                  var356 = var353;
                  var354 = var0;

                  label3311: {
                     try {
                        if ((Boolean)var11) {
                           break label3311;
                        }
                     } catch (Throwable var348) {
                        var10000 = var348;
                        var10001 = false;
                        break label3301;
                     }

                     var354 = var0;

                     try {
                        var358 = Unit.INSTANCE;
                     } catch (Throwable var349) {
                        var10000 = var349;
                        var10001 = false;
                        break label3301;
                     }

                     InlineMarker.finallyStart(1);
                     ChannelsKt.cancelConsumed(var0, var356);
                     InlineMarker.finallyEnd(1);
                     return Boxing.boxBoolean(true);
                  }

                  var354 = var0;

                  label3277: {
                     try {
                        if ((Boolean)var7.invoke(var10.next())) {
                           break label3277;
                        }
                     } catch (Throwable var350) {
                        var10000 = var350;
                        var10001 = false;
                        break label3301;
                     }

                     var353 = var356;
                     var355 = var357;
                     var359 = var353;
                     break label3310;
                  }

                  var354 = var0;

                  try {
                     var361 = Boxing.boxBoolean(false);
                  } catch (Throwable var351) {
                     var10000 = var351;
                     var10001 = false;
                     break label3301;
                  }

                  InlineMarker.finallyStart(2);
                  ChannelsKt.cancelConsumed(var0, var356);
                  InlineMarker.finallyEnd(2);
                  return var361;
               }
            } else {
               ResultKt.throwOnFailure(var11);
               Throwable var360 = (Throwable)null;

               try {
                  var10 = var0.iterator();
               } catch (Throwable var336) {
                  var354 = var0;
                  var352 = var336;
                  break label3302;
               }

               var7 = null;
               var8 = var355;
               var355 = var357;
               var5 = var0;
               var0 = var0;
               var6 = var0;
               var9 = var0;
               var359 = var7;
               var7 = var1;
            }

            while(true) {
               var354 = var0;

               try {
                  ((<undefinedtype>)var8).L$0 = var9;
               } catch (Throwable var345) {
                  var10000 = var345;
                  var10001 = false;
                  break;
               }

               var354 = var0;

               try {
                  ((<undefinedtype>)var8).L$1 = var7;
               } catch (Throwable var344) {
                  var10000 = var344;
                  var10001 = false;
                  break;
               }

               var354 = var0;

               try {
                  ((<undefinedtype>)var8).L$2 = var5;
               } catch (Throwable var343) {
                  var10000 = var343;
                  var10001 = false;
                  break;
               }

               var354 = var0;

               try {
                  ((<undefinedtype>)var8).L$3 = var0;
               } catch (Throwable var342) {
                  var10000 = var342;
                  var10001 = false;
                  break;
               }

               var354 = var0;

               try {
                  ((<undefinedtype>)var8).L$4 = var359;
               } catch (Throwable var341) {
                  var10000 = var341;
                  var10001 = false;
                  break;
               }

               var354 = var0;

               try {
                  ((<undefinedtype>)var8).L$5 = var6;
               } catch (Throwable var340) {
                  var10000 = var340;
                  var10001 = false;
                  break;
               }

               var354 = var0;

               try {
                  ((<undefinedtype>)var8).L$6 = var10;
               } catch (Throwable var339) {
                  var10000 = var339;
                  var10001 = false;
                  break;
               }

               var354 = var0;

               try {
                  ((<undefinedtype>)var8).label = 1;
               } catch (Throwable var338) {
                  var10000 = var338;
                  var10001 = false;
                  break;
               }

               var354 = var0;

               try {
                  var11 = var10.hasNext((Continuation)var8);
               } catch (Throwable var337) {
                  var10000 = var337;
                  var10001 = false;
                  break;
               }

               if (var11 == var355) {
                  return var355;
               }

               var353 = var359;
               var357 = var355;
               var356 = var353;
               var354 = var0;

               label3314: {
                  try {
                     if ((Boolean)var11) {
                        break label3314;
                     }
                  } catch (Throwable var347) {
                     var10000 = var347;
                     var10001 = false;
                     break;
                  }

                  var354 = var0;

                  try {
                     var358 = Unit.INSTANCE;
                  } catch (Throwable var334) {
                     var10000 = var334;
                     var10001 = false;
                     break;
                  }

                  InlineMarker.finallyStart(1);
                  ChannelsKt.cancelConsumed(var0, var356);
                  InlineMarker.finallyEnd(1);
                  return Boxing.boxBoolean(true);
               }

               var354 = var0;

               label3242: {
                  try {
                     if ((Boolean)var7.invoke(var10.next())) {
                        break label3242;
                     }
                  } catch (Throwable var346) {
                     var10000 = var346;
                     var10001 = false;
                     break;
                  }

                  var353 = var356;
                  var355 = var357;
                  var359 = var353;
                  continue;
               }

               var354 = var0;

               try {
                  var361 = Boxing.boxBoolean(false);
               } catch (Throwable var333) {
                  var10000 = var333;
                  var10001 = false;
                  break;
               }

               InlineMarker.finallyStart(2);
               ChannelsKt.cancelConsumed(var0, var356);
               InlineMarker.finallyEnd(2);
               return var361;
            }
         }

         var352 = var10000;
      }

      try {
         throw var352;
      } finally {
         InlineMarker.finallyStart(1);
         ChannelsKt.cancelConsumed(var354, var352);
         InlineMarker.finallyEnd(1);
      }
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   private static final Object none$$forInline(ReceiveChannel var0, Function1 var1, Continuation var2) {
      Throwable var3 = (Throwable)null;

      label91: {
         try {
            ChannelIterator var4 = var0.iterator();

            while(true) {
               InlineMarker.mark(0);
               Object var13 = var4.hasNext(var2);
               InlineMarker.mark(1);
               if (!(Boolean)var13) {
                  Unit var12 = Unit.INSTANCE;
                  break;
               }

               if ((Boolean)var1.invoke(var4.next())) {
                  break label91;
               }
            }
         } catch (Throwable var10) {
            Throwable var11 = var10;

            try {
               throw var11;
            } finally {
               InlineMarker.finallyStart(1);
               ChannelsKt.cancelConsumed(var0, var10);
               InlineMarker.finallyEnd(1);
            }
         }

         InlineMarker.finallyStart(1);
         ChannelsKt.cancelConsumed(var0, (Throwable)null);
         InlineMarker.finallyEnd(1);
         return true;
      }

      InlineMarker.finallyStart(2);
      ChannelsKt.cancelConsumed(var0, (Throwable)null);
      InlineMarker.finallyEnd(2);
      return false;
   }

   public static final SelectClause1 onReceiveOrNull(ReceiveChannel var0) {
      if (var0 != null) {
         return var0.getOnReceiveOrNull();
      } else {
         throw new NullPointerException("null cannot be cast to non-null type kotlinx.coroutines.channels.ReceiveChannel<E?>");
      }
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object partition(ReceiveChannel var0, Function1 var1, Continuation var2) {
      Object var544;
      label4646: {
         if (var2 instanceof <undefinedtype>) {
            <undefinedtype> var4 = (<undefinedtype>)var2;
            if ((var4.label & Integer.MIN_VALUE) != 0) {
               var4.label += Integer.MIN_VALUE;
               var544 = var4;
               break label4646;
            }
         }

         var544 = new ContinuationImpl(var2) {
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            Object L$8;
            int label;
            Object result;

            public final Object invokeSuspend(Object var1) {
               this.result = var1;
               this.label |= Integer.MIN_VALUE;
               return ChannelsKt.partition((ReceiveChannel)null, (Function1)null, this);
            }
         };
      }

      Throwable var540;
      ReceiveChannel var545;
      label4641: {
         Throwable var10000;
         label4649: {
            Throwable var5;
            boolean var10001;
            ArrayList var541;
            ArrayList var547;
            label4639: {
               Object var13 = ((<undefinedtype>)var544).result;
               Object var546 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
               int var3 = ((<undefinedtype>)var544).label;
               Object var6;
               ReceiveChannel var7;
               Object var8;
               Function1 var9;
               ReceiveChannel var10;
               ReceiveChannel var12;
               Object var542;
               Throwable var548;
               ArrayList var549;
               ArrayList var551;
               ChannelIterator var554;
               if (var3 != 0) {
                  if (var3 != 1) {
                     throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                  }

                  ChannelIterator var14 = (ChannelIterator)((<undefinedtype>)var544).L$8;
                  var10 = (ReceiveChannel)((<undefinedtype>)var544).L$7;
                  var5 = (Throwable)((<undefinedtype>)var544).L$6;
                  var0 = (ReceiveChannel)((<undefinedtype>)var544).L$5;
                  var7 = (ReceiveChannel)((<undefinedtype>)var544).L$4;
                  ArrayList var11 = (ArrayList)((<undefinedtype>)var544).L$3;
                  var541 = (ArrayList)((<undefinedtype>)var544).L$2;
                  var9 = (Function1)((<undefinedtype>)var544).L$1;
                  var12 = (ReceiveChannel)((<undefinedtype>)var544).L$0;

                  try {
                     ResultKt.throwOnFailure(var13);
                  } catch (Throwable var518) {
                     var545 = var0;
                     var540 = var518;
                     break label4641;
                  }

                  var8 = var544;
                  var6 = var546;
                  var547 = var11;
                  var554 = var14;
                  var545 = var0;

                  try {
                     if (!(Boolean)var13) {
                        break label4639;
                     }
                  } catch (Throwable var535) {
                     var10000 = var535;
                     var10001 = false;
                     break label4649;
                  }

                  var545 = var0;

                  try {
                     var13 = var554.next();
                  } catch (Throwable var536) {
                     var10000 = var536;
                     var10001 = false;
                     break label4649;
                  }

                  var545 = var0;

                  label4651: {
                     label4652: {
                        try {
                           if (!(Boolean)var9.invoke(var13)) {
                              break label4652;
                           }
                        } catch (Throwable var537) {
                           var10000 = var537;
                           var10001 = false;
                           break label4649;
                        }

                        var545 = var0;

                        try {
                           var541.add(var13);
                           break label4651;
                        } catch (Throwable var538) {
                           var10000 = var538;
                           var10001 = false;
                           break label4649;
                        }
                     }

                     var545 = var0;

                     try {
                        var547.add(var13);
                     } catch (Throwable var539) {
                        var10000 = var539;
                        var10001 = false;
                        break label4649;
                     }
                  }

                  var13 = var6;
                  ArrayList var550 = var547;
                  var551 = var541;
                  var542 = var13;
                  var548 = var5;
                  var549 = var550;
               } else {
                  ResultKt.throwOnFailure(var13);
                  var551 = new ArrayList();
                  var549 = new ArrayList();
                  Throwable var552 = (Throwable)null;

                  try {
                     var554 = var0.iterator();
                  } catch (Throwable var517) {
                     var545 = var0;
                     var540 = var517;
                     break label4641;
                  }

                  var13 = null;
                  var7 = var0;
                  var9 = var1;
                  ReceiveChannel var543 = var0;
                  var0 = var0;
                  var8 = var546;
                  var10 = var543;
                  var12 = var543;
                  var548 = (Throwable)var13;
                  var542 = var8;
                  var8 = var544;
               }

               while(true) {
                  var545 = var0;

                  try {
                     ((<undefinedtype>)var8).L$0 = var12;
                  } catch (Throwable var529) {
                     var10000 = var529;
                     var10001 = false;
                     break label4649;
                  }

                  var545 = var0;

                  try {
                     ((<undefinedtype>)var8).L$1 = var9;
                  } catch (Throwable var528) {
                     var10000 = var528;
                     var10001 = false;
                     break label4649;
                  }

                  var545 = var0;

                  try {
                     ((<undefinedtype>)var8).L$2 = var551;
                  } catch (Throwable var527) {
                     var10000 = var527;
                     var10001 = false;
                     break label4649;
                  }

                  var545 = var0;

                  try {
                     ((<undefinedtype>)var8).L$3 = var549;
                  } catch (Throwable var526) {
                     var10000 = var526;
                     var10001 = false;
                     break label4649;
                  }

                  var545 = var0;

                  try {
                     ((<undefinedtype>)var8).L$4 = var7;
                  } catch (Throwable var525) {
                     var10000 = var525;
                     var10001 = false;
                     break label4649;
                  }

                  var545 = var0;

                  try {
                     ((<undefinedtype>)var8).L$5 = var0;
                  } catch (Throwable var524) {
                     var10000 = var524;
                     var10001 = false;
                     break label4649;
                  }

                  var545 = var0;

                  try {
                     ((<undefinedtype>)var8).L$6 = var548;
                  } catch (Throwable var523) {
                     var10000 = var523;
                     var10001 = false;
                     break label4649;
                  }

                  var545 = var0;

                  try {
                     ((<undefinedtype>)var8).L$7 = var10;
                  } catch (Throwable var522) {
                     var10000 = var522;
                     var10001 = false;
                     break label4649;
                  }

                  var545 = var0;

                  try {
                     ((<undefinedtype>)var8).L$8 = var554;
                  } catch (Throwable var521) {
                     var10000 = var521;
                     var10001 = false;
                     break label4649;
                  }

                  var545 = var0;

                  try {
                     ((<undefinedtype>)var8).label = 1;
                  } catch (Throwable var520) {
                     var10000 = var520;
                     var10001 = false;
                     break label4649;
                  }

                  var545 = var0;

                  try {
                     var13 = var554.hasNext((Continuation)var8);
                  } catch (Throwable var519) {
                     var10000 = var519;
                     var10001 = false;
                     break label4649;
                  }

                  if (var13 == var542) {
                     return var542;
                  }

                  ArrayList var555 = var549;
                  var5 = var548;
                  var544 = var542;
                  var541 = var551;
                  var547 = var555;
                  var6 = var544;
                  var545 = var0;

                  try {
                     if (!(Boolean)var13) {
                        break;
                     }
                  } catch (Throwable var534) {
                     var10000 = var534;
                     var10001 = false;
                     break label4649;
                  }

                  var545 = var0;

                  try {
                     var13 = var554.next();
                  } catch (Throwable var532) {
                     var10000 = var532;
                     var10001 = false;
                     break label4649;
                  }

                  var545 = var0;

                  label4655: {
                     label4656: {
                        try {
                           if (!(Boolean)var9.invoke(var13)) {
                              break label4656;
                           }
                        } catch (Throwable var533) {
                           var10000 = var533;
                           var10001 = false;
                           break label4649;
                        }

                        var545 = var0;

                        try {
                           var541.add(var13);
                           break label4655;
                        } catch (Throwable var531) {
                           var10000 = var531;
                           var10001 = false;
                           break label4649;
                        }
                     }

                     var545 = var0;

                     try {
                        var547.add(var13);
                     } catch (Throwable var530) {
                        var10000 = var530;
                        var10001 = false;
                        break label4649;
                     }
                  }

                  var13 = var6;
                  var551 = var541;
                  var542 = var13;
                  var548 = var5;
                  var549 = var555;
               }
            }

            var545 = var0;

            try {
               Unit var553 = Unit.INSTANCE;
            } catch (Throwable var516) {
               var10000 = var516;
               var10001 = false;
               break label4649;
            }

            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, var5);
            InlineMarker.finallyEnd(1);
            return new Pair(var541, var547);
         }

         var540 = var10000;
      }

      try {
         throw var540;
      } finally {
         InlineMarker.finallyStart(1);
         ChannelsKt.cancelConsumed(var545, var540);
         InlineMarker.finallyEnd(1);
      }
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   private static final Object partition$$forInline(ReceiveChannel var0, Function1 var1, Continuation var2) {
      ArrayList var4 = new ArrayList();
      ArrayList var3 = new ArrayList();
      Throwable var5 = (Throwable)null;

      label295: {
         Throwable var10000;
         label296: {
            ChannelIterator var39;
            boolean var10001;
            try {
               var39 = var0.iterator();
            } catch (Throwable var35) {
               var10000 = var35;
               var10001 = false;
               break label296;
            }

            label288:
            while(true) {
               Object var6;
               while(true) {
                  try {
                     InlineMarker.mark(0);
                     var6 = var39.hasNext(var2);
                     InlineMarker.mark(1);
                     if (!(Boolean)var6) {
                        break label288;
                     }

                     var6 = var39.next();
                     if (!(Boolean)var1.invoke(var6)) {
                        break;
                     }

                     var4.add(var6);
                  } catch (Throwable var36) {
                     var10000 = var36;
                     var10001 = false;
                     break label296;
                  }
               }

               try {
                  var3.add(var6);
               } catch (Throwable var34) {
                  var10000 = var34;
                  var10001 = false;
                  break label296;
               }
            }

            label273:
            try {
               Unit var37 = Unit.INSTANCE;
               break label295;
            } catch (Throwable var33) {
               var10000 = var33;
               var10001 = false;
               break label273;
            }
         }

         Throwable var38 = var10000;

         try {
            throw var38;
         } finally {
            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, var38);
            InlineMarker.finallyEnd(1);
         }
      }

      InlineMarker.finallyStart(1);
      ChannelsKt.cancelConsumed(var0, (Throwable)null);
      InlineMarker.finallyEnd(1);
      return new Pair(var4, var3);
   }

   public static final Object receiveOrNull(ReceiveChannel var0, Continuation var1) {
      if (var0 != null) {
         return var0.receiveOrNull(var1);
      } else {
         throw new NullPointerException("null cannot be cast to non-null type kotlinx.coroutines.channels.ReceiveChannel<E?>");
      }
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object reduce(ReceiveChannel var0, Function2 var1, Continuation var2) {
      Object var885;
      label7359: {
         if (var2 instanceof <undefinedtype>) {
            <undefinedtype> var4 = (<undefinedtype>)var2;
            if ((var4.label & Integer.MIN_VALUE) != 0) {
               var4.label += Integer.MIN_VALUE;
               var885 = var4;
               break label7359;
            }
         }

         var885 = new ContinuationImpl(var2) {
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            int label;
            Object result;

            public final Object invokeSuspend(Object var1) {
               this.result = var1;
               this.label |= Integer.MIN_VALUE;
               return ChannelsKt.reduce((ReceiveChannel)null, (Function2)null, this);
            }
         };
      }

      Object var11;
      Throwable var892;
      label7354: {
         Throwable var884;
         ReceiveChannel var887;
         label7353: {
            Throwable var10000;
            label7369: {
               boolean var10001;
               label7350: {
                  label7349: {
                     ReceiveChannel var883;
                     label7348: {
                        Object var10;
                        Object var12;
                        Object var886;
                        ChannelIterator var888;
                        ReceiveChannel var890;
                        ReceiveChannel var893;
                        Function2 var894;
                        ChannelIterator var895;
                        label7363: {
                           Object var9 = ((<undefinedtype>)var885).result;
                           var12 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                           int var3 = ((<undefinedtype>)var885).label;
                           Throwable var5;
                           ChannelIterator var6;
                           Function2 var7;
                           ReceiveChannel var8;
                           if (var3 != 0) {
                              if (var3 != 1) {
                                 if (var3 != 2) {
                                    throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                                 }

                                 var11 = ((<undefinedtype>)var885).L$6;
                                 var888 = (ChannelIterator)((<undefinedtype>)var885).L$5;
                                 var890 = (ReceiveChannel)((<undefinedtype>)var885).L$4;
                                 var892 = (Throwable)((<undefinedtype>)var885).L$3;
                                 var0 = (ReceiveChannel)((<undefinedtype>)var885).L$2;
                                 var894 = (Function2)((<undefinedtype>)var885).L$1;
                                 var893 = (ReceiveChannel)((<undefinedtype>)var885).L$0;
                                 var883 = var0;

                                 try {
                                    ResultKt.throwOnFailure(var9);
                                 } catch (Throwable var880) {
                                    var10000 = var880;
                                    var10001 = false;
                                    break label7348;
                                 }

                                 var10 = var9;
                                 var883 = var0;

                                 try {
                                    if (!(Boolean)var10) {
                                       break label7354;
                                    }
                                 } catch (Throwable var879) {
                                    var10000 = var879;
                                    var10001 = false;
                                    break label7348;
                                 }

                                 var883 = var0;

                                 try {
                                    var10 = var894.invoke(var11, var888.next());
                                 } catch (Throwable var878) {
                                    var10000 = var878;
                                    var10001 = false;
                                    break label7348;
                                 }

                                 var895 = var888;
                                 var886 = var10;
                                 break label7363;
                              }

                              var6 = (ChannelIterator)((<undefinedtype>)var885).L$5;
                              var883 = (ReceiveChannel)((<undefinedtype>)var885).L$4;
                              var5 = (Throwable)((<undefinedtype>)var885).L$3;
                              var0 = (ReceiveChannel)((<undefinedtype>)var885).L$2;
                              var7 = (Function2)((<undefinedtype>)var885).L$1;
                              var8 = (ReceiveChannel)((<undefinedtype>)var885).L$0;
                              var887 = var0;

                              try {
                                 ResultKt.throwOnFailure(var9);
                              } catch (Throwable var858) {
                                 var10000 = var858;
                                 var10001 = false;
                                 break label7369;
                              }
                           } else {
                              ResultKt.throwOnFailure(var9);
                              var5 = null;
                              Throwable var889 = (Throwable)null;
                              var887 = var0;

                              try {
                                 var6 = var0.iterator();
                              } catch (Throwable var877) {
                                 var10000 = var877;
                                 var10001 = false;
                                 break label7349;
                              }

                              var887 = var0;

                              try {
                                 ((<undefinedtype>)var885).L$0 = var0;
                              } catch (Throwable var876) {
                                 var10000 = var876;
                                 var10001 = false;
                                 break label7349;
                              }

                              var887 = var0;

                              try {
                                 ((<undefinedtype>)var885).L$1 = var1;
                              } catch (Throwable var875) {
                                 var10000 = var875;
                                 var10001 = false;
                                 break label7349;
                              }

                              var887 = var0;

                              try {
                                 ((<undefinedtype>)var885).L$2 = var0;
                              } catch (Throwable var874) {
                                 var10000 = var874;
                                 var10001 = false;
                                 break label7349;
                              }

                              var887 = var0;

                              try {
                                 ((<undefinedtype>)var885).L$3 = null;
                              } catch (Throwable var873) {
                                 var10000 = var873;
                                 var10001 = false;
                                 break label7349;
                              }

                              var887 = var0;

                              try {
                                 ((<undefinedtype>)var885).L$4 = var0;
                              } catch (Throwable var872) {
                                 var10000 = var872;
                                 var10001 = false;
                                 break label7349;
                              }

                              var887 = var0;

                              try {
                                 ((<undefinedtype>)var885).L$5 = var6;
                              } catch (Throwable var871) {
                                 var10000 = var871;
                                 var10001 = false;
                                 break label7349;
                              }

                              var887 = var0;

                              try {
                                 ((<undefinedtype>)var885).label = 1;
                              } catch (Throwable var870) {
                                 var10000 = var870;
                                 var10001 = false;
                                 break label7349;
                              }

                              var887 = var0;

                              try {
                                 var9 = var6.hasNext((Continuation)var885);
                              } catch (Throwable var869) {
                                 var10000 = var869;
                                 var10001 = false;
                                 break label7349;
                              }

                              if (var9 == var12) {
                                 return var12;
                              }

                              var7 = var1;
                              var883 = var0;
                              var8 = var0;
                              var0 = var0;
                           }

                           var887 = var0;

                           try {
                              if (!(Boolean)var9) {
                                 break label7350;
                              }
                           } catch (Throwable var859) {
                              var10000 = var859;
                              var10001 = false;
                              break label7369;
                           }

                           var887 = var0;

                           try {
                              var9 = var6.next();
                           } catch (Throwable var855) {
                              var10000 = var855;
                              var10001 = false;
                              break label7369;
                           }

                           var887 = var8;
                           var894 = var7;
                           ReceiveChannel var896 = var883;
                           var886 = var9;
                           var895 = var6;
                           var893 = var887;
                           var892 = var5;
                           var890 = var896;
                        }

                        while(true) {
                           var887 = var0;

                           try {
                              ((<undefinedtype>)var885).L$0 = var893;
                           } catch (Throwable var868) {
                              var10000 = var868;
                              var10001 = false;
                              break label7349;
                           }

                           var887 = var0;

                           try {
                              ((<undefinedtype>)var885).L$1 = var894;
                           } catch (Throwable var867) {
                              var10000 = var867;
                              var10001 = false;
                              break label7349;
                           }

                           var887 = var0;

                           try {
                              ((<undefinedtype>)var885).L$2 = var0;
                           } catch (Throwable var866) {
                              var10000 = var866;
                              var10001 = false;
                              break label7349;
                           }

                           var887 = var0;

                           try {
                              ((<undefinedtype>)var885).L$3 = var892;
                           } catch (Throwable var865) {
                              var10000 = var865;
                              var10001 = false;
                              break label7349;
                           }

                           var887 = var0;

                           try {
                              ((<undefinedtype>)var885).L$4 = var890;
                           } catch (Throwable var864) {
                              var10000 = var864;
                              var10001 = false;
                              break label7349;
                           }

                           var887 = var0;

                           try {
                              ((<undefinedtype>)var885).L$5 = var895;
                           } catch (Throwable var863) {
                              var10000 = var863;
                              var10001 = false;
                              break label7349;
                           }

                           var887 = var0;

                           try {
                              ((<undefinedtype>)var885).L$6 = var886;
                           } catch (Throwable var862) {
                              var10000 = var862;
                              var10001 = false;
                              break label7349;
                           }

                           var887 = var0;

                           try {
                              ((<undefinedtype>)var885).label = 2;
                           } catch (Throwable var861) {
                              var10000 = var861;
                              var10001 = false;
                              break label7349;
                           }

                           var887 = var0;

                           try {
                              var10 = var895.hasNext((Continuation)var885);
                           } catch (Throwable var860) {
                              var10000 = var860;
                              var10001 = false;
                              break label7349;
                           }

                           if (var10 == var12) {
                              return var12;
                           }

                           var888 = var895;
                           var11 = var886;
                           var883 = var0;

                           try {
                              if (!(Boolean)var10) {
                                 break label7354;
                              }
                           } catch (Throwable var881) {
                              var10000 = var881;
                              var10001 = false;
                              break;
                           }

                           var883 = var0;

                           try {
                              var10 = var894.invoke(var11, var888.next());
                           } catch (Throwable var882) {
                              var10000 = var882;
                              var10001 = false;
                              break;
                           }

                           var895 = var895;
                           var886 = var10;
                        }
                     }

                     var884 = var10000;
                     var887 = var883;
                     break label7353;
                  }

                  var884 = var10000;
                  break label7353;
               }

               var887 = var0;

               UnsupportedOperationException var891;
               try {
                  var891 = new UnsupportedOperationException;
               } catch (Throwable var857) {
                  var10000 = var857;
                  var10001 = false;
                  break label7369;
               }

               var887 = var0;

               try {
                  var891.<init>("Empty channel can't be reduced.");
               } catch (Throwable var856) {
                  var10000 = var856;
                  var10001 = false;
                  break label7369;
               }

               var887 = var0;

               label7229:
               try {
                  throw (Throwable)var891;
               } catch (Throwable var854) {
                  var10000 = var854;
                  var10001 = false;
                  break label7229;
               }
            }

            var884 = var10000;
         }

         try {
            throw var884;
         } finally {
            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var887, var884);
            InlineMarker.finallyEnd(1);
         }
      }

      InlineMarker.finallyStart(2);
      ChannelsKt.cancelConsumed(var0, var892);
      InlineMarker.finallyEnd(2);
      return var11;
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   private static final Object reduce$$forInline(ReceiveChannel var0, Function2 var1, Continuation var2) {
      Throwable var3 = (Throwable)null;

      Throwable var10000;
      label212: {
         ChannelIterator var4;
         boolean var10001;
         Object var28;
         label211: {
            try {
               var4 = var0.iterator();
               InlineMarker.mark(0);
               var28 = var4.hasNext(var2);
               InlineMarker.mark(1);
               if ((Boolean)var28) {
                  var28 = var4.next();
                  break label211;
               }
            } catch (Throwable var25) {
               var10000 = var25;
               var10001 = false;
               break label212;
            }

            try {
               UnsupportedOperationException var26 = new UnsupportedOperationException("Empty channel can't be reduced.");
               throw (Throwable)var26;
            } catch (Throwable var24) {
               var10000 = var24;
               var10001 = false;
               break label212;
            }
         }

         while(true) {
            try {
               InlineMarker.mark(0);
               Object var5 = var4.hasNext(var2);
               InlineMarker.mark(1);
               if ((Boolean)var5) {
                  var28 = var1.invoke(var28, var4.next());
                  continue;
               }
            } catch (Throwable var23) {
               var10000 = var23;
               var10001 = false;
               break;
            }

            InlineMarker.finallyStart(2);
            ChannelsKt.cancelConsumed(var0, (Throwable)null);
            InlineMarker.finallyEnd(2);
            return var28;
         }
      }

      Throwable var27 = var10000;

      try {
         throw var27;
      } finally {
         InlineMarker.finallyStart(1);
         ChannelsKt.cancelConsumed(var0, var27);
         InlineMarker.finallyEnd(1);
      }
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object reduceIndexed(ReceiveChannel var0, Function3 var1, Continuation var2) {
      Object var1100;
      label9108: {
         if (var2 instanceof <undefinedtype>) {
            <undefinedtype> var4 = (<undefinedtype>)var2;
            if ((var4.label & Integer.MIN_VALUE) != 0) {
               var4.label += Integer.MIN_VALUE;
               var1100 = var4;
               break label9108;
            }
         }

         var1100 = new ContinuationImpl(var2) {
            int I$0;
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            int label;
            Object result;

            public final Object invokeSuspend(Object var1) {
               this.result = var1;
               this.label |= Integer.MIN_VALUE;
               return ChannelsKt.reduceIndexed((ReceiveChannel)null, (Function3)null, this);
            }
         };
      }

      Throwable var1099;
      ReceiveChannel var1103;
      label9103: {
         Throwable var10000;
         label9102: {
            Throwable var6;
            Object var10;
            label9117: {
               boolean var10001;
               label9099: {
                  label9098: {
                     ReceiveChannel var1098;
                     label9097: {
                        Object var9 = ((<undefinedtype>)var1100).result;
                        Object var12 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                        int var3 = ((<undefinedtype>)var1100).label;
                        ReceiveChannel var5;
                        ChannelIterator var7;
                        ReceiveChannel var8;
                        Object var11;
                        Object var1101;
                        Function3 var1102;
                        ChannelIterator var1104;
                        ReceiveChannel var1107;
                        Integer var1109;
                        Function3 var1110;
                        if (var3 != 0) {
                           if (var3 != 1) {
                              if (var3 != 2) {
                                 throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                              }

                              var10 = ((<undefinedtype>)var1100).L$6;
                              var3 = ((<undefinedtype>)var1100).I$0;
                              var7 = (ChannelIterator)((<undefinedtype>)var1100).L$5;
                              var5 = (ReceiveChannel)((<undefinedtype>)var1100).L$4;
                              var6 = (Throwable)((<undefinedtype>)var1100).L$3;
                              var0 = (ReceiveChannel)((<undefinedtype>)var1100).L$2;
                              var1102 = (Function3)((<undefinedtype>)var1100).L$1;
                              var8 = (ReceiveChannel)((<undefinedtype>)var1100).L$0;
                              var1098 = var0;

                              try {
                                 ResultKt.throwOnFailure(var9);
                              } catch (Throwable var1092) {
                                 var10000 = var1092;
                                 var10001 = false;
                                 break label9097;
                              }

                              var11 = var9;
                              var1098 = var0;

                              try {
                                 if (!(Boolean)var11) {
                                    break label9117;
                                 }
                              } catch (Throwable var1091) {
                                 var10000 = var1091;
                                 var10001 = false;
                                 break label9097;
                              }

                              var1098 = var0;

                              try {
                                 var1109 = Boxing.boxInt(var3);
                              } catch (Throwable var1090) {
                                 var10000 = var1090;
                                 var10001 = false;
                                 break label9097;
                              }

                              ++var3;
                              var1098 = var0;

                              try {
                                 var10 = var1102.invoke(var1109, var10, var7.next());
                              } catch (Throwable var1089) {
                                 var10000 = var1089;
                                 var10001 = false;
                                 break label9097;
                              }

                              var1110 = var1102;
                              var1101 = var10;
                           } else {
                              var1104 = (ChannelIterator)((<undefinedtype>)var1100).L$5;
                              var1098 = (ReceiveChannel)((<undefinedtype>)var1100).L$4;
                              var6 = (Throwable)((<undefinedtype>)var1100).L$3;
                              var0 = (ReceiveChannel)((<undefinedtype>)var1100).L$2;
                              Function3 var1108 = (Function3)((<undefinedtype>)var1100).L$1;
                              var1107 = (ReceiveChannel)((<undefinedtype>)var1100).L$0;
                              var1103 = var0;

                              try {
                                 ResultKt.throwOnFailure(var9);
                              } catch (Throwable var1068) {
                                 var10000 = var1068;
                                 var10001 = false;
                                 break label9102;
                              }

                              var1103 = var0;

                              try {
                                 if (!(Boolean)var9) {
                                    break label9099;
                                 }
                              } catch (Throwable var1093) {
                                 var10000 = var1093;
                                 var10001 = false;
                                 break label9102;
                              }

                              var1103 = var0;

                              try {
                                 var10 = var1104.next();
                              } catch (Throwable var1094) {
                                 var10000 = var1094;
                                 var10001 = false;
                                 break label9102;
                              }

                              var1110 = var1108;
                              var8 = var1107;
                              var7 = var1104;
                              var5 = var1098;
                              var3 = 1;
                              var1101 = var10;
                           }
                        } else {
                           ResultKt.throwOnFailure(var9);
                           var6 = null;
                           Throwable var1105 = (Throwable)null;
                           var1103 = var0;

                           try {
                              var1104 = var0.iterator();
                           } catch (Throwable var1088) {
                              var10000 = var1088;
                              var10001 = false;
                              break label9098;
                           }

                           var1103 = var0;

                           try {
                              ((<undefinedtype>)var1100).L$0 = var0;
                           } catch (Throwable var1087) {
                              var10000 = var1087;
                              var10001 = false;
                              break label9098;
                           }

                           var1103 = var0;

                           try {
                              ((<undefinedtype>)var1100).L$1 = var1;
                           } catch (Throwable var1086) {
                              var10000 = var1086;
                              var10001 = false;
                              break label9098;
                           }

                           var1103 = var0;

                           try {
                              ((<undefinedtype>)var1100).L$2 = var0;
                           } catch (Throwable var1085) {
                              var10000 = var1085;
                              var10001 = false;
                              break label9098;
                           }

                           var1103 = var0;

                           try {
                              ((<undefinedtype>)var1100).L$3 = null;
                           } catch (Throwable var1084) {
                              var10000 = var1084;
                              var10001 = false;
                              break label9098;
                           }

                           var1103 = var0;

                           try {
                              ((<undefinedtype>)var1100).L$4 = var0;
                           } catch (Throwable var1083) {
                              var10000 = var1083;
                              var10001 = false;
                              break label9098;
                           }

                           var1103 = var0;

                           try {
                              ((<undefinedtype>)var1100).L$5 = var1104;
                           } catch (Throwable var1082) {
                              var10000 = var1082;
                              var10001 = false;
                              break label9098;
                           }

                           var1103 = var0;

                           try {
                              ((<undefinedtype>)var1100).label = 1;
                           } catch (Throwable var1081) {
                              var10000 = var1081;
                              var10001 = false;
                              break label9098;
                           }

                           var1103 = var0;

                           try {
                              var9 = var1104.hasNext((Continuation)var1100);
                           } catch (Throwable var1080) {
                              var10000 = var1080;
                              var10001 = false;
                              break label9098;
                           }

                           if (var9 == var12) {
                              return var12;
                           }

                           var1098 = var0;
                           var1107 = var0;
                           var0 = var0;
                           var1103 = var0;

                           try {
                              if (!(Boolean)var9) {
                                 break label9099;
                              }
                           } catch (Throwable var1069) {
                              var10000 = var1069;
                              var10001 = false;
                              break label9102;
                           }

                           var1103 = var0;

                           try {
                              var10 = var1104.next();
                           } catch (Throwable var1065) {
                              var10000 = var1065;
                              var10001 = false;
                              break label9102;
                           }

                           var1110 = var1;
                           var8 = var1107;
                           var7 = var1104;
                           var5 = var1098;
                           var3 = 1;
                           var1101 = var10;
                        }

                        while(true) {
                           var1103 = var0;

                           try {
                              ((<undefinedtype>)var1100).L$0 = var8;
                           } catch (Throwable var1079) {
                              var10000 = var1079;
                              var10001 = false;
                              break label9098;
                           }

                           var1103 = var0;

                           try {
                              ((<undefinedtype>)var1100).L$1 = var1110;
                           } catch (Throwable var1078) {
                              var10000 = var1078;
                              var10001 = false;
                              break label9098;
                           }

                           var1103 = var0;

                           try {
                              ((<undefinedtype>)var1100).L$2 = var0;
                           } catch (Throwable var1077) {
                              var10000 = var1077;
                              var10001 = false;
                              break label9098;
                           }

                           var1103 = var0;

                           try {
                              ((<undefinedtype>)var1100).L$3 = var6;
                           } catch (Throwable var1076) {
                              var10000 = var1076;
                              var10001 = false;
                              break label9098;
                           }

                           var1103 = var0;

                           try {
                              ((<undefinedtype>)var1100).L$4 = var5;
                           } catch (Throwable var1075) {
                              var10000 = var1075;
                              var10001 = false;
                              break label9098;
                           }

                           var1103 = var0;

                           try {
                              ((<undefinedtype>)var1100).L$5 = var7;
                           } catch (Throwable var1074) {
                              var10000 = var1074;
                              var10001 = false;
                              break label9098;
                           }

                           var1103 = var0;

                           try {
                              ((<undefinedtype>)var1100).I$0 = var3;
                           } catch (Throwable var1073) {
                              var10000 = var1073;
                              var10001 = false;
                              break label9098;
                           }

                           var1103 = var0;

                           try {
                              ((<undefinedtype>)var1100).L$6 = var1101;
                           } catch (Throwable var1072) {
                              var10000 = var1072;
                              var10001 = false;
                              break label9098;
                           }

                           var1103 = var0;

                           try {
                              ((<undefinedtype>)var1100).label = 2;
                           } catch (Throwable var1071) {
                              var10000 = var1071;
                              var10001 = false;
                              break label9098;
                           }

                           var1103 = var0;

                           try {
                              var11 = var7.hasNext((Continuation)var1100);
                           } catch (Throwable var1070) {
                              var10000 = var1070;
                              var10001 = false;
                              break label9098;
                           }

                           if (var11 == var12) {
                              return var12;
                           }

                           var10 = var1101;
                           var1102 = var1110;
                           var1098 = var0;

                           try {
                              if (!(Boolean)var11) {
                                 break label9117;
                              }
                           } catch (Throwable var1095) {
                              var10000 = var1095;
                              var10001 = false;
                              break;
                           }

                           var1098 = var0;

                           try {
                              var1109 = Boxing.boxInt(var3);
                           } catch (Throwable var1096) {
                              var10000 = var1096;
                              var10001 = false;
                              break;
                           }

                           ++var3;
                           var1098 = var0;

                           try {
                              var10 = var1102.invoke(var1109, var10, var7.next());
                           } catch (Throwable var1097) {
                              var10000 = var1097;
                              var10001 = false;
                              break;
                           }

                           var1110 = var1110;
                           var1101 = var10;
                        }
                     }

                     var1099 = var10000;
                     var1103 = var1098;
                     break label9103;
                  }

                  var1099 = var10000;
                  break label9103;
               }

               var1103 = var0;

               UnsupportedOperationException var1106;
               try {
                  var1106 = new UnsupportedOperationException;
               } catch (Throwable var1067) {
                  var10000 = var1067;
                  var10001 = false;
                  break label9102;
               }

               var1103 = var0;

               try {
                  var1106.<init>("Empty channel can't be reduced.");
               } catch (Throwable var1066) {
                  var10000 = var1066;
                  var10001 = false;
                  break label9102;
               }

               var1103 = var0;

               try {
                  throw (Throwable)var1106;
               } catch (Throwable var1064) {
                  var10000 = var1064;
                  var10001 = false;
                  break label9102;
               }
            }

            InlineMarker.finallyStart(2);
            ChannelsKt.cancelConsumed(var0, var6);
            InlineMarker.finallyEnd(2);
            return var10;
         }

         var1099 = var10000;
      }

      try {
         throw var1099;
      } finally {
         InlineMarker.finallyStart(1);
         ChannelsKt.cancelConsumed(var1103, var1099);
         InlineMarker.finallyEnd(1);
      }
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   private static final Object reduceIndexed$$forInline(ReceiveChannel var0, Function3 var1, Continuation var2) {
      Throwable var5 = (Throwable)null;

      Throwable var10000;
      label304: {
         ChannelIterator var6;
         Object var40;
         boolean var10001;
         label299: {
            try {
               var6 = var0.iterator();
               InlineMarker.mark(0);
               var40 = var6.hasNext(var2);
               InlineMarker.mark(1);
               if ((Boolean)var40) {
                  var40 = var6.next();
                  break label299;
               }
            } catch (Throwable var37) {
               var10000 = var37;
               var10001 = false;
               break label304;
            }

            try {
               UnsupportedOperationException var38 = new UnsupportedOperationException("Empty channel can't be reduced.");
               throw (Throwable)var38;
            } catch (Throwable var36) {
               var10000 = var36;
               var10001 = false;
               break label304;
            }
         }

         int var3 = 1;

         while(true) {
            int var4 = var3;

            label286: {
               try {
                  InlineMarker.mark(0);
                  Object var7 = var6.hasNext(var2);
                  InlineMarker.mark(1);
                  if ((Boolean)var7) {
                     break label286;
                  }
               } catch (Throwable var35) {
                  var10000 = var35;
                  var10001 = false;
                  break;
               }

               InlineMarker.finallyStart(2);
               ChannelsKt.cancelConsumed(var0, (Throwable)null);
               InlineMarker.finallyEnd(2);
               return var40;
            }

            ++var3;

            try {
               var40 = var1.invoke(var4, var40, var6.next());
            } catch (Throwable var34) {
               var10000 = var34;
               var10001 = false;
               break;
            }
         }
      }

      Throwable var39 = var10000;

      try {
         throw var39;
      } finally {
         InlineMarker.finallyStart(1);
         ChannelsKt.cancelConsumed(var0, var39);
         InlineMarker.finallyEnd(1);
      }
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final ReceiveChannel requireNoNulls(ReceiveChannel var0) {
      return ChannelsKt.map$default(var0, (CoroutineContext)null, (Function2)(new Function2(var0, (Continuation)null) {
         final ReceiveChannel $this_requireNoNulls;
         int label;
         private Object p$0;

         {
            this.$this_requireNoNulls = var1;
         }

         public final Continuation create(Object var1, Continuation var2) {
            Function2 var3 = new <anonymous constructor>(this.$this_requireNoNulls, var2);
            var3.p$0 = var1;
            return var3;
         }

         public final Object invoke(Object var1, Object var2) {
            return ((<undefinedtype>)this.create(var1, (Continuation)var2)).invokeSuspend(Unit.INSTANCE);
         }

         public final Object invokeSuspend(Object var1) {
            IntrinsicsKt.getCOROUTINE_SUSPENDED();
            if (this.label == 0) {
               ResultKt.throwOnFailure(var1);
               var1 = this.p$0;
               if (var1 != null) {
                  return var1;
               } else {
                  throw (Throwable)(new IllegalArgumentException("null element found in " + this.$this_requireNoNulls + '.'));
               }
            } else {
               throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
            }
         }
      }), 1, (Object)null);
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object single(ReceiveChannel var0, Continuation var1) {
      Object var5;
      label4233: {
         if (var1 instanceof <undefinedtype>) {
            var5 = (<undefinedtype>)var1;
            if ((((<undefinedtype>)var5).label & Integer.MIN_VALUE) != 0) {
               ((<undefinedtype>)var5).label += Integer.MIN_VALUE;
               break label4233;
            }
         }

         var5 = new ContinuationImpl(var1) {
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            int label;
            Object result;

            public final Object invokeSuspend(Object var1) {
               this.result = var1;
               this.label |= Integer.MIN_VALUE;
               return ChannelsKt.single((ReceiveChannel)null, this);
            }
         };
      }

      ReceiveChannel var475;
      Throwable var477;
      label4226: {
         Throwable var4;
         Throwable var10000;
         label4225: {
            label4236: {
               boolean var10001;
               label4237: {
                  Object var6;
                  label4238: {
                     var6 = ((<undefinedtype>)var5).result;
                     Object var11 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                     int var2 = ((<undefinedtype>)var5).label;
                     ReceiveChannel var7;
                     ReceiveChannel var8;
                     ChannelIterator var9;
                     if (var2 != 0) {
                        if (var2 != 1) {
                           if (var2 != 2) {
                              throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                           }

                           Object var480 = ((<undefinedtype>)var5).L$5;
                           ChannelIterator var474 = (ChannelIterator)((<undefinedtype>)var5).L$4;
                           var0 = (ReceiveChannel)((<undefinedtype>)var5).L$3;
                           var4 = (Throwable)((<undefinedtype>)var5).L$2;
                           var475 = (ReceiveChannel)((<undefinedtype>)var5).L$1;
                           var0 = (ReceiveChannel)((<undefinedtype>)var5).L$0;
                           var0 = var475;

                           try {
                              ResultKt.throwOnFailure(var6);
                           } catch (Throwable var462) {
                              var10000 = var462;
                              var10001 = false;
                              break label4225;
                           }

                           var5 = var480;
                           break label4238;
                        }

                        var9 = (ChannelIterator)((<undefinedtype>)var5).L$4;
                        var7 = (ReceiveChannel)((<undefinedtype>)var5).L$3;
                        var4 = (Throwable)((<undefinedtype>)var5).L$2;
                        var0 = (ReceiveChannel)((<undefinedtype>)var5).L$1;
                        var8 = (ReceiveChannel)((<undefinedtype>)var5).L$0;
                        var475 = var0;

                        try {
                           ResultKt.throwOnFailure(var6);
                        } catch (Throwable var472) {
                           var10000 = var472;
                           var10001 = false;
                           break label4236;
                        }
                     } else {
                        ResultKt.throwOnFailure(var6);
                        Throwable var476 = (Throwable)null;

                        try {
                           var9 = var0.iterator();
                           ((<undefinedtype>)var5).L$0 = var0;
                           ((<undefinedtype>)var5).L$1 = var0;
                           ((<undefinedtype>)var5).L$2 = null;
                           ((<undefinedtype>)var5).L$3 = var0;
                           ((<undefinedtype>)var5).L$4 = var9;
                           ((<undefinedtype>)var5).label = 1;
                           var6 = var9.hasNext((Continuation)var5);
                        } catch (Throwable var456) {
                           var475 = var0;
                           var477 = var456;
                           break label4226;
                        }

                        if (var6 == var11) {
                           return var11;
                        }

                        var7 = var0;
                        var4 = null;
                        var8 = var0;
                     }

                     var475 = var0;

                     try {
                        if (!(Boolean)var6) {
                           break label4237;
                        }
                     } catch (Throwable var473) {
                        var10000 = var473;
                        var10001 = false;
                        break label4236;
                     }

                     var475 = var0;

                     Object var10;
                     try {
                        var10 = var9.next();
                     } catch (Throwable var471) {
                        var10000 = var471;
                        var10001 = false;
                        break label4236;
                     }

                     var475 = var0;

                     try {
                        ((<undefinedtype>)var5).L$0 = var8;
                     } catch (Throwable var470) {
                        var10000 = var470;
                        var10001 = false;
                        break label4236;
                     }

                     var475 = var0;

                     try {
                        ((<undefinedtype>)var5).L$1 = var0;
                     } catch (Throwable var469) {
                        var10000 = var469;
                        var10001 = false;
                        break label4236;
                     }

                     var475 = var0;

                     try {
                        ((<undefinedtype>)var5).L$2 = var4;
                     } catch (Throwable var468) {
                        var10000 = var468;
                        var10001 = false;
                        break label4236;
                     }

                     var475 = var0;

                     try {
                        ((<undefinedtype>)var5).L$3 = var7;
                     } catch (Throwable var467) {
                        var10000 = var467;
                        var10001 = false;
                        break label4236;
                     }

                     var475 = var0;

                     try {
                        ((<undefinedtype>)var5).L$4 = var9;
                     } catch (Throwable var466) {
                        var10000 = var466;
                        var10001 = false;
                        break label4236;
                     }

                     var475 = var0;

                     try {
                        ((<undefinedtype>)var5).L$5 = var10;
                     } catch (Throwable var465) {
                        var10000 = var465;
                        var10001 = false;
                        break label4236;
                     }

                     var475 = var0;

                     try {
                        ((<undefinedtype>)var5).label = 2;
                     } catch (Throwable var464) {
                        var10000 = var464;
                        var10001 = false;
                        break label4236;
                     }

                     var475 = var0;

                     try {
                        var6 = var9.hasNext((Continuation)var5);
                     } catch (Throwable var463) {
                        var10000 = var463;
                        var10001 = false;
                        break label4236;
                     }

                     if (var6 == var11) {
                        return var11;
                     }

                     var5 = var10;
                     var475 = var0;
                  }

                  var0 = var475;

                  boolean var3;
                  try {
                     var3 = (Boolean)var6;
                  } catch (Throwable var459) {
                     var10000 = var459;
                     var10001 = false;
                     break label4225;
                  }

                  if (!var3) {
                     ChannelsKt.cancelConsumed(var475, var4);
                     return var5;
                  }

                  var0 = var475;

                  IllegalArgumentException var478;
                  try {
                     var478 = new IllegalArgumentException;
                  } catch (Throwable var458) {
                     var10000 = var458;
                     var10001 = false;
                     break label4225;
                  }

                  var0 = var475;

                  try {
                     var478.<init>("ReceiveChannel has more than one element.");
                  } catch (Throwable var457) {
                     var10000 = var457;
                     var10001 = false;
                     break label4225;
                  }

                  var0 = var475;

                  try {
                     throw (Throwable)var478;
                  } catch (Throwable var454) {
                     var10000 = var454;
                     var10001 = false;
                     break label4225;
                  }
               }

               var475 = var0;

               NoSuchElementException var479;
               try {
                  var479 = new NoSuchElementException;
               } catch (Throwable var461) {
                  var10000 = var461;
                  var10001 = false;
                  break label4236;
               }

               var475 = var0;

               try {
                  var479.<init>("ReceiveChannel is empty.");
               } catch (Throwable var460) {
                  var10000 = var460;
                  var10001 = false;
                  break label4236;
               }

               var475 = var0;

               label4147:
               try {
                  throw (Throwable)var479;
               } catch (Throwable var455) {
                  var10000 = var455;
                  var10001 = false;
                  break label4147;
               }
            }

            var477 = var10000;
            break label4226;
         }

         var4 = var10000;
         var475 = var0;
         var477 = var4;
      }

      try {
         throw var477;
      } finally {
         ChannelsKt.cancelConsumed(var475, var477);
      }
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object single(ReceiveChannel var0, Function1 var1, Continuation var2) {
      <undefinedtype> var4;
      Object var893;
      label7710: {
         if (var2 instanceof <undefinedtype>) {
            var4 = (<undefinedtype>)var2;
            if ((var4.label & Integer.MIN_VALUE) != 0) {
               var4.label += Integer.MIN_VALUE;
               var893 = var4;
               break label7710;
            }
         }

         var893 = new ContinuationImpl(var2) {
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            Object L$8;
            int label;
            Object result;

            public final Object invokeSuspend(Object var1) {
               this.result = var1;
               this.label |= Integer.MIN_VALUE;
               return ChannelsKt.single((ReceiveChannel)null, (Function1)null, this);
            }
         };
      }

      Throwable var890;
      ReceiveChannel var892;
      label7704: {
         Throwable var10000;
         label7703: {
            Object var13 = ((<undefinedtype>)var893).result;
            Object var895 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
            int var3 = ((<undefinedtype>)var893).label;
            Ref.BooleanRef var896;
            Ref.BooleanRef var898;
            Ref.ObjectRef var899;
            Object var900;
            Throwable var5;
            Object var6;
            ReceiveChannel var7;
            Function1 var8;
            ChannelIterator var904;
            ReceiveChannel var9;
            Ref.BooleanRef var905;
            Object var10;
            ReceiveChannel var11;
            boolean var10001;
            Ref.ObjectRef var891;
            Ref.ObjectRef var894;
            if (var3 != 0) {
               if (var3 != 1) {
                  throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
               }

               ChannelIterator var14 = (ChannelIterator)((<undefinedtype>)var893).L$8;
               var9 = (ReceiveChannel)((<undefinedtype>)var893).L$7;
               var5 = (Throwable)((<undefinedtype>)var893).L$6;
               var0 = (ReceiveChannel)((<undefinedtype>)var893).L$5;
               var7 = (ReceiveChannel)((<undefinedtype>)var893).L$4;
               Ref.BooleanRef var12 = (Ref.BooleanRef)((<undefinedtype>)var893).L$3;
               var891 = (Ref.ObjectRef)((<undefinedtype>)var893).L$2;
               var8 = (Function1)((<undefinedtype>)var893).L$1;
               var11 = (ReceiveChannel)((<undefinedtype>)var893).L$0;

               try {
                  ResultKt.throwOnFailure(var13);
               } catch (Throwable var858) {
                  var892 = var0;
                  var890 = var858;
                  break label7704;
               }

               var10 = var893;
               var6 = var895;
               var896 = var12;
               var894 = var891;
               var904 = var14;
            } else {
               ResultKt.throwOnFailure(var13);
               var899 = new Ref.ObjectRef();
               var899.element = null;
               var898 = new Ref.BooleanRef();
               var898.element = false;
               Throwable var903 = (Throwable)null;

               try {
                  var904 = var0.iterator();
               } catch (Throwable var859) {
                  var892 = var0;
                  var890 = var859;
                  break label7704;
               }

               var13 = null;
               var7 = var0;
               var8 = var1;
               var10 = var893;
               var892 = var0;
               var0 = var0;
               var893 = var895;
               var9 = var892;
               var11 = var892;
               var4 = (<undefinedtype>)var13;
               var892 = var892;

               try {
                  ((<undefinedtype>)var10).L$0 = var11;
               } catch (Throwable var879) {
                  var10000 = var879;
                  var10001 = false;
                  break label7703;
               }

               var892 = var0;

               try {
                  ((<undefinedtype>)var10).L$1 = var8;
               } catch (Throwable var880) {
                  var10000 = var880;
                  var10001 = false;
                  break label7703;
               }

               var892 = var0;

               try {
                  ((<undefinedtype>)var10).L$2 = var899;
               } catch (Throwable var881) {
                  var10000 = var881;
                  var10001 = false;
                  break label7703;
               }

               var892 = var0;

               try {
                  ((<undefinedtype>)var10).L$3 = var898;
               } catch (Throwable var882) {
                  var10000 = var882;
                  var10001 = false;
                  break label7703;
               }

               var892 = var0;

               try {
                  ((<undefinedtype>)var10).L$4 = var7;
               } catch (Throwable var883) {
                  var10000 = var883;
                  var10001 = false;
                  break label7703;
               }

               var892 = var0;

               try {
                  ((<undefinedtype>)var10).L$5 = var0;
               } catch (Throwable var884) {
                  var10000 = var884;
                  var10001 = false;
                  break label7703;
               }

               var892 = var0;

               try {
                  ((<undefinedtype>)var10).L$6 = var4;
               } catch (Throwable var885) {
                  var10000 = var885;
                  var10001 = false;
                  break label7703;
               }

               var892 = var0;

               try {
                  ((<undefinedtype>)var10).L$7 = var9;
               } catch (Throwable var886) {
                  var10000 = var886;
                  var10001 = false;
                  break label7703;
               }

               var892 = var0;

               try {
                  ((<undefinedtype>)var10).L$8 = var904;
               } catch (Throwable var887) {
                  var10000 = var887;
                  var10001 = false;
                  break label7703;
               }

               var892 = var0;

               try {
                  ((<undefinedtype>)var10).label = 1;
               } catch (Throwable var888) {
                  var10000 = var888;
                  var10001 = false;
                  break label7703;
               }

               var892 = var0;

               try {
                  var13 = var904.hasNext((Continuation)var10);
               } catch (Throwable var889) {
                  var10000 = var889;
                  var10001 = false;
                  break label7703;
               }

               if (var13 == var893) {
                  return var893;
               }

               var905 = var898;
               var5 = var4;
               var900 = var893;
               var894 = var899;
               var896 = var905;
               var6 = var900;
            }

            while(true) {
               var892 = var0;

               label7716: {
                  try {
                     if ((Boolean)var13) {
                        break label7716;
                     }
                  } catch (Throwable var878) {
                     var10000 = var878;
                     var10001 = false;
                     break;
                  }

                  var892 = var0;

                  try {
                     Unit var902 = Unit.INSTANCE;
                  } catch (Throwable var857) {
                     var10000 = var857;
                     var10001 = false;
                     break;
                  }

                  InlineMarker.finallyStart(1);
                  ChannelsKt.cancelConsumed(var0, var5);
                  InlineMarker.finallyEnd(1);
                  if (var896.element) {
                     return var894.element;
                  }

                  throw (Throwable)(new NoSuchElementException("ReceiveChannel contains no element matching the predicate."));
               }

               var892 = var0;

               try {
                  var13 = var904.next();
               } catch (Throwable var875) {
                  var10000 = var875;
                  var10001 = false;
                  break;
               }

               var892 = var0;

               label7723: {
                  label7718: {
                     try {
                        if (!(Boolean)var8.invoke(var13)) {
                           break label7718;
                        }
                     } catch (Throwable var877) {
                        var10000 = var877;
                        var10001 = false;
                        break;
                     }

                     var892 = var0;

                     try {
                        if (var896.element) {
                           break label7723;
                        }
                     } catch (Throwable var876) {
                        var10000 = var876;
                        var10001 = false;
                        break;
                     }

                     var892 = var0;

                     try {
                        var894.element = var13;
                     } catch (Throwable var874) {
                        var10000 = var874;
                        var10001 = false;
                        break;
                     }

                     var892 = var0;

                     try {
                        var896.element = true;
                     } catch (Throwable var873) {
                        var10000 = var873;
                        var10001 = false;
                        break;
                     }
                  }

                  Throwable var906 = var5;
                  var898 = var896;
                  var891 = var894;
                  var893 = var6;
                  Throwable var901 = var906;
                  var899 = var891;
                  var892 = var0;

                  try {
                     ((<undefinedtype>)var10).L$0 = var11;
                  } catch (Throwable var872) {
                     var10000 = var872;
                     var10001 = false;
                     break;
                  }

                  var892 = var0;

                  try {
                     ((<undefinedtype>)var10).L$1 = var8;
                  } catch (Throwable var871) {
                     var10000 = var871;
                     var10001 = false;
                     break;
                  }

                  var892 = var0;

                  try {
                     ((<undefinedtype>)var10).L$2 = var899;
                  } catch (Throwable var870) {
                     var10000 = var870;
                     var10001 = false;
                     break;
                  }

                  var892 = var0;

                  try {
                     ((<undefinedtype>)var10).L$3 = var898;
                  } catch (Throwable var869) {
                     var10000 = var869;
                     var10001 = false;
                     break;
                  }

                  var892 = var0;

                  try {
                     ((<undefinedtype>)var10).L$4 = var7;
                  } catch (Throwable var868) {
                     var10000 = var868;
                     var10001 = false;
                     break;
                  }

                  var892 = var0;

                  try {
                     ((<undefinedtype>)var10).L$5 = var0;
                  } catch (Throwable var867) {
                     var10000 = var867;
                     var10001 = false;
                     break;
                  }

                  var892 = var0;

                  try {
                     ((<undefinedtype>)var10).L$6 = var901;
                  } catch (Throwable var866) {
                     var10000 = var866;
                     var10001 = false;
                     break;
                  }

                  var892 = var0;

                  try {
                     ((<undefinedtype>)var10).L$7 = var9;
                  } catch (Throwable var865) {
                     var10000 = var865;
                     var10001 = false;
                     break;
                  }

                  var892 = var0;

                  try {
                     ((<undefinedtype>)var10).L$8 = var904;
                  } catch (Throwable var864) {
                     var10000 = var864;
                     var10001 = false;
                     break;
                  }

                  var892 = var0;

                  try {
                     ((<undefinedtype>)var10).label = 1;
                  } catch (Throwable var863) {
                     var10000 = var863;
                     var10001 = false;
                     break;
                  }

                  var892 = var0;

                  try {
                     var13 = var904.hasNext((Continuation)var10);
                  } catch (Throwable var862) {
                     var10000 = var862;
                     var10001 = false;
                     break;
                  }

                  if (var13 == var893) {
                     return var893;
                  }

                  var905 = var898;
                  var5 = var901;
                  var900 = var893;
                  var894 = var899;
                  var896 = var905;
                  var6 = var900;
                  continue;
               }

               var892 = var0;

               IllegalArgumentException var897;
               try {
                  var897 = new IllegalArgumentException;
               } catch (Throwable var861) {
                  var10000 = var861;
                  var10001 = false;
                  break;
               }

               var892 = var0;

               try {
                  var897.<init>("ReceiveChannel contains more than one matching element.");
               } catch (Throwable var860) {
                  var10000 = var860;
                  var10001 = false;
                  break;
               }

               var892 = var0;

               try {
                  throw (Throwable)var897;
               } catch (Throwable var856) {
                  var10000 = var856;
                  var10001 = false;
                  break;
               }
            }
         }

         var890 = var10000;
      }

      try {
         throw var890;
      } finally {
         InlineMarker.finallyStart(1);
         ChannelsKt.cancelConsumed(var892, var890);
         InlineMarker.finallyEnd(1);
      }
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   private static final Object single$$forInline(ReceiveChannel var0, Function1 var1, Continuation var2) {
      Throwable var4 = (Throwable)null;

      Throwable var10000;
      label317: {
         ChannelIterator var6;
         boolean var10001;
         try {
            var6 = var0.iterator();
         } catch (Throwable var36) {
            var10000 = var36;
            var10001 = false;
            break label317;
         }

         Object var40 = null;
         boolean var3 = false;

         while(true) {
            Object var5;
            try {
               InlineMarker.mark(0);
               var5 = var6.hasNext(var2);
               InlineMarker.mark(1);
               if (!(Boolean)var5) {
                  break;
               }

               var5 = var6.next();
               if (!(Boolean)var1.invoke(var5)) {
                  continue;
               }
            } catch (Throwable var35) {
               var10000 = var35;
               var10001 = false;
               break label317;
            }

            if (var3) {
               try {
                  IllegalArgumentException var37 = new IllegalArgumentException("ReceiveChannel contains more than one matching element.");
                  throw (Throwable)var37;
               } catch (Throwable var33) {
                  var10000 = var33;
                  var10001 = false;
                  break label317;
               }
            }

            var3 = true;
            var40 = var5;
         }

         try {
            Unit var39 = Unit.INSTANCE;
         } catch (Throwable var34) {
            var10000 = var34;
            var10001 = false;
            break label317;
         }

         InlineMarker.finallyStart(1);
         ChannelsKt.cancelConsumed(var0, (Throwable)null);
         InlineMarker.finallyEnd(1);
         if (var3) {
            return var40;
         }

         throw (Throwable)(new NoSuchElementException("ReceiveChannel contains no element matching the predicate."));
      }

      Throwable var38 = var10000;

      try {
         throw var38;
      } finally {
         InlineMarker.finallyStart(1);
         ChannelsKt.cancelConsumed(var0, var38);
         InlineMarker.finallyEnd(1);
      }
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object singleOrNull(ReceiveChannel var0, Continuation var1) {
      Object var5;
      label2576: {
         if (var1 instanceof <undefinedtype>) {
            var5 = (<undefinedtype>)var1;
            if ((((<undefinedtype>)var5).label & Integer.MIN_VALUE) != 0) {
               ((<undefinedtype>)var5).label += Integer.MIN_VALUE;
               break label2576;
            }
         }

         var5 = new ContinuationImpl(var1) {
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            int label;
            Object result;

            public final Object invokeSuspend(Object var1) {
               this.result = var1;
               this.label |= Integer.MIN_VALUE;
               return ChannelsKt.singleOrNull((ReceiveChannel)null, this);
            }
         };
      }

      ReceiveChannel var253;
      Throwable var255;
      label2569: {
         Throwable var4;
         Throwable var10000;
         label2579: {
            boolean var3;
            Object var6;
            boolean var10001;
            label2567: {
               label2580: {
                  var6 = ((<undefinedtype>)var5).result;
                  Object var11 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                  int var2 = ((<undefinedtype>)var5).label;
                  ReceiveChannel var7;
                  ChannelIterator var8;
                  ReceiveChannel var9;
                  if (var2 != 0) {
                     if (var2 != 1) {
                        if (var2 != 2) {
                           throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                        }

                        Object var256 = ((<undefinedtype>)var5).L$5;
                        ChannelIterator var252 = (ChannelIterator)((<undefinedtype>)var5).L$4;
                        var0 = (ReceiveChannel)((<undefinedtype>)var5).L$3;
                        var4 = (Throwable)((<undefinedtype>)var5).L$2;
                        var253 = (ReceiveChannel)((<undefinedtype>)var5).L$1;
                        var0 = (ReceiveChannel)((<undefinedtype>)var5).L$0;
                        var0 = var253;

                        try {
                           ResultKt.throwOnFailure(var6);
                        } catch (Throwable var240) {
                           var10000 = var240;
                           var10001 = false;
                           break label2579;
                        }

                        var5 = var256;
                        break label2567;
                     }

                     var8 = (ChannelIterator)((<undefinedtype>)var5).L$4;
                     var9 = (ReceiveChannel)((<undefinedtype>)var5).L$3;
                     var4 = (Throwable)((<undefinedtype>)var5).L$2;
                     var0 = (ReceiveChannel)((<undefinedtype>)var5).L$1;
                     var7 = (ReceiveChannel)((<undefinedtype>)var5).L$0;
                     var253 = var0;

                     try {
                        ResultKt.throwOnFailure(var6);
                     } catch (Throwable var251) {
                        var10000 = var251;
                        var10001 = false;
                        break label2580;
                     }
                  } else {
                     ResultKt.throwOnFailure(var6);
                     Throwable var254 = (Throwable)null;

                     try {
                        var8 = var0.iterator();
                        ((<undefinedtype>)var5).L$0 = var0;
                        ((<undefinedtype>)var5).L$1 = var0;
                        ((<undefinedtype>)var5).L$2 = null;
                        ((<undefinedtype>)var5).L$3 = var0;
                        ((<undefinedtype>)var5).L$4 = var8;
                        ((<undefinedtype>)var5).label = 1;
                        var6 = var8.hasNext((Continuation)var5);
                     } catch (Throwable var239) {
                        var253 = var0;
                        var255 = var239;
                        break label2569;
                     }

                     if (var6 == var11) {
                        return var11;
                     }

                     var4 = null;
                     var9 = var0;
                     var7 = var0;
                  }

                  var253 = var0;

                  try {
                     var3 = (Boolean)var6;
                  } catch (Throwable var250) {
                     var10000 = var250;
                     var10001 = false;
                     break label2580;
                  }

                  if (!var3) {
                     ChannelsKt.cancelConsumed(var0, var4);
                     return null;
                  }

                  var253 = var0;

                  Object var10;
                  try {
                     var10 = var8.next();
                  } catch (Throwable var249) {
                     var10000 = var249;
                     var10001 = false;
                     break label2580;
                  }

                  var253 = var0;

                  try {
                     ((<undefinedtype>)var5).L$0 = var7;
                  } catch (Throwable var248) {
                     var10000 = var248;
                     var10001 = false;
                     break label2580;
                  }

                  var253 = var0;

                  try {
                     ((<undefinedtype>)var5).L$1 = var0;
                  } catch (Throwable var247) {
                     var10000 = var247;
                     var10001 = false;
                     break label2580;
                  }

                  var253 = var0;

                  try {
                     ((<undefinedtype>)var5).L$2 = var4;
                  } catch (Throwable var246) {
                     var10000 = var246;
                     var10001 = false;
                     break label2580;
                  }

                  var253 = var0;

                  try {
                     ((<undefinedtype>)var5).L$3 = var9;
                  } catch (Throwable var245) {
                     var10000 = var245;
                     var10001 = false;
                     break label2580;
                  }

                  var253 = var0;

                  try {
                     ((<undefinedtype>)var5).L$4 = var8;
                  } catch (Throwable var244) {
                     var10000 = var244;
                     var10001 = false;
                     break label2580;
                  }

                  var253 = var0;

                  try {
                     ((<undefinedtype>)var5).L$5 = var10;
                  } catch (Throwable var243) {
                     var10000 = var243;
                     var10001 = false;
                     break label2580;
                  }

                  var253 = var0;

                  try {
                     ((<undefinedtype>)var5).label = 2;
                  } catch (Throwable var242) {
                     var10000 = var242;
                     var10001 = false;
                     break label2580;
                  }

                  var253 = var0;

                  try {
                     var6 = var8.hasNext((Continuation)var5);
                  } catch (Throwable var241) {
                     var10000 = var241;
                     var10001 = false;
                     break label2580;
                  }

                  if (var6 == var11) {
                     return var11;
                  }

                  var5 = var10;
                  var253 = var0;
                  break label2567;
               }

               var255 = var10000;
               break label2569;
            }

            var0 = var253;

            try {
               var3 = (Boolean)var6;
            } catch (Throwable var238) {
               var10000 = var238;
               var10001 = false;
               break label2579;
            }

            if (var3) {
               ChannelsKt.cancelConsumed(var253, var4);
               return null;
            }

            ChannelsKt.cancelConsumed(var253, var4);
            return var5;
         }

         var4 = var10000;
         var253 = var0;
         var255 = var4;
      }

      try {
         throw var255;
      } finally {
         ChannelsKt.cancelConsumed(var253, var255);
      }
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object singleOrNull(ReceiveChannel param0, Function1 param1, Continuation param2) {
      // $FF: Couldn't be decompiled
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   private static final Object singleOrNull$$forInline(ReceiveChannel var0, Function1 var1, Continuation var2) {
      Throwable var5 = (Throwable)null;

      boolean var3;
      Object var30;
      label254: {
         Throwable var10000;
         label255: {
            ChannelIterator var7;
            boolean var10001;
            try {
               var7 = var0.iterator();
            } catch (Throwable var27) {
               var10000 = var27;
               var10001 = false;
               break label255;
            }

            var30 = null;
            var3 = false;

            while(true) {
               boolean var4;
               Object var6;
               try {
                  InlineMarker.mark(0);
                  var6 = var7.hasNext(var2);
                  InlineMarker.mark(1);
                  if (!(Boolean)var6) {
                     break;
                  }

                  var6 = var7.next();
                  var4 = (Boolean)var1.invoke(var6);
               } catch (Throwable var26) {
                  var10000 = var26;
                  var10001 = false;
                  break label255;
               }

               if (var4) {
                  if (var3) {
                     InlineMarker.finallyStart(2);
                     ChannelsKt.cancelConsumed(var0, (Throwable)null);
                     InlineMarker.finallyEnd(2);
                     return null;
                  }

                  var3 = true;
                  var30 = var6;
               }
            }

            label237:
            try {
               Unit var29 = Unit.INSTANCE;
               break label254;
            } catch (Throwable var25) {
               var10000 = var25;
               var10001 = false;
               break label237;
            }
         }

         Throwable var28 = var10000;

         try {
            throw var28;
         } finally {
            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, var28);
            InlineMarker.finallyEnd(1);
         }
      }

      InlineMarker.finallyStart(1);
      ChannelsKt.cancelConsumed(var0, (Throwable)null);
      InlineMarker.finallyEnd(1);
      return !var3 ? null : var30;
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object sumBy(ReceiveChannel var0, Function1 var1, Continuation var2) {
      Object var376;
      label3172: {
         if (var2 instanceof <undefinedtype>) {
            <undefinedtype> var4 = (<undefinedtype>)var2;
            if ((var4.label & Integer.MIN_VALUE) != 0) {
               var4.label += Integer.MIN_VALUE;
               var376 = var4;
               break label3172;
            }
         }

         var376 = new ContinuationImpl(var2) {
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            int label;
            Object result;

            public final Object invokeSuspend(Object var1) {
               this.result = var1;
               this.label |= Integer.MIN_VALUE;
               return ChannelsKt.sumBy((ReceiveChannel)null, (Function1)null, this);
            }
         };
      }

      Throwable var373;
      ReceiveChannel var377;
      label3167: {
         Throwable var10000;
         label3175: {
            boolean var10001;
            Ref.IntRef var374;
            Throwable var380;
            label3165: {
               Object var12 = ((<undefinedtype>)var376).result;
               Object var379 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
               int var3 = ((<undefinedtype>)var376).label;
               ReceiveChannel var6;
               ReceiveChannel var7;
               Function1 var8;
               Object var9;
               ChannelIterator var10;
               ReceiveChannel var11;
               Object var375;
               Ref.IntRef var381;
               Object var382;
               Ref.IntRef var383;
               if (var3 != 0) {
                  if (var3 != 1) {
                     throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                  }

                  var10 = (ChannelIterator)((<undefinedtype>)var376).L$7;
                  var7 = (ReceiveChannel)((<undefinedtype>)var376).L$6;
                  Throwable var5 = (Throwable)((<undefinedtype>)var376).L$5;
                  var0 = (ReceiveChannel)((<undefinedtype>)var376).L$4;
                  var6 = (ReceiveChannel)((<undefinedtype>)var376).L$3;
                  var374 = (Ref.IntRef)((<undefinedtype>)var376).L$2;
                  var8 = (Function1)((<undefinedtype>)var376).L$1;
                  var11 = (ReceiveChannel)((<undefinedtype>)var376).L$0;

                  try {
                     ResultKt.throwOnFailure(var12);
                  } catch (Throwable var355) {
                     var377 = var0;
                     var373 = var355;
                     break label3167;
                  }

                  var9 = var376;
                  Throwable var378 = var5;
                  var382 = var379;
                  var380 = var378;
                  var377 = var0;

                  try {
                     if (!(Boolean)var12) {
                        break label3165;
                     }
                  } catch (Throwable var370) {
                     var10000 = var370;
                     var10001 = false;
                     break label3175;
                  }

                  var377 = var0;

                  try {
                     var12 = var10.next();
                  } catch (Throwable var371) {
                     var10000 = var371;
                     var10001 = false;
                     break label3175;
                  }

                  var377 = var0;

                  try {
                     var374.element += ((Number)var8.invoke(var12)).intValue();
                  } catch (Throwable var372) {
                     var10000 = var372;
                     var10001 = false;
                     break label3175;
                  }

                  var381 = var374;
                  var375 = var382;
                  var383 = var381;
               } else {
                  ResultKt.throwOnFailure(var12);
                  var383 = new Ref.IntRef();
                  var383.element = 0;
                  Throwable var384 = (Throwable)null;

                  try {
                     var10 = var0.iterator();
                  } catch (Throwable var356) {
                     var377 = var0;
                     var373 = var356;
                     break label3167;
                  }

                  Object var385 = var379;
                  var380 = null;
                  var6 = var0;
                  var8 = var1;
                  var9 = var376;
                  var11 = var0;
                  var375 = var385;
                  var7 = var0;
                  var0 = var0;
               }

               while(true) {
                  var377 = var0;

                  try {
                     ((<undefinedtype>)var9).L$0 = var11;
                  } catch (Throwable var366) {
                     var10000 = var366;
                     var10001 = false;
                     break label3175;
                  }

                  var377 = var0;

                  try {
                     ((<undefinedtype>)var9).L$1 = var8;
                  } catch (Throwable var365) {
                     var10000 = var365;
                     var10001 = false;
                     break label3175;
                  }

                  var377 = var0;

                  try {
                     ((<undefinedtype>)var9).L$2 = var383;
                  } catch (Throwable var364) {
                     var10000 = var364;
                     var10001 = false;
                     break label3175;
                  }

                  var377 = var0;

                  try {
                     ((<undefinedtype>)var9).L$3 = var6;
                  } catch (Throwable var363) {
                     var10000 = var363;
                     var10001 = false;
                     break label3175;
                  }

                  var377 = var0;

                  try {
                     ((<undefinedtype>)var9).L$4 = var0;
                  } catch (Throwable var362) {
                     var10000 = var362;
                     var10001 = false;
                     break label3175;
                  }

                  var377 = var0;

                  try {
                     ((<undefinedtype>)var9).L$5 = var380;
                  } catch (Throwable var361) {
                     var10000 = var361;
                     var10001 = false;
                     break label3175;
                  }

                  var377 = var0;

                  try {
                     ((<undefinedtype>)var9).L$6 = var7;
                  } catch (Throwable var360) {
                     var10000 = var360;
                     var10001 = false;
                     break label3175;
                  }

                  var377 = var0;

                  try {
                     ((<undefinedtype>)var9).L$7 = var10;
                  } catch (Throwable var359) {
                     var10000 = var359;
                     var10001 = false;
                     break label3175;
                  }

                  var377 = var0;

                  try {
                     ((<undefinedtype>)var9).label = 1;
                  } catch (Throwable var358) {
                     var10000 = var358;
                     var10001 = false;
                     break label3175;
                  }

                  var377 = var0;

                  try {
                     var12 = var10.hasNext((Continuation)var9);
                  } catch (Throwable var357) {
                     var10000 = var357;
                     var10001 = false;
                     break label3175;
                  }

                  if (var12 == var375) {
                     return var375;
                  }

                  var381 = var383;
                  var382 = var375;
                  var374 = var381;
                  var377 = var0;

                  try {
                     if (!(Boolean)var12) {
                        break;
                     }
                  } catch (Throwable var369) {
                     var10000 = var369;
                     var10001 = false;
                     break label3175;
                  }

                  var377 = var0;

                  try {
                     var12 = var10.next();
                  } catch (Throwable var368) {
                     var10000 = var368;
                     var10001 = false;
                     break label3175;
                  }

                  var377 = var0;

                  try {
                     var374.element += ((Number)var8.invoke(var12)).intValue();
                  } catch (Throwable var367) {
                     var10000 = var367;
                     var10001 = false;
                     break label3175;
                  }

                  var381 = var374;
                  var375 = var382;
                  var383 = var381;
               }
            }

            var377 = var0;

            try {
               Unit var386 = Unit.INSTANCE;
            } catch (Throwable var354) {
               var10000 = var354;
               var10001 = false;
               break label3175;
            }

            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, var380);
            InlineMarker.finallyEnd(1);
            return Boxing.boxInt(var374.element);
         }

         var373 = var10000;
      }

      try {
         throw var373;
      } finally {
         InlineMarker.finallyStart(1);
         ChannelsKt.cancelConsumed(var377, var373);
         InlineMarker.finallyEnd(1);
      }
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   private static final Object sumBy$$forInline(ReceiveChannel var0, Function1 var1, Continuation var2) {
      Throwable var4 = (Throwable)null;

      int var3;
      label204: {
         Throwable var10000;
         label205: {
            ChannelIterator var5;
            boolean var10001;
            try {
               var5 = var0.iterator();
            } catch (Throwable var25) {
               var10000 = var25;
               var10001 = false;
               break label205;
            }

            var3 = 0;

            while(true) {
               try {
                  InlineMarker.mark(0);
                  Object var28 = var5.hasNext(var2);
                  InlineMarker.mark(1);
                  if (!(Boolean)var28) {
                     break;
                  }

                  var3 += ((Number)var1.invoke(var5.next())).intValue();
               } catch (Throwable var24) {
                  var10000 = var24;
                  var10001 = false;
                  break label205;
               }
            }

            label187:
            try {
               Unit var26 = Unit.INSTANCE;
               break label204;
            } catch (Throwable var23) {
               var10000 = var23;
               var10001 = false;
               break label187;
            }
         }

         Throwable var27 = var10000;

         try {
            throw var27;
         } finally {
            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, var27);
            InlineMarker.finallyEnd(1);
         }
      }

      InlineMarker.finallyStart(1);
      ChannelsKt.cancelConsumed(var0, (Throwable)null);
      InlineMarker.finallyEnd(1);
      return var3;
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object sumByDouble(ReceiveChannel param0, Function1 param1, Continuation param2) {
      // $FF: Couldn't be decompiled
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   private static final Object sumByDouble$$forInline(ReceiveChannel var0, Function1 var1, Continuation var2) {
      Throwable var5 = (Throwable)null;

      double var3;
      label204: {
         Throwable var10000;
         label205: {
            ChannelIterator var6;
            boolean var10001;
            try {
               var6 = var0.iterator();
            } catch (Throwable var26) {
               var10000 = var26;
               var10001 = false;
               break label205;
            }

            var3 = 0.0;

            while(true) {
               try {
                  InlineMarker.mark(0);
                  Object var29 = var6.hasNext(var2);
                  InlineMarker.mark(1);
                  if (!(Boolean)var29) {
                     break;
                  }

                  var3 += ((Number)var1.invoke(var6.next())).doubleValue();
               } catch (Throwable var25) {
                  var10000 = var25;
                  var10001 = false;
                  break label205;
               }
            }

            label187:
            try {
               Unit var27 = Unit.INSTANCE;
               break label204;
            } catch (Throwable var24) {
               var10000 = var24;
               var10001 = false;
               break label187;
            }
         }

         Throwable var28 = var10000;

         try {
            throw var28;
         } finally {
            InlineMarker.finallyStart(1);
            ChannelsKt.cancelConsumed(var0, var28);
            InlineMarker.finallyEnd(1);
         }
      }

      InlineMarker.finallyStart(1);
      ChannelsKt.cancelConsumed(var0, (Throwable)null);
      InlineMarker.finallyEnd(1);
      return var3;
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final ReceiveChannel take(ReceiveChannel var0, int var1, CoroutineContext var2) {
      return ProduceKt.produce$default((CoroutineScope)GlobalScope.INSTANCE, var2, 0, (CoroutineStart)null, ChannelsKt.consumes(var0), (Function2)(new Function2(var0, var1, (Continuation)null) {
         final int $n;
         final ReceiveChannel $this_take;
         int I$0;
         Object L$0;
         Object L$1;
         Object L$2;
         int label;
         private ProducerScope p$;

         {
            this.$this_take = var1;
            this.$n = var2;
         }

         public final Continuation create(Object var1, Continuation var2) {
            Function2 var3 = new <anonymous constructor>(this.$this_take, this.$n, var2);
            var3.p$ = (ProducerScope)var1;
            return var3;
         }

         public final Object invoke(Object var1, Object var2) {
            return ((<undefinedtype>)this.create(var1, (Continuation)var2)).invokeSuspend(Unit.INSTANCE);
         }

         public final Object invokeSuspend(Object var1) {
            Object var8 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
            int var2 = this.label;
            ProducerScope var5;
            ChannelIterator var9;
            <undefinedtype> var12;
            if (var2 != 0) {
               ChannelIterator var4;
               if (var2 != 1) {
                  if (var2 != 2) {
                     throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                  }

                  var4 = (ChannelIterator)this.L$2;
                  var2 = this.I$0;
                  var5 = (ProducerScope)this.L$0;
                  ResultKt.throwOnFailure(var1);
                  --var2;
                  if (var2 == 0) {
                     return Unit.INSTANCE;
                  }

                  var9 = var4;
                  var12 = this;
               } else {
                  var4 = (ChannelIterator)this.L$1;
                  var2 = this.I$0;
                  ProducerScope var6 = (ProducerScope)this.L$0;
                  ResultKt.throwOnFailure(var1);
                  if (!(Boolean)var1) {
                     return Unit.INSTANCE;
                  }

                  var1 = var4.next();
                  this.L$0 = var6;
                  this.I$0 = var2;
                  this.L$1 = var1;
                  this.L$2 = var4;
                  this.label = 2;
                  if (var6.send(var1, this) == var8) {
                     return var8;
                  }

                  var5 = var6;
                  --var2;
                  if (var2 == 0) {
                     return Unit.INSTANCE;
                  }

                  var9 = var4;
                  var12 = this;
               }
            } else {
               ResultKt.throwOnFailure(var1);
               var5 = this.p$;
               int var3 = this.$n;
               if (var3 == 0) {
                  return Unit.INSTANCE;
               }

               boolean var11;
               if (var3 >= 0) {
                  var11 = true;
               } else {
                  var11 = false;
               }

               if (!var11) {
                  throw (Throwable)(new IllegalArgumentException(("Requested element count " + this.$n + " is less than zero.").toString()));
               }

               var9 = this.$this_take.iterator();
               var12 = this;
               var2 = var3;
            }

            while(true) {
               var12.L$0 = var5;
               var12.I$0 = var2;
               var12.L$1 = var9;
               var12.label = 1;
               Object var7 = var9.hasNext(var12);
               if (var7 == var8) {
                  return var8;
               }

               if (!(Boolean)var7) {
                  return Unit.INSTANCE;
               }

               var1 = var9.next();
               var12.L$0 = var5;
               var12.I$0 = var2;
               var12.L$1 = var1;
               var12.L$2 = var9;
               var12.label = 2;
               if (var5.send(var1, var12) == var8) {
                  return var8;
               }

               var5 = var5;
               --var2;
               if (var2 == 0) {
                  return Unit.INSTANCE;
               }

               var9 = var9;
               var12 = var12;
            }
         }
      }), 6, (Object)null);
   }

   // $FF: synthetic method
   public static ReceiveChannel take$default(ReceiveChannel var0, int var1, CoroutineContext var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = (CoroutineContext)Dispatchers.getUnconfined();
      }

      return ChannelsKt.take(var0, var1, var2);
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final ReceiveChannel takeWhile(ReceiveChannel var0, CoroutineContext var1, Function2 var2) {
      return ProduceKt.produce$default((CoroutineScope)GlobalScope.INSTANCE, var1, 0, (CoroutineStart)null, ChannelsKt.consumes(var0), (Function2)(new Function2(var0, var2, (Continuation)null) {
         final Function2 $predicate;
         final ReceiveChannel $this_takeWhile;
         Object L$0;
         Object L$1;
         Object L$2;
         int label;
         private ProducerScope p$;

         {
            this.$this_takeWhile = var1;
            this.$predicate = var2;
         }

         public final Continuation create(Object var1, Continuation var2) {
            Function2 var3 = new <anonymous constructor>(this.$this_takeWhile, this.$predicate, var2);
            var3.p$ = (ProducerScope)var1;
            return var3;
         }

         public final Object invoke(Object var1, Object var2) {
            return ((<undefinedtype>)this.create(var1, (Continuation)var2)).invokeSuspend(Unit.INSTANCE);
         }

         public final Object invokeSuspend(Object var1) {
            Object var3 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
            int var2 = this.label;
            ProducerScope var4;
            Object var7;
            ChannelIterator var9;
            Function2 var10;
            <undefinedtype> var11;
            if (var2 != 0) {
               ChannelIterator var5;
               ProducerScope var6;
               if (var2 != 1) {
                  if (var2 != 2) {
                     if (var2 != 3) {
                        throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                     }

                     var5 = (ChannelIterator)this.L$2;
                     var4 = (ProducerScope)this.L$0;
                     ResultKt.throwOnFailure(var1);
                     var9 = var5;
                     var11 = this;
                  } else {
                     var5 = (ChannelIterator)this.L$2;
                     var7 = this.L$1;
                     var6 = (ProducerScope)this.L$0;
                     ResultKt.throwOnFailure(var1);
                     if (!(Boolean)var1) {
                        return Unit.INSTANCE;
                     }

                     this.L$0 = var6;
                     this.L$1 = var7;
                     this.L$2 = var5;
                     this.label = 3;
                     if (var6.send(var7, this) == var3) {
                        return var3;
                     }

                     var3 = var3;
                     var9 = var5;
                     var4 = var6;
                     var11 = this;
                  }
               } else {
                  var5 = (ChannelIterator)this.L$1;
                  var6 = (ProducerScope)this.L$0;
                  ResultKt.throwOnFailure(var1);
                  if (!(Boolean)var1) {
                     return Unit.INSTANCE;
                  }

                  var7 = var5.next();
                  var10 = this.$predicate;
                  this.L$0 = var6;
                  this.L$1 = var7;
                  this.L$2 = var5;
                  this.label = 2;
                  var1 = var10.invoke(var7, this);
                  if (var1 == var3) {
                     return var3;
                  }

                  if (!(Boolean)var1) {
                     return Unit.INSTANCE;
                  }

                  this.L$0 = var6;
                  this.L$1 = var7;
                  this.L$2 = var5;
                  this.label = 3;
                  if (var6.send(var7, this) == var3) {
                     return var3;
                  }

                  var3 = var3;
                  var9 = var5;
                  var4 = var6;
                  var11 = this;
               }
            } else {
               ResultKt.throwOnFailure(var1);
               var4 = this.p$;
               var9 = this.$this_takeWhile.iterator();
               var11 = this;
            }

            while(true) {
               var11.L$0 = var4;
               var11.L$1 = var9;
               var11.label = 1;
               Object var12 = var9.hasNext(var11);
               if (var12 == var3) {
                  return var3;
               }

               ChannelIterator var8 = var9;
               if (!(Boolean)var12) {
                  return Unit.INSTANCE;
               }

               var7 = var9.next();
               var10 = var11.$predicate;
               var11.L$0 = var4;
               var11.L$1 = var7;
               var11.L$2 = var8;
               var11.label = 2;
               var1 = var10.invoke(var7, var11);
               if (var1 == var3) {
                  return var3;
               }

               if (!(Boolean)var1) {
                  return Unit.INSTANCE;
               }

               var11.L$0 = var4;
               var11.L$1 = var7;
               var11.L$2 = var8;
               var11.label = 3;
               if (var4.send(var7, var11) == var3) {
                  return var3;
               }

               var3 = var3;
               var9 = var8;
               var4 = var4;
               var11 = var11;
            }
         }
      }), 6, (Object)null);
   }

   // $FF: synthetic method
   public static ReceiveChannel takeWhile$default(ReceiveChannel var0, CoroutineContext var1, Function2 var2, int var3, Object var4) {
      if ((var3 & 1) != 0) {
         var1 = (CoroutineContext)Dispatchers.getUnconfined();
      }

      return ChannelsKt.takeWhile(var0, var1, var2);
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object toChannel(ReceiveChannel var0, SendChannel var1, Continuation var2) {
      Object var1165;
      label10016: {
         if (var2 instanceof <undefinedtype>) {
            <undefinedtype> var4 = (<undefinedtype>)var2;
            if ((var4.label & Integer.MIN_VALUE) != 0) {
               var4.label += Integer.MIN_VALUE;
               var1165 = var4;
               break label10016;
            }
         }

         var1165 = new ContinuationImpl(var2) {
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            Object L$7;
            Object L$8;
            int label;
            Object result;

            public final Object invokeSuspend(Object var1) {
               this.result = var1;
               this.label |= Integer.MIN_VALUE;
               return ChannelsKt.toChannel((ReceiveChannel)null, (SendChannel)null, this);
            }
         };
      }

      Throwable var1166;
      ReceiveChannel var1178;
      label10026: {
         Throwable var10000;
         label10009: {
            label10008: {
               Object var11 = ((<undefinedtype>)var1165).result;
               Object var1171 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
               int var3 = ((<undefinedtype>)var1165).label;
               ReceiveChannel var5;
               ReceiveChannel var6;
               ChannelIterator var7;
               ReceiveChannel var8;
               Throwable var9;
               Object var1162;
               ReceiveChannel var1163;
               ReceiveChannel var12;
               SendChannel var1167;
               Unit var1168;
               boolean var10001;
               SendChannel var1169;
               ReceiveChannel var1170;
               Object var1173;
               ReceiveChannel var1174;
               Object var1175;
               ChannelIterator var1176;
               ChannelIterator var1181;
               if (var3 != 0) {
                  if (var3 != 1) {
                     if (var3 != 2) {
                        throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                     }

                     Object var1161 = ((<undefinedtype>)var1165).L$8;
                     var1161 = ((<undefinedtype>)var1165).L$7;
                     var7 = (ChannelIterator)((<undefinedtype>)var1165).L$6;
                     var12 = (ReceiveChannel)((<undefinedtype>)var1165).L$5;
                     var9 = (Throwable)((<undefinedtype>)var1165).L$4;
                     var5 = (ReceiveChannel)((<undefinedtype>)var1165).L$3;
                     var6 = (ReceiveChannel)((<undefinedtype>)var1165).L$2;
                     SendChannel var10 = (SendChannel)((<undefinedtype>)var1165).L$1;
                     var8 = (ReceiveChannel)((<undefinedtype>)var1165).L$0;
                     var0 = var5;

                     try {
                        ResultKt.throwOnFailure(var11);
                     } catch (Throwable var1145) {
                        var10000 = var1145;
                        var10001 = false;
                        break label10008;
                     }

                     var1162 = var1165;
                     var0 = var12;
                     var1169 = var10;
                  } else {
                     label10020: {
                        var1176 = (ChannelIterator)((<undefinedtype>)var1165).L$6;
                        var1178 = (ReceiveChannel)((<undefinedtype>)var1165).L$5;
                        var9 = (Throwable)((<undefinedtype>)var1165).L$4;
                        var5 = (ReceiveChannel)((<undefinedtype>)var1165).L$3;
                        var1163 = (ReceiveChannel)((<undefinedtype>)var1165).L$2;
                        SendChannel var1180 = (SendChannel)((<undefinedtype>)var1165).L$1;
                        var1174 = (ReceiveChannel)((<undefinedtype>)var1165).L$0;
                        var0 = var5;

                        try {
                           ResultKt.throwOnFailure(var11);
                        } catch (Throwable var1146) {
                           var10000 = var1146;
                           var10001 = false;
                           break label10008;
                        }

                        var1173 = var1165;
                        var1167 = var1180;
                        var1170 = var1178;
                        var1178 = var5;

                        label10021: {
                           try {
                              if (!(Boolean)var11) {
                                 break label10021;
                              }
                           } catch (Throwable var1144) {
                              var10000 = var1144;
                              var10001 = false;
                              break label10009;
                           }

                           var1178 = var5;

                           try {
                              var11 = var1176.next();
                           } catch (Throwable var1142) {
                              var10000 = var1142;
                              var10001 = false;
                              break label10009;
                           }

                           var1178 = var5;

                           try {
                              ((<undefinedtype>)var1173).L$0 = var1174;
                           } catch (Throwable var1141) {
                              var10000 = var1141;
                              var10001 = false;
                              break label10009;
                           }

                           var1178 = var5;

                           try {
                              ((<undefinedtype>)var1173).L$1 = var1167;
                           } catch (Throwable var1140) {
                              var10000 = var1140;
                              var10001 = false;
                              break label10009;
                           }

                           var1178 = var5;

                           try {
                              ((<undefinedtype>)var1173).L$2 = var1163;
                           } catch (Throwable var1139) {
                              var10000 = var1139;
                              var10001 = false;
                              break label10009;
                           }

                           var1178 = var5;

                           try {
                              ((<undefinedtype>)var1173).L$3 = var5;
                           } catch (Throwable var1138) {
                              var10000 = var1138;
                              var10001 = false;
                              break label10009;
                           }

                           var1178 = var5;

                           try {
                              ((<undefinedtype>)var1173).L$4 = var9;
                           } catch (Throwable var1137) {
                              var10000 = var1137;
                              var10001 = false;
                              break label10009;
                           }

                           var1178 = var5;

                           try {
                              ((<undefinedtype>)var1173).L$5 = var1170;
                           } catch (Throwable var1136) {
                              var10000 = var1136;
                              var10001 = false;
                              break label10009;
                           }

                           var1178 = var5;

                           try {
                              ((<undefinedtype>)var1173).L$6 = var1176;
                           } catch (Throwable var1135) {
                              var10000 = var1135;
                              var10001 = false;
                              break label10009;
                           }

                           var1178 = var5;

                           try {
                              ((<undefinedtype>)var1173).L$7 = var11;
                           } catch (Throwable var1134) {
                              var10000 = var1134;
                              var10001 = false;
                              break label10009;
                           }

                           var1178 = var5;

                           try {
                              ((<undefinedtype>)var1173).L$8 = var11;
                           } catch (Throwable var1133) {
                              var10000 = var1133;
                              var10001 = false;
                              break label10009;
                           }

                           var1178 = var5;

                           try {
                              ((<undefinedtype>)var1173).label = 2;
                           } catch (Throwable var1132) {
                              var10000 = var1132;
                              var10001 = false;
                              break label10009;
                           }

                           var1178 = var5;

                           try {
                              if (var1167.send(var11, (Continuation)var1173) == var1171) {
                                 return var1171;
                              }
                           } catch (Throwable var1143) {
                              var10000 = var1143;
                              var10001 = false;
                              break label10009;
                           }

                           var1181 = var1176;
                           var8 = var1174;
                           var1175 = var1173;
                           var6 = var1163;
                           var0 = var1170;
                           var1169 = var1180;
                           var1162 = var1175;
                           var7 = var1181;
                           break label10020;
                        }

                        var1178 = var5;

                        try {
                           var1168 = Unit.INSTANCE;
                        } catch (Throwable var1121) {
                           var10000 = var1121;
                           var10001 = false;
                           break label10009;
                        }

                        ChannelsKt.cancelConsumed(var5, var9);
                        return var1180;
                     }
                  }
               } else {
                  ResultKt.throwOnFailure(var11);
                  Throwable var1172 = (Throwable)null;

                  try {
                     var7 = var0.iterator();
                  } catch (Throwable var1122) {
                     var1178 = var0;
                     var1166 = var1122;
                     break label10026;
                  }

                  SendChannel var1179 = var1;
                  var9 = null;
                  var6 = var0;
                  var5 = var0;
                  var8 = var0;
                  var1162 = var1165;
                  var1169 = var1179;
                  var0 = var0;
               }

               while(true) {
                  var1178 = var5;

                  try {
                     ((<undefinedtype>)var1162).L$0 = var8;
                  } catch (Throwable var1131) {
                     var10000 = var1131;
                     var10001 = false;
                     break label10009;
                  }

                  var1178 = var5;

                  try {
                     ((<undefinedtype>)var1162).L$1 = var1169;
                  } catch (Throwable var1130) {
                     var10000 = var1130;
                     var10001 = false;
                     break label10009;
                  }

                  var1178 = var5;

                  try {
                     ((<undefinedtype>)var1162).L$2 = var6;
                  } catch (Throwable var1129) {
                     var10000 = var1129;
                     var10001 = false;
                     break label10009;
                  }

                  var1178 = var5;

                  try {
                     ((<undefinedtype>)var1162).L$3 = var5;
                  } catch (Throwable var1128) {
                     var10000 = var1128;
                     var10001 = false;
                     break label10009;
                  }

                  var1178 = var5;

                  try {
                     ((<undefinedtype>)var1162).L$4 = var9;
                  } catch (Throwable var1127) {
                     var10000 = var1127;
                     var10001 = false;
                     break label10009;
                  }

                  var1178 = var5;

                  try {
                     ((<undefinedtype>)var1162).L$5 = var0;
                  } catch (Throwable var1126) {
                     var10000 = var1126;
                     var10001 = false;
                     break label10009;
                  }

                  var1178 = var5;

                  try {
                     ((<undefinedtype>)var1162).L$6 = var7;
                  } catch (Throwable var1125) {
                     var10000 = var1125;
                     var10001 = false;
                     break label10009;
                  }

                  var1178 = var5;

                  try {
                     ((<undefinedtype>)var1162).label = 1;
                  } catch (Throwable var1124) {
                     var10000 = var1124;
                     var10001 = false;
                     break label10009;
                  }

                  var1178 = var5;

                  try {
                     var11 = var7.hasNext((Continuation)var1162);
                  } catch (Throwable var1123) {
                     var10000 = var1123;
                     var10001 = false;
                     break label10009;
                  }

                  if (var11 == var1171) {
                     return var1171;
                  }

                  var1178 = var8;
                  var1176 = var7;
                  SendChannel var1177 = var1169;
                  var12 = var6;
                  var1173 = var1162;
                  var1170 = var0;
                  var1167 = var1177;
                  var1163 = var12;
                  var1174 = var1178;
                  var1178 = var5;

                  label10024: {
                     try {
                        if (!(Boolean)var11) {
                           break label10024;
                        }
                     } catch (Throwable var1147) {
                        var10000 = var1147;
                        var10001 = false;
                        break label10009;
                     }

                     var1178 = var5;

                     try {
                        var11 = var1176.next();
                     } catch (Throwable var1148) {
                        var10000 = var1148;
                        var10001 = false;
                        break label10009;
                     }

                     var1178 = var5;

                     try {
                        ((<undefinedtype>)var1173).L$0 = var1174;
                     } catch (Throwable var1149) {
                        var10000 = var1149;
                        var10001 = false;
                        break label10009;
                     }

                     var1178 = var5;

                     try {
                        ((<undefinedtype>)var1173).L$1 = var1167;
                     } catch (Throwable var1150) {
                        var10000 = var1150;
                        var10001 = false;
                        break label10009;
                     }

                     var1178 = var5;

                     try {
                        ((<undefinedtype>)var1173).L$2 = var1163;
                     } catch (Throwable var1151) {
                        var10000 = var1151;
                        var10001 = false;
                        break label10009;
                     }

                     var1178 = var5;

                     try {
                        ((<undefinedtype>)var1173).L$3 = var5;
                     } catch (Throwable var1152) {
                        var10000 = var1152;
                        var10001 = false;
                        break label10009;
                     }

                     var1178 = var5;

                     try {
                        ((<undefinedtype>)var1173).L$4 = var9;
                     } catch (Throwable var1153) {
                        var10000 = var1153;
                        var10001 = false;
                        break label10009;
                     }

                     var1178 = var5;

                     try {
                        ((<undefinedtype>)var1173).L$5 = var1170;
                     } catch (Throwable var1154) {
                        var10000 = var1154;
                        var10001 = false;
                        break label10009;
                     }

                     var1178 = var5;

                     try {
                        ((<undefinedtype>)var1173).L$6 = var1176;
                     } catch (Throwable var1155) {
                        var10000 = var1155;
                        var10001 = false;
                        break label10009;
                     }

                     var1178 = var5;

                     try {
                        ((<undefinedtype>)var1173).L$7 = var11;
                     } catch (Throwable var1156) {
                        var10000 = var1156;
                        var10001 = false;
                        break label10009;
                     }

                     var1178 = var5;

                     try {
                        ((<undefinedtype>)var1173).L$8 = var11;
                     } catch (Throwable var1157) {
                        var10000 = var1157;
                        var10001 = false;
                        break label10009;
                     }

                     var1178 = var5;

                     try {
                        ((<undefinedtype>)var1173).label = 2;
                     } catch (Throwable var1158) {
                        var10000 = var1158;
                        var10001 = false;
                        break label10009;
                     }

                     var1178 = var5;

                     try {
                        if (var1167.send(var11, (Continuation)var1173) == var1171) {
                           return var1171;
                        }
                     } catch (Throwable var1159) {
                        var10000 = var1159;
                        var10001 = false;
                        break label10009;
                     }

                     var1181 = var1176;
                     var8 = var1174;
                     var1175 = var1173;
                     var6 = var12;
                     var1 = var1167;
                     var0 = var1170;
                     var1169 = var1;
                     var1162 = var1175;
                     var7 = var1181;
                     continue;
                  }

                  var1178 = var5;

                  try {
                     var1168 = Unit.INSTANCE;
                  } catch (Throwable var1160) {
                     var10000 = var1160;
                     var10001 = false;
                     break label10009;
                  }

                  ChannelsKt.cancelConsumed(var5, var9);
                  return var1167;
               }
            }

            Throwable var1164 = var10000;
            var1178 = var0;
            var1166 = var1164;
            break label10026;
         }

         var1166 = var10000;
      }

      try {
         throw var1166;
      } finally {
         ChannelsKt.cancelConsumed(var1178, var1166);
      }
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object toCollection(ReceiveChannel var0, Collection var1, Continuation var2) {
      Object var287;
      label2486: {
         if (var2 instanceof <undefinedtype>) {
            <undefinedtype> var4 = (<undefinedtype>)var2;
            if ((var4.label & Integer.MIN_VALUE) != 0) {
               var4.label += Integer.MIN_VALUE;
               var287 = var4;
               break label2486;
            }
         }

         var287 = new ContinuationImpl(var2) {
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            int label;
            Object result;

            public final Object invokeSuspend(Object var1) {
               this.result = var1;
               this.label |= Integer.MIN_VALUE;
               return ChannelsKt.toCollection((ReceiveChannel)null, (Collection)null, this);
            }
         };
      }

      Throwable var284;
      ReceiveChannel var286;
      label2481: {
         Throwable var10000;
         label2489: {
            Collection var7;
            boolean var10001;
            Throwable var289;
            label2479: {
               Object var11 = ((<undefinedtype>)var287).result;
               Object var290 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
               int var3 = ((<undefinedtype>)var287).label;
               ReceiveChannel var5;
               ReceiveChannel var6;
               Object var8;
               ChannelIterator var9;
               ReceiveChannel var10;
               Throwable var285;
               Object var288;
               Throwable var291;
               if (var3 != 0) {
                  if (var3 != 1) {
                     throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                  }

                  var9 = (ChannelIterator)((<undefinedtype>)var287).L$6;
                  var6 = (ReceiveChannel)((<undefinedtype>)var287).L$5;
                  var285 = (Throwable)((<undefinedtype>)var287).L$4;
                  var0 = (ReceiveChannel)((<undefinedtype>)var287).L$3;
                  var5 = (ReceiveChannel)((<undefinedtype>)var287).L$2;
                  var7 = (Collection)((<undefinedtype>)var287).L$1;
                  var10 = (ReceiveChannel)((<undefinedtype>)var287).L$0;

                  try {
                     ResultKt.throwOnFailure(var11);
                  } catch (Throwable var269) {
                     var286 = var0;
                     var284 = var269;
                     break label2481;
                  }

                  var8 = var287;
                  var289 = var285;
                  var286 = var0;

                  try {
                     if (!(Boolean)var11) {
                        break label2479;
                     }
                  } catch (Throwable var282) {
                     var10000 = var282;
                     var10001 = false;
                     break label2489;
                  }

                  var286 = var0;

                  try {
                     var7.add(var9.next());
                  } catch (Throwable var283) {
                     var10000 = var283;
                     var10001 = false;
                     break label2489;
                  }

                  var288 = var290;
                  var291 = var289;
                  var287 = var288;
               } else {
                  ResultKt.throwOnFailure(var11);
                  Throwable var292 = (Throwable)null;

                  try {
                     var9 = var0.iterator();
                  } catch (Throwable var270) {
                     var286 = var0;
                     var284 = var270;
                     break label2481;
                  }

                  var7 = null;
                  var8 = var287;
                  var287 = var290;
                  var5 = var0;
                  var0 = var0;
                  var6 = var0;
                  var10 = var0;
                  var291 = var7;
                  var7 = var1;
               }

               while(true) {
                  var286 = var0;

                  try {
                     ((<undefinedtype>)var8).L$0 = var10;
                  } catch (Throwable var279) {
                     var10000 = var279;
                     var10001 = false;
                     break label2489;
                  }

                  var286 = var0;

                  try {
                     ((<undefinedtype>)var8).L$1 = var7;
                  } catch (Throwable var278) {
                     var10000 = var278;
                     var10001 = false;
                     break label2489;
                  }

                  var286 = var0;

                  try {
                     ((<undefinedtype>)var8).L$2 = var5;
                  } catch (Throwable var277) {
                     var10000 = var277;
                     var10001 = false;
                     break label2489;
                  }

                  var286 = var0;

                  try {
                     ((<undefinedtype>)var8).L$3 = var0;
                  } catch (Throwable var276) {
                     var10000 = var276;
                     var10001 = false;
                     break label2489;
                  }

                  var286 = var0;

                  try {
                     ((<undefinedtype>)var8).L$4 = var291;
                  } catch (Throwable var275) {
                     var10000 = var275;
                     var10001 = false;
                     break label2489;
                  }

                  var286 = var0;

                  try {
                     ((<undefinedtype>)var8).L$5 = var6;
                  } catch (Throwable var274) {
                     var10000 = var274;
                     var10001 = false;
                     break label2489;
                  }

                  var286 = var0;

                  try {
                     ((<undefinedtype>)var8).L$6 = var9;
                  } catch (Throwable var273) {
                     var10000 = var273;
                     var10001 = false;
                     break label2489;
                  }

                  var286 = var0;

                  try {
                     ((<undefinedtype>)var8).label = 1;
                  } catch (Throwable var272) {
                     var10000 = var272;
                     var10001 = false;
                     break label2489;
                  }

                  var286 = var0;

                  try {
                     var11 = var9.hasNext((Continuation)var8);
                  } catch (Throwable var271) {
                     var10000 = var271;
                     var10001 = false;
                     break label2489;
                  }

                  if (var11 == var287) {
                     return var287;
                  }

                  var285 = var291;
                  var290 = var287;
                  var289 = var285;
                  var286 = var0;

                  try {
                     if (!(Boolean)var11) {
                        break;
                     }
                  } catch (Throwable var281) {
                     var10000 = var281;
                     var10001 = false;
                     break label2489;
                  }

                  var286 = var0;

                  try {
                     var7.add(var9.next());
                  } catch (Throwable var280) {
                     var10000 = var280;
                     var10001 = false;
                     break label2489;
                  }

                  var288 = var290;
                  var291 = var289;
                  var287 = var288;
               }
            }

            var286 = var0;

            try {
               Unit var293 = Unit.INSTANCE;
            } catch (Throwable var268) {
               var10000 = var268;
               var10001 = false;
               break label2489;
            }

            ChannelsKt.cancelConsumed(var0, var289);
            return var7;
         }

         var284 = var10000;
      }

      try {
         throw var284;
      } finally {
         ChannelsKt.cancelConsumed(var286, var284);
      }
   }

   public static final Object toList(ReceiveChannel var0, Continuation var1) {
      return ChannelsKt.toMutableList(var0, var1);
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object toMap(ReceiveChannel var0, Map var1, Continuation var2) {
      Object var338;
      label2894: {
         if (var2 instanceof <undefinedtype>) {
            <undefinedtype> var4 = (<undefinedtype>)var2;
            if ((var4.label & Integer.MIN_VALUE) != 0) {
               var4.label += Integer.MIN_VALUE;
               var338 = var4;
               break label2894;
            }
         }

         var338 = new ContinuationImpl(var2) {
            Object L$0;
            Object L$1;
            Object L$2;
            Object L$3;
            Object L$4;
            Object L$5;
            Object L$6;
            int label;
            Object result;

            public final Object invokeSuspend(Object var1) {
               this.result = var1;
               this.label |= Integer.MIN_VALUE;
               return ChannelsKt.toMap((ReceiveChannel)null, (Map)null, this);
            }
         };
      }

      Throwable var335;
      ReceiveChannel var337;
      label2888: {
         Throwable var10000;
         label2897: {
            Map var7;
            boolean var10001;
            Throwable var339;
            label2886: {
               Object var11 = ((<undefinedtype>)var338).result;
               Object var340 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
               int var3 = ((<undefinedtype>)var338).label;
               ReceiveChannel var5;
               ReceiveChannel var6;
               Object var8;
               ChannelIterator var9;
               ReceiveChannel var10;
               Throwable var336;
               Throwable var341;
               Pair var344;
               if (var3 != 0) {
                  if (var3 != 1) {
                     throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                  }

                  var9 = (ChannelIterator)((<undefinedtype>)var338).L$6;
                  var6 = (ReceiveChannel)((<undefinedtype>)var338).L$5;
                  var336 = (Throwable)((<undefinedtype>)var338).L$4;
                  var0 = (ReceiveChannel)((<undefinedtype>)var338).L$3;
                  var5 = (ReceiveChannel)((<undefinedtype>)var338).L$2;
                  var7 = (Map)((<undefinedtype>)var338).L$1;
                  var10 = (ReceiveChannel)((<undefinedtype>)var338).L$0;

                  try {
                     ResultKt.throwOnFailure(var11);
                  } catch (Throwable var318) {
                     var337 = var0;
                     var335 = var318;
                     break label2888;
                  }

                  var8 = var338;
                  var339 = var336;
                  var337 = var0;

                  try {
                     if (!(Boolean)var11) {
                        break label2886;
                     }
                  } catch (Throwable var332) {
                     var10000 = var332;
                     var10001 = false;
                     break label2897;
                  }

                  var337 = var0;

                  try {
                     var344 = (Pair)var9.next();
                  } catch (Throwable var333) {
                     var10000 = var333;
                     var10001 = false;
                     break label2897;
                  }

                  var337 = var0;

                  try {
                     var7.put(var344.getFirst(), var344.getSecond());
                  } catch (Throwable var334) {
                     var10000 = var334;
                     var10001 = false;
                     break label2897;
                  }

                  var336 = var339;
                  var338 = var340;
                  var341 = var336;
               } else {
                  ResultKt.throwOnFailure(var11);
                  Throwable var342 = (Throwable)null;

                  try {
                     var9 = var0.iterator();
                  } catch (Throwable var319) {
                     var337 = var0;
                     var335 = var319;
                     break label2888;
                  }

                  var7 = null;
                  var8 = var338;
                  var338 = var340;
                  var5 = var0;
                  var0 = var0;
                  var6 = var0;
                  var10 = var0;
                  var341 = var7;
                  var7 = var1;
               }

               while(true) {
                  var337 = var0;

                  try {
                     ((<undefinedtype>)var8).L$0 = var10;
                  } catch (Throwable var328) {
                     var10000 = var328;
                     var10001 = false;
                     break label2897;
                  }

                  var337 = var0;

                  try {
                     ((<undefinedtype>)var8).L$1 = var7;
                  } catch (Throwable var327) {
                     var10000 = var327;
                     var10001 = false;
                     break label2897;
                  }

                  var337 = var0;

                  try {
                     ((<undefinedtype>)var8).L$2 = var5;
                  } catch (Throwable var326) {
                     var10000 = var326;
                     var10001 = false;
                     break label2897;
                  }

                  var337 = var0;

                  try {
                     ((<undefinedtype>)var8).L$3 = var0;
                  } catch (Throwable var325) {
                     var10000 = var325;
                     var10001 = false;
                     break label2897;
                  }

                  var337 = var0;

                  try {
                     ((<undefinedtype>)var8).L$4 = var341;
                  } catch (Throwable var324) {
                     var10000 = var324;
                     var10001 = false;
                     break label2897;
                  }

                  var337 = var0;

                  try {
                     ((<undefinedtype>)var8).L$5 = var6;
                  } catch (Throwable var323) {
                     var10000 = var323;
                     var10001 = false;
                     break label2897;
                  }

                  var337 = var0;

                  try {
                     ((<undefinedtype>)var8).L$6 = var9;
                  } catch (Throwable var322) {
                     var10000 = var322;
                     var10001 = false;
                     break label2897;
                  }

                  var337 = var0;

                  try {
                     ((<undefinedtype>)var8).label = 1;
                  } catch (Throwable var321) {
                     var10000 = var321;
                     var10001 = false;
                     break label2897;
                  }

                  var337 = var0;

                  try {
                     var11 = var9.hasNext((Continuation)var8);
                  } catch (Throwable var320) {
                     var10000 = var320;
                     var10001 = false;
                     break label2897;
                  }

                  if (var11 == var338) {
                     return var338;
                  }

                  var336 = var341;
                  var340 = var338;
                  var339 = var336;
                  var337 = var0;

                  try {
                     if (!(Boolean)var11) {
                        break;
                     }
                  } catch (Throwable var331) {
                     var10000 = var331;
                     var10001 = false;
                     break label2897;
                  }

                  var337 = var0;

                  try {
                     var344 = (Pair)var9.next();
                  } catch (Throwable var330) {
                     var10000 = var330;
                     var10001 = false;
                     break label2897;
                  }

                  var337 = var0;

                  try {
                     var7.put(var344.getFirst(), var344.getSecond());
                  } catch (Throwable var329) {
                     var10000 = var329;
                     var10001 = false;
                     break label2897;
                  }

                  var336 = var339;
                  var338 = var340;
                  var341 = var336;
               }
            }

            var337 = var0;

            try {
               Unit var343 = Unit.INSTANCE;
            } catch (Throwable var317) {
               var10000 = var317;
               var10001 = false;
               break label2897;
            }

            ChannelsKt.cancelConsumed(var0, var339);
            return var7;
         }

         var335 = var10000;
      }

      try {
         throw var335;
      } finally {
         ChannelsKt.cancelConsumed(var337, var335);
      }
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object toMap(ReceiveChannel var0, Continuation var1) {
      return ChannelsKt.toMap(var0, (Map)(new LinkedHashMap()), var1);
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object toMutableList(ReceiveChannel var0, Continuation var1) {
      return ChannelsKt.toCollection(var0, (Collection)(new ArrayList()), var1);
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object toMutableSet(ReceiveChannel var0, Continuation var1) {
      return ChannelsKt.toCollection(var0, (Collection)(new LinkedHashSet()), var1);
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final Object toSet(ReceiveChannel var0, Continuation var1) {
      return ChannelsKt.toMutableSet(var0, var1);
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final ReceiveChannel withIndex(ReceiveChannel var0, CoroutineContext var1) {
      return ProduceKt.produce$default((CoroutineScope)GlobalScope.INSTANCE, var1, 0, (CoroutineStart)null, ChannelsKt.consumes(var0), (Function2)(new Function2(var0, (Continuation)null) {
         final ReceiveChannel $this_withIndex;
         int I$0;
         Object L$0;
         Object L$1;
         Object L$2;
         int label;
         private ProducerScope p$;

         {
            this.$this_withIndex = var1;
         }

         public final Continuation create(Object var1, Continuation var2) {
            Function2 var3 = new <anonymous constructor>(this.$this_withIndex, var2);
            var3.p$ = (ProducerScope)var1;
            return var3;
         }

         public final Object invoke(Object var1, Object var2) {
            return ((<undefinedtype>)this.create(var1, (Continuation)var2)).invokeSuspend(Unit.INSTANCE);
         }

         public final Object invokeSuspend(Object var1) {
            Object var8 = IntrinsicsKt.getCOROUTINE_SUSPENDED();
            int var2 = this.label;
            int var3;
            <undefinedtype> var4;
            ProducerScope var5;
            ChannelIterator var6;
            IndexedValue var7;
            ChannelIterator var9;
            if (var2 != 0) {
               if (var2 != 1) {
                  if (var2 != 2) {
                     throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                  }

                  var6 = (ChannelIterator)this.L$2;
                  var2 = this.I$0;
                  var5 = (ProducerScope)this.L$0;
                  ResultKt.throwOnFailure(var1);
                  var4 = this;
                  var9 = var6;
               } else {
                  var6 = (ChannelIterator)this.L$1;
                  var2 = this.I$0;
                  var5 = (ProducerScope)this.L$0;
                  ResultKt.throwOnFailure(var1);
                  var4 = this;
                  if (!(Boolean)var1) {
                     return Unit.INSTANCE;
                  }

                  var1 = var6.next();
                  var3 = var2 + 1;
                  var7 = new IndexedValue(var2, var1);
                  this.L$0 = var5;
                  this.I$0 = var3;
                  this.L$1 = var1;
                  this.L$2 = var6;
                  this.label = 2;
                  if (var5.send(var7, this) == var8) {
                     return var8;
                  }

                  var9 = var6;
                  var2 = var3;
               }
            } else {
               ResultKt.throwOnFailure(var1);
               var5 = this.p$;
               var2 = 0;
               var9 = this.$this_withIndex.iterator();
               var4 = this;
            }

            while(true) {
               var4.L$0 = var5;
               var4.I$0 = var2;
               var4.L$1 = var9;
               var4.label = 1;
               Object var10 = var9.hasNext(var4);
               if (var10 == var8) {
                  return var8;
               }

               var6 = var9;
               if (!(Boolean)var10) {
                  return Unit.INSTANCE;
               }

               var1 = var9.next();
               var3 = var2 + 1;
               var7 = new IndexedValue(var2, var1);
               var4.L$0 = var5;
               var4.I$0 = var3;
               var4.L$1 = var1;
               var4.L$2 = var6;
               var4.label = 2;
               if (var5.send(var7, var4) == var8) {
                  return var8;
               }

               var9 = var6;
               var2 = var3;
            }
         }
      }), 6, (Object)null);
   }

   // $FF: synthetic method
   public static ReceiveChannel withIndex$default(ReceiveChannel var0, CoroutineContext var1, int var2, Object var3) {
      if ((var2 & 1) != 0) {
         var1 = (CoroutineContext)Dispatchers.getUnconfined();
      }

      return ChannelsKt.withIndex(var0, var1);
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final ReceiveChannel zip(ReceiveChannel var0, ReceiveChannel var1) {
      return ChannelsKt.zip$default(var0, var1, (CoroutineContext)null, (Function2)null.INSTANCE, 2, (Object)null);
   }

   @Deprecated(
      level = DeprecationLevel.ERROR,
      message = "Channel operators are deprecated in favour of Flow and will be removed in 1.4.x"
   )
   public static final ReceiveChannel zip(ReceiveChannel var0, ReceiveChannel var1, CoroutineContext var2, Function2 var3) {
      return ProduceKt.produce$default((CoroutineScope)GlobalScope.INSTANCE, var2, 0, (CoroutineStart)null, ChannelsKt.consumesAll(var0, var1), (Function2)(new Function2(var0, var1, var3, (Continuation)null) {
         final ReceiveChannel $other;
         final ReceiveChannel $this_zip;
         final Function2 $transform;
         Object L$0;
         Object L$1;
         Object L$10;
         Object L$2;
         Object L$3;
         Object L$4;
         Object L$5;
         Object L$6;
         Object L$7;
         Object L$8;
         Object L$9;
         int label;
         private ProducerScope p$;

         {
            this.$this_zip = var1;
            this.$other = var2;
            this.$transform = var3;
         }

         public final Continuation create(Object var1, Continuation var2) {
            Function2 var3 = new <anonymous constructor>(this.$this_zip, this.$other, this.$transform, var2);
            var3.p$ = (ProducerScope)var1;
            return var3;
         }

         public final Object invoke(Object var1, Object var2) {
            return ((<undefinedtype>)this.create(var1, (Continuation)var2)).invokeSuspend(Unit.INSTANCE);
         }

         public final Object invokeSuspend(Object param1) {
            // $FF: Couldn't be decompiled
         }
      }), 6, (Object)null);
   }

   // $FF: synthetic method
   public static ReceiveChannel zip$default(ReceiveChannel var0, ReceiveChannel var1, CoroutineContext var2, Function2 var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = (CoroutineContext)Dispatchers.getUnconfined();
      }

      return ChannelsKt.zip(var0, var1, var2, var3);
   }
}
